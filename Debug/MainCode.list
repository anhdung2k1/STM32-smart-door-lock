
MainCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004888  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004a10  08004a10  00005a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b54  08004b54  00006050  2**0
                  CONTENTS
  4 .ARM          00000008  08004b54  08004b54  00005b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b5c  08004b5c  00006050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b5c  08004b5c  00005b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b60  08004b60  00005b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08004b64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006050  2**0
                  CONTENTS
 10 .bss          000001b4  20000050  20000050  00006050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000204  20000204  00006050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e90f  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fda  00000000  00000000  0001498f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00016970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be2  00000000  00000000  00017898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021803  00000000  00000000  0001847a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a3f  00000000  00000000  00039c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd521  00000000  00000000  0004a6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117bdd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000400c  00000000  00000000  00117c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0011bc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049f8 	.word	0x080049f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	080049f8 	.word	0x080049f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LCD_Delay>:
void LCD_Delay(void);
void LCD_Write4Bits(uint8_t nb);
void LCD_PulseEnable(void);

void LCD_Delay(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  uint16_t i;
  for (i = 0; i < 1000; i++) {}
 80004be:	2300      	movs	r3, #0
 80004c0:	80fb      	strh	r3, [r7, #6]
 80004c2:	e002      	b.n	80004ca <LCD_Delay+0x12>
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	3301      	adds	r3, #1
 80004c8:	80fb      	strh	r3, [r7, #6]
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004d0:	d3f8      	bcc.n	80004c4 <LCD_Delay+0xc>
}
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <LCD_PulseEnable>:

void LCD_PulseEnable(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  EN_RESET();
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004ea:	480c      	ldr	r0, [pc, #48]	@ (800051c <LCD_PulseEnable+0x3c>)
 80004ec:	f001 ff64 	bl	80023b8 <HAL_GPIO_WritePin>
  LCD_Delay();
 80004f0:	f7ff ffe2 	bl	80004b8 <LCD_Delay>
  EN_SET();
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004fa:	4808      	ldr	r0, [pc, #32]	@ (800051c <LCD_PulseEnable+0x3c>)
 80004fc:	f001 ff5c 	bl	80023b8 <HAL_GPIO_WritePin>
  LCD_Delay();
 8000500:	f7ff ffda 	bl	80004b8 <LCD_Delay>
  EN_RESET();
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800050a:	4804      	ldr	r0, [pc, #16]	@ (800051c <LCD_PulseEnable+0x3c>)
 800050c:	f001 ff54 	bl	80023b8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f001 fc93 	bl	8001e3c <HAL_Delay>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400

08000520 <LCD_Write4Bits>:

void LCD_Write4Bits(uint8_t nb)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
  if (((nb >> 0) & 0x01) == 1) { D4_SET(); } else { D4_RESET(); }
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	2b00      	cmp	r3, #0
 8000532:	d006      	beq.n	8000542 <LCD_Write4Bits+0x22>
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800053a:	4826      	ldr	r0, [pc, #152]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800053c:	f001 ff3c 	bl	80023b8 <HAL_GPIO_WritePin>
 8000540:	e005      	b.n	800054e <LCD_Write4Bits+0x2e>
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000548:	4822      	ldr	r0, [pc, #136]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800054a:	f001 ff35 	bl	80023b8 <HAL_GPIO_WritePin>
  if (((nb >> 1) & 0x01) == 1) { D5_SET(); } else { D5_RESET(); }
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	d006      	beq.n	800056a <LCD_Write4Bits+0x4a>
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000562:	481c      	ldr	r0, [pc, #112]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 8000564:	f001 ff28 	bl	80023b8 <HAL_GPIO_WritePin>
 8000568:	e005      	b.n	8000576 <LCD_Write4Bits+0x56>
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000570:	4818      	ldr	r0, [pc, #96]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 8000572:	f001 ff21 	bl	80023b8 <HAL_GPIO_WritePin>
  if (((nb >> 2) & 0x01) == 1) { D6_SET(); } else { D6_RESET(); }
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d006      	beq.n	8000592 <LCD_Write4Bits+0x72>
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058a:	4812      	ldr	r0, [pc, #72]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800058c:	f001 ff14 	bl	80023b8 <HAL_GPIO_WritePin>
 8000590:	e005      	b.n	800059e <LCD_Write4Bits+0x7e>
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000598:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800059a:	f001 ff0d 	bl	80023b8 <HAL_GPIO_WritePin>
  if (((nb >> 3) & 0x01) == 1) { D7_SET(); } else { D7_RESET(); }
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d006      	beq.n	80005ba <LCD_Write4Bits+0x9a>
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 80005b4:	f001 ff00 	bl	80023b8 <HAL_GPIO_WritePin>
 80005b8:	e005      	b.n	80005c6 <LCD_Write4Bits+0xa6>
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 80005c2:	f001 fef9 	bl	80023b8 <HAL_GPIO_WritePin>
  LCD_PulseEnable();
 80005c6:	f7ff ff8b 	bl	80004e0 <LCD_PulseEnable>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020400 	.word	0x40020400

080005d8 <LCD_Command>:

void LCD_Command(uint8_t cmd)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  RS_RESET();
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e8:	4808      	ldr	r0, [pc, #32]	@ (800060c <LCD_Command+0x34>)
 80005ea:	f001 fee5 	bl	80023b8 <HAL_GPIO_WritePin>

  LCD_Write4Bits(cmd >> 4);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	091b      	lsrs	r3, r3, #4
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff93 	bl	8000520 <LCD_Write4Bits>
  LCD_Write4Bits(cmd);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff8f 	bl	8000520 <LCD_Write4Bits>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40020400 	.word	0x40020400

08000610 <LCD_Data>:

void LCD_Data(uint8_t dt)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  RS_SET();
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000620:	4808      	ldr	r0, [pc, #32]	@ (8000644 <LCD_Data+0x34>)
 8000622:	f001 fec9 	bl	80023b8 <HAL_GPIO_WritePin>
 
  LCD_Write4Bits(dt >> 4);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	091b      	lsrs	r3, r3, #4
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff77 	bl	8000520 <LCD_Write4Bits>
  LCD_Write4Bits(dt);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff73 	bl	8000520 <LCD_Write4Bits>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40020400 	.word	0x40020400

08000648 <LCD_Char>:

void LCD_Char(char chr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  LCD_Data((uint8_t) chr);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffdb 	bl	8000610 <LCD_Data>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <LCD_String>:

void LCD_String(char * str)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
  while (str[i] != 0)
 800066e:	e009      	b.n	8000684 <LCD_String+0x22>
  {
   LCD_Char(str[i]);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffe5 	bl	8000648 <LCD_Char>
   i++;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
  while (str[i] != 0)
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1ef      	bne.n	8000670 <LCD_String+0xe>
  }
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <LCD_SetPos>:

void LCD_SetPos(uint8_t x, uint8_t y)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
  uint8_t firstChar[] = {0x80, 0xC0, 0x94, 0xD4};
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <LCD_SetPos+0x34>)
 80006ae:	60fb      	str	r3, [r7, #12]
  LCD_Command(firstChar[y] + x);
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	3310      	adds	r3, #16
 80006b4:	443b      	add	r3, r7
 80006b6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4413      	add	r3, r2
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff89 	bl	80005d8 <LCD_Command>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	d494c080 	.word	0xd494c080

080006d4 <LCD_Clear>:

void LCD_Clear(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  LCD_Command(0x01);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff7d 	bl	80005d8 <LCD_Command>
  HAL_Delay(2);
 80006de:	2002      	movs	r0, #2
 80006e0:	f001 fbac 	bl	8001e3c <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <LCD_Init>:

void LCD_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80006ec:	2032      	movs	r0, #50	@ 0x32
 80006ee:	f001 fba5 	bl	8001e3c <HAL_Delay>
  RS_RESET();
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f8:	4815      	ldr	r0, [pc, #84]	@ (8000750 <LCD_Init+0x68>)
 80006fa:	f001 fe5d 	bl	80023b8 <HAL_GPIO_WritePin>
  EN_RESET();
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <LCD_Init+0x68>)
 8000706:	f001 fe57 	bl	80023b8 <HAL_GPIO_WritePin>
 
  LCD_Write4Bits(0x03);
 800070a:	2003      	movs	r0, #3
 800070c:	f7ff ff08 	bl	8000520 <LCD_Write4Bits>
  HAL_Delay(5);
 8000710:	2005      	movs	r0, #5
 8000712:	f001 fb93 	bl	8001e3c <HAL_Delay>
  LCD_Write4Bits(0x03);
 8000716:	2003      	movs	r0, #3
 8000718:	f7ff ff02 	bl	8000520 <LCD_Write4Bits>
  HAL_Delay(5);
 800071c:	2005      	movs	r0, #5
 800071e:	f001 fb8d 	bl	8001e3c <HAL_Delay>
  LCD_Write4Bits(0x03);
 8000722:	2003      	movs	r0, #3
 8000724:	f7ff fefc 	bl	8000520 <LCD_Write4Bits>
  HAL_Delay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f001 fb87 	bl	8001e3c <HAL_Delay>
  LCD_Write4Bits(0x02);
 800072e:	2002      	movs	r0, #2
 8000730:	f7ff fef6 	bl	8000520 <LCD_Write4Bits>
  LCD_Command(0x28);
 8000734:	2028      	movs	r0, #40	@ 0x28
 8000736:	f7ff ff4f 	bl	80005d8 <LCD_Command>
  LCD_Command(0x0C);
 800073a:	200c      	movs	r0, #12
 800073c:	f7ff ff4c 	bl	80005d8 <LCD_Command>
  LCD_Clear();
 8000740:	f7ff ffc8 	bl	80006d4 <LCD_Clear>
  LCD_Command(0x06);
 8000744:	2006      	movs	r0, #6
 8000746:	f7ff ff47 	bl	80005d8 <LCD_Command>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020400 	.word	0x40020400

08000754 <SendFPHeader>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendFPHeader()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPHeader,6,1000);
 8000758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075c:	2206      	movs	r2, #6
 800075e:	4903      	ldr	r1, [pc, #12]	@ (800076c <SendFPHeader+0x18>)
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <SendFPHeader+0x1c>)
 8000762:	f003 fccb 	bl	80040fc <HAL_UART_Transmit>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	2000010c 	.word	0x2000010c

08000774 <SendFPGetImage>:

void SendFPGetImage()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	 HAL_UART_Transmit(&huart5,FPGetImage,6,1000);
 8000778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077c:	2206      	movs	r2, #6
 800077e:	4903      	ldr	r1, [pc, #12]	@ (800078c <SendFPGetImage+0x18>)
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <SendFPGetImage+0x1c>)
 8000782:	f003 fcbb 	bl	80040fc <HAL_UART_Transmit>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	2000010c 	.word	0x2000010c

08000794 <SendFPCreateCharFile1>:

void SendFPCreateCharFile1()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateCharFile1,7,1000);
 8000798:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079c:	2207      	movs	r2, #7
 800079e:	4903      	ldr	r1, [pc, #12]	@ (80007ac <SendFPCreateCharFile1+0x18>)
 80007a0:	4803      	ldr	r0, [pc, #12]	@ (80007b0 <SendFPCreateCharFile1+0x1c>)
 80007a2:	f003 fcab 	bl	80040fc <HAL_UART_Transmit>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000010 	.word	0x20000010
 80007b0:	2000010c 	.word	0x2000010c

080007b4 <SendFPCreateCharFile2>:

void SendFPCreateCharFile2()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateCharFile2,7,1000);
 80007b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007bc:	2207      	movs	r2, #7
 80007be:	4903      	ldr	r1, [pc, #12]	@ (80007cc <SendFPCreateCharFile2+0x18>)
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <SendFPCreateCharFile2+0x1c>)
 80007c2:	f003 fc9b 	bl	80040fc <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000018 	.word	0x20000018
 80007d0:	2000010c 	.word	0x2000010c

080007d4 <SendFPCreateTemplate>:

void SendFPCreateTemplate()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateTemplate,6,1000);
 80007d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007dc:	2206      	movs	r2, #6
 80007de:	4903      	ldr	r1, [pc, #12]	@ (80007ec <SendFPCreateTemplate+0x18>)
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <SendFPCreateTemplate+0x1c>)
 80007e2:	f003 fc8b 	bl	80040fc <HAL_UART_Transmit>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000020 	.word	0x20000020
 80007f0:	2000010c 	.word	0x2000010c

080007f4 <SendFPDeleteAllFinger>:

void SendFPDeleteAllFinger()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPDeleteAllFinger,6,1000);
 80007f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fc:	2206      	movs	r2, #6
 80007fe:	4903      	ldr	r1, [pc, #12]	@ (800080c <SendFPDeleteAllFinger+0x18>)
 8000800:	4803      	ldr	r0, [pc, #12]	@ (8000810 <SendFPDeleteAllFinger+0x1c>)
 8000802:	f003 fc7b 	bl	80040fc <HAL_UART_Transmit>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000028 	.word	0x20000028
 8000810:	2000010c 	.word	0x2000010c

08000814 <SendFPDSearchFinger>:

void SendFPDSearchFinger()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPSearchFinger,11,1000);
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	220b      	movs	r2, #11
 800081e:	4903      	ldr	r1, [pc, #12]	@ (800082c <SendFPDSearchFinger+0x18>)
 8000820:	4803      	ldr	r0, [pc, #12]	@ (8000830 <SendFPDSearchFinger+0x1c>)
 8000822:	f003 fc6b 	bl	80040fc <HAL_UART_Transmit>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000030 	.word	0x20000030
 8000830:	2000010c 	.word	0x2000010c

08000834 <SendFGetNumberOfFinger>:

void SendFGetNumberOfFinger()
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPGetNumberOfFinger,6,1000);
 8000838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083c:	2206      	movs	r2, #6
 800083e:	4903      	ldr	r1, [pc, #12]	@ (800084c <SendFGetNumberOfFinger+0x18>)
 8000840:	4803      	ldr	r0, [pc, #12]	@ (8000850 <SendFGetNumberOfFinger+0x1c>)
 8000842:	f003 fc5b 	bl	80040fc <HAL_UART_Transmit>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000003c 	.word	0x2000003c
 8000850:	2000010c 	.word	0x2000010c

08000854 <SendStoreFinger>:

void SendStoreFinger(uint16_t IDStore)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
	uint16_t Sum=0;
 800085e:	2300      	movs	r3, #0
 8000860:	82fb      	strh	r3, [r7, #22]
	uint8_t DataSend[9]={0};
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	711a      	strb	r2, [r3, #4]

	DataSend[0]=0x01;
 8000870:	2301      	movs	r3, #1
 8000872:	733b      	strb	r3, [r7, #12]
	Sum=Sum+DataSend[0];
 8000874:	7b3b      	ldrb	r3, [r7, #12]
 8000876:	461a      	mov	r2, r3
 8000878:	8afb      	ldrh	r3, [r7, #22]
 800087a:	4413      	add	r3, r2
 800087c:	82fb      	strh	r3, [r7, #22]
	DataSend[1]=0x00;
 800087e:	2300      	movs	r3, #0
 8000880:	737b      	strb	r3, [r7, #13]
	Sum=Sum+DataSend[1];
 8000882:	7b7b      	ldrb	r3, [r7, #13]
 8000884:	461a      	mov	r2, r3
 8000886:	8afb      	ldrh	r3, [r7, #22]
 8000888:	4413      	add	r3, r2
 800088a:	82fb      	strh	r3, [r7, #22]
	DataSend[2]=0x06;
 800088c:	2306      	movs	r3, #6
 800088e:	73bb      	strb	r3, [r7, #14]
	Sum=Sum+DataSend[2];
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	8afb      	ldrh	r3, [r7, #22]
 8000896:	4413      	add	r3, r2
 8000898:	82fb      	strh	r3, [r7, #22]
	DataSend[3]=0x06;
 800089a:	2306      	movs	r3, #6
 800089c:	73fb      	strb	r3, [r7, #15]
	Sum=Sum+DataSend[3];
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	461a      	mov	r2, r3
 80008a2:	8afb      	ldrh	r3, [r7, #22]
 80008a4:	4413      	add	r3, r2
 80008a6:	82fb      	strh	r3, [r7, #22]
	DataSend[4]=0x01;
 80008a8:	2301      	movs	r3, #1
 80008aa:	743b      	strb	r3, [r7, #16]
	Sum=Sum+DataSend[4];
 80008ac:	7c3b      	ldrb	r3, [r7, #16]
 80008ae:	461a      	mov	r2, r3
 80008b0:	8afb      	ldrh	r3, [r7, #22]
 80008b2:	4413      	add	r3, r2
 80008b4:	82fb      	strh	r3, [r7, #22]
	DataSend[5]= (uint8_t)(IDStore>> 8);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	747b      	strb	r3, [r7, #17]
	Sum=Sum+DataSend[5];
 80008c0:	7c7b      	ldrb	r3, [r7, #17]
 80008c2:	461a      	mov	r2, r3
 80008c4:	8afb      	ldrh	r3, [r7, #22]
 80008c6:	4413      	add	r3, r2
 80008c8:	82fb      	strh	r3, [r7, #22]
	DataSend[6]=(uint8_t) (IDStore&0xFF);
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	74bb      	strb	r3, [r7, #18]
	Sum=Sum+DataSend[6];
 80008d0:	7cbb      	ldrb	r3, [r7, #18]
 80008d2:	461a      	mov	r2, r3
 80008d4:	8afb      	ldrh	r3, [r7, #22]
 80008d6:	4413      	add	r3, r2
 80008d8:	82fb      	strh	r3, [r7, #22]
  DataSend[7]=(uint8_t)(Sum>> 8);
 80008da:	8afb      	ldrh	r3, [r7, #22]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	74fb      	strb	r3, [r7, #19]
	DataSend[8]=(uint8_t)(Sum&0xFF);
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	753b      	strb	r3, [r7, #20]
	HAL_UART_Transmit(&huart5,DataSend,9,1000);
 80008ea:	f107 010c 	add.w	r1, r7, #12
 80008ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f2:	2209      	movs	r2, #9
 80008f4:	4803      	ldr	r0, [pc, #12]	@ (8000904 <SendStoreFinger+0xb0>)
 80008f6:	f003 fc01 	bl	80040fc <HAL_UART_Transmit>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000010c 	.word	0x2000010c

08000908 <CheckFPRespsone>:




uint8_t CheckFPRespsone(uint8_t MaxRead)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	uint8_t ByteCount=0;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t FPRXData[20]={0xFF};
 8000918:	23ff      	movs	r3, #255	@ 0xff
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
	uint8_t UARTData[1]={0};
 800092a:	2300      	movs	r3, #0
 800092c:	733b      	strb	r3, [r7, #12]
	uint32_t TimeOut = HAL_GetTick();
 800092e:	f001 fa79 	bl	8001e24 <HAL_GetTick>
 8000932:	62b8      	str	r0, [r7, #40]	@ 0x28
	uint8_t Result;
	IDFromFinger=0xFF;
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <CheckFPRespsone+0xc0>)
 8000936:	22ff      	movs	r2, #255	@ 0xff
 8000938:	701a      	strb	r2, [r3, #0]
	while((HAL_GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 800093a:	e016      	b.n	800096a <CheckFPRespsone+0x62>
	{
	    if(HAL_UART_Receive(&huart5, (uint8_t *)UARTData, 1, 1000) == HAL_OK)
 800093c:	f107 010c 	add.w	r1, r7, #12
 8000940:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000944:	2201      	movs	r2, #1
 8000946:	4821      	ldr	r0, [pc, #132]	@ (80009cc <CheckFPRespsone+0xc4>)
 8000948:	f003 fc63 	bl	8004212 <HAL_UART_Receive>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10b      	bne.n	800096a <CheckFPRespsone+0x62>
			{
				FPRXData[ByteCount] = UARTData[0];
 8000952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000956:	7b3a      	ldrb	r2, [r7, #12]
 8000958:	3330      	adds	r3, #48	@ 0x30
 800095a:	443b      	add	r3, r7
 800095c:	f803 2c20 	strb.w	r2, [r3, #-32]
				ByteCount++;
 8000960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000964:	3301      	adds	r3, #1
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	while((HAL_GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 800096a:	f001 fa5b 	bl	8001e24 <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000978:	d204      	bcs.n	8000984 <CheckFPRespsone+0x7c>
 800097a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3db      	bcc.n	800093c <CheckFPRespsone+0x34>
			}
	}

	if(ByteCount==0)
 8000984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <CheckFPRespsone+0x90>
	{
		//FPRXData[0]=0xEE;
		//FPRXData[1]=0xEE;
		//HAL_UART_Transmit(&huart2,FPRXData,2,1000);
		Result=FP_ERROR;
 800098c:	23fe      	movs	r3, #254	@ 0xfe
 800098e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		return Result;
 8000992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000996:	e012      	b.n	80009be <CheckFPRespsone+0xb6>
	}
	else if(ByteCount<MaxRead)
 8000998:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d205      	bcs.n	80009ae <CheckFPRespsone+0xa6>
	{
		Result=FP_ERROR;
 80009a2:	23fe      	movs	r3, #254	@ 0xfe
 80009a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		return Result;
 80009a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ac:	e007      	b.n	80009be <CheckFPRespsone+0xb6>
	}
	  else // vail data return
	{

		 Result=FPRXData[9];
 80009ae:	7e7b      	ldrb	r3, [r7, #25]
 80009b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		 IDFromFinger=FPRXData[11];
 80009b4:	7efa      	ldrb	r2, [r7, #27]
 80009b6:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <CheckFPRespsone+0xc0>)
 80009b8:	701a      	strb	r2, [r3, #0]
	   //HAL_UART_Transmit(&huart2,FPRXData,MaxRead,1000);
		 return Result;
 80009ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27

	}
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3730      	adds	r7, #48	@ 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200001e4 	.word	0x200001e4
 80009cc:	2000010c 	.word	0x2000010c

080009d0 <GetNumberOfFinger>:

uint8_t GetNumberOfFinger()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	uint8_t Result;
	SendFPHeader();
 80009d6:	f7ff febd 	bl	8000754 <SendFPHeader>
	SendFGetNumberOfFinger();
 80009da:	f7ff ff2b 	bl	8000834 <SendFGetNumberOfFinger>
	Result=CheckFPRespsone(14);
 80009de:	200e      	movs	r0, #14
 80009e0:	f7ff ff92 	bl	8000908 <CheckFPRespsone>
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return 0xFF;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <GetNumberOfFinger+0x22>
 80009ee:	23ff      	movs	r3, #255	@ 0xff
 80009f0:	e001      	b.n	80009f6 <GetNumberOfFinger+0x26>

	return IDFromFinger;
 80009f2:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <GetNumberOfFinger+0x30>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200001e4 	.word	0x200001e4

08000a04 <RegistryNewFinger>:




uint8_t RegistryNewFinger(uint16_t LocationID)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]

	uint8_t Result=FP_NOFINGER;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	73fb      	strb	r3, [r7, #15]
	uint32_t TimeOut = HAL_GetTick();
 8000a12:	f001 fa07 	bl	8001e24 <HAL_GetTick>
 8000a16:	60b8      	str	r0, [r7, #8]


	LCD_SetPos(0,1);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fe3e 	bl	800069c <LCD_SetPos>
	LCD_String("HAY DAT NGON TAY");
 8000a20:	4849      	ldr	r0, [pc, #292]	@ (8000b48 <RegistryNewFinger+0x144>)
 8000a22:	f7ff fe1e 	bl	8000662 <LCD_String>

	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000a26:	e008      	b.n	8000a3a <RegistryNewFinger+0x36>
	{

		SendFPHeader();
 8000a28:	f7ff fe94 	bl	8000754 <SendFPHeader>
		SendFPGetImage();
 8000a2c:	f7ff fea2 	bl	8000774 <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8000a30:	200c      	movs	r0, #12
 8000a32:	f7ff ff69 	bl	8000908 <CheckFPRespsone>
 8000a36:	4603      	mov	r3, r0
 8000a38:	73fb      	strb	r3, [r7, #15]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d108      	bne.n	8000a52 <RegistryNewFinger+0x4e>
 8000a40:	f001 f9f0 	bl	8001e24 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d9ea      	bls.n	8000a28 <RegistryNewFinger+0x24>
	}
	if(Result!=FP_OK) return FP_ERROR;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <RegistryNewFinger+0x58>
 8000a58:	23fe      	movs	r3, #254	@ 0xfe
 8000a5a:	e071      	b.n	8000b40 <RegistryNewFinger+0x13c>
	// continue if detect finger;
	SendFPHeader();
 8000a5c:	f7ff fe7a 	bl	8000754 <SendFPHeader>
	SendFPCreateCharFile1();
 8000a60:	f7ff fe98 	bl	8000794 <SendFPCreateCharFile1>
	Result=CheckFPRespsone(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff ff4f 	bl	8000908 <CheckFPRespsone>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	73fb      	strb	r3, [r7, #15]
	if(Result!=FP_OK) return FP_ERROR;
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <RegistryNewFinger+0x74>
 8000a74:	23fe      	movs	r3, #254	@ 0xfe
 8000a76:	e063      	b.n	8000b40 <RegistryNewFinger+0x13c>

	LCD_SetPos(0,1);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fe0e 	bl	800069c <LCD_SetPos>
	LCD_String(" HAY BO TAY RA  ");
 8000a80:	4832      	ldr	r0, [pc, #200]	@ (8000b4c <RegistryNewFinger+0x148>)
 8000a82:	f7ff fdee 	bl	8000662 <LCD_String>

	HAL_Delay(2000);
 8000a86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a8a:	f001 f9d7 	bl	8001e3c <HAL_Delay>
	Result=FP_NOFINGER;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	73fb      	strb	r3, [r7, #15]
	TimeOut = HAL_GetTick();
 8000a92:	f001 f9c7 	bl	8001e24 <HAL_GetTick>
 8000a96:	60b8      	str	r0, [r7, #8]
	LCD_SetPos(0,1);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fdfe 	bl	800069c <LCD_SetPos>
	LCD_String("DAT LAI NGON TAY");
 8000aa0:	482b      	ldr	r0, [pc, #172]	@ (8000b50 <RegistryNewFinger+0x14c>)
 8000aa2:	f7ff fdde 	bl	8000662 <LCD_String>

	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000aa6:	e008      	b.n	8000aba <RegistryNewFinger+0xb6>
	{

		SendFPHeader();
 8000aa8:	f7ff fe54 	bl	8000754 <SendFPHeader>
		SendFPGetImage();
 8000aac:	f7ff fe62 	bl	8000774 <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f7ff ff29 	bl	8000908 <CheckFPRespsone>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	73fb      	strb	r3, [r7, #15]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d108      	bne.n	8000ad2 <RegistryNewFinger+0xce>
 8000ac0:	f001 f9b0 	bl	8001e24 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d9ea      	bls.n	8000aa8 <RegistryNewFinger+0xa4>
	}
	if(Result!=FP_OK) return FP_ERROR;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <RegistryNewFinger+0xd8>
 8000ad8:	23fe      	movs	r3, #254	@ 0xfe
 8000ada:	e031      	b.n	8000b40 <RegistryNewFinger+0x13c>

	// continue if detect finger;
	SendFPHeader();
 8000adc:	f7ff fe3a 	bl	8000754 <SendFPHeader>
	SendFPCreateCharFile2();
 8000ae0:	f7ff fe68 	bl	80007b4 <SendFPCreateCharFile2>
	Result=CheckFPRespsone(12);
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f7ff ff0f 	bl	8000908 <CheckFPRespsone>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
	if(Result!=FP_OK) return FP_ERROR;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <RegistryNewFinger+0xf4>
 8000af4:	23fe      	movs	r3, #254	@ 0xfe
 8000af6:	e023      	b.n	8000b40 <RegistryNewFinger+0x13c>

	// Compare finger, create template
	SendFPHeader();
 8000af8:	f7ff fe2c 	bl	8000754 <SendFPHeader>
	SendFPCreateTemplate();
 8000afc:	f7ff fe6a 	bl	80007d4 <SendFPCreateTemplate>
	Result=CheckFPRespsone(12);
 8000b00:	200c      	movs	r0, #12
 8000b02:	f7ff ff01 	bl	8000908 <CheckFPRespsone>
 8000b06:	4603      	mov	r3, r0
 8000b08:	73fb      	strb	r3, [r7, #15]
	if(Result==FP_FINGER_NOTMATCH)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b0a      	cmp	r3, #10
 8000b0e:	d101      	bne.n	8000b14 <RegistryNewFinger+0x110>
	{

		return FP_FINGER_NOTMATCH;
 8000b10:	230a      	movs	r3, #10
 8000b12:	e015      	b.n	8000b40 <RegistryNewFinger+0x13c>
	}
	else if(Result!=FP_OK) return FP_ERROR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <RegistryNewFinger+0x11a>
 8000b1a:	23fe      	movs	r3, #254	@ 0xfe
 8000b1c:	e010      	b.n	8000b40 <RegistryNewFinger+0x13c>

	// save finger
	SendFPHeader();
 8000b1e:	f7ff fe19 	bl	8000754 <SendFPHeader>
	SendStoreFinger(LocationID);
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe95 	bl	8000854 <SendStoreFinger>
	Result=CheckFPRespsone(12);
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f7ff feec 	bl	8000908 <CheckFPRespsone>
 8000b30:	4603      	mov	r3, r0
 8000b32:	73fb      	strb	r3, [r7, #15]
	if(Result!=FP_OK) return FP_ERROR;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <RegistryNewFinger+0x13a>
 8000b3a:	23fe      	movs	r3, #254	@ 0xfe
 8000b3c:	e000      	b.n	8000b40 <RegistryNewFinger+0x13c>
	else
	{
		return FP_OK;
 8000b3e:	2300      	movs	r3, #0
	}

}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08004a10 	.word	0x08004a10
 8000b4c:	08004a24 	.word	0x08004a24
 8000b50:	08004a38 	.word	0x08004a38

08000b54 <CheckFinger>:

uint8_t CheckFinger()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	uint8_t Result=FP_NOFINGER;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	71fb      	strb	r3, [r7, #7]
	uint32_t TimeOut = HAL_GetTick();
 8000b5e:	f001 f961 	bl	8001e24 <HAL_GetTick>
 8000b62:	6038      	str	r0, [r7, #0]





	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)&&HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0) // time out is 5000 ms and no button press
 8000b64:	e008      	b.n	8000b78 <CheckFinger+0x24>
	{

		SendFPHeader();
 8000b66:	f7ff fdf5 	bl	8000754 <SendFPHeader>
		SendFPGetImage();
 8000b6a:	f7ff fe03 	bl	8000774 <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8000b6e:	200c      	movs	r0, #12
 8000b70:	f7ff feca 	bl	8000908 <CheckFPRespsone>
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)&&HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0) // time out is 5000 ms and no button press
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d10f      	bne.n	8000b9e <CheckFinger+0x4a>
 8000b7e:	f001 f951 	bl	8001e24 <HAL_GetTick>
 8000b82:	4602      	mov	r2, r0
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d806      	bhi.n	8000b9e <CheckFinger+0x4a>
 8000b90:	2101      	movs	r1, #1
 8000b92:	4816      	ldr	r0, [pc, #88]	@ (8000bec <CheckFinger+0x98>)
 8000b94:	f001 fbf8 	bl	8002388 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0e3      	beq.n	8000b66 <CheckFinger+0x12>
	}
	if(Result==FP_NOFINGER)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d101      	bne.n	8000ba8 <CheckFinger+0x54>
	{

		return FP_NOFINGER;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e01c      	b.n	8000be2 <CheckFinger+0x8e>
	}
	if(Result!=FP_OK) return FP_ERROR;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <CheckFinger+0x5e>
 8000bae:	23fe      	movs	r3, #254	@ 0xfe
 8000bb0:	e017      	b.n	8000be2 <CheckFinger+0x8e>
	// continue if detect finger;
	SendFPHeader();
 8000bb2:	f7ff fdcf 	bl	8000754 <SendFPHeader>
	SendFPCreateCharFile1();
 8000bb6:	f7ff fded 	bl	8000794 <SendFPCreateCharFile1>
	Result=CheckFPRespsone(12);
 8000bba:	200c      	movs	r0, #12
 8000bbc:	f7ff fea4 	bl	8000908 <CheckFPRespsone>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return FP_ERROR;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <CheckFinger+0x7a>
 8000bca:	23fe      	movs	r3, #254	@ 0xfe
 8000bcc:	e009      	b.n	8000be2 <CheckFinger+0x8e>

	// Search Finger
	SendFPHeader();
 8000bce:	f7ff fdc1 	bl	8000754 <SendFPHeader>
	SendFPDSearchFinger();
 8000bd2:	f7ff fe1f 	bl	8000814 <SendFPDSearchFinger>
	Result=CheckFPRespsone(16);
 8000bd6:	2010      	movs	r0, #16
 8000bd8:	f7ff fe96 	bl	8000908 <CheckFPRespsone>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
	return Result;
 8000be0:	79fb      	ldrb	r3, [r7, #7]


}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020000 	.word	0x40020000

08000bf0 <ProcessRegistryNewFinger>:


uint8_t ProcessRegistryNewFinger()
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  uint8_t FingerResult;
  LCD_SetPos(0,1);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fd4f 	bl	800069c <LCD_SetPos>
  LCD_String("DANG KY VAN TAY ");
 8000bfe:	4832      	ldr	r0, [pc, #200]	@ (8000cc8 <ProcessRegistryNewFinger+0xd8>)
 8000c00:	f7ff fd2f 	bl	8000662 <LCD_String>

  HAL_Delay(1000);
 8000c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c08:	f001 f918 	bl	8001e3c <HAL_Delay>
  FingerResult=RegistryNewFinger(CurrentNumberFinger+1);
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fef5 	bl	8000a04 <RegistryNewFinger>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	if(FingerResult==FP_OK)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d123      	bne.n	8000c6c <ProcessRegistryNewFinger+0x7c>
	{
		LCD_SetPos(0,1);
 8000c24:	2101      	movs	r1, #1
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fd38 	bl	800069c <LCD_SetPos>
		LCD_String("DANG KY T.CONG  ");
 8000c2c:	4828      	ldr	r0, [pc, #160]	@ (8000cd0 <ProcessRegistryNewFinger+0xe0>)
 8000c2e:	f7ff fd18 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c36:	f001 f901 	bl	8001e3c <HAL_Delay>
		LCD_SetPos(0,1);
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fd2d 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000c42:	4824      	ldr	r0, [pc, #144]	@ (8000cd4 <ProcessRegistryNewFinger+0xe4>)
 8000c44:	f7ff fd0d 	bl	8000662 <LCD_String>
		CurrentNumberFinger++;
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c52:	701a      	strb	r2, [r3, #0]
		if(CurrentNumberFinger==100) CurrentNumberFinger=1;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b64      	cmp	r3, #100	@ 0x64
 8000c5a:	d102      	bne.n	8000c62 <ProcessRegistryNewFinger+0x72>
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1500);
 8000c62:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c66:	f001 f8e9 	bl	8001e3c <HAL_Delay>
 8000c6a:	e027      	b.n	8000cbc <ProcessRegistryNewFinger+0xcc>
	}
	else if(FingerResult==FP_FINGER_NOTMATCH)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b0a      	cmp	r3, #10
 8000c70:	d112      	bne.n	8000c98 <ProcessRegistryNewFinger+0xa8>
	{
		LCD_SetPos(0,1);
 8000c72:	2101      	movs	r1, #1
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fd11 	bl	800069c <LCD_SetPos>
		LCD_String("2 VT KHONG KHOP ");
 8000c7a:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <ProcessRegistryNewFinger+0xe8>)
 8000c7c:	f7ff fcf1 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000c80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c84:	f001 f8da 	bl	8001e3c <HAL_Delay>
		LCD_SetPos(0,1);
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fd06 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000c90:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <ProcessRegistryNewFinger+0xe4>)
 8000c92:	f7ff fce6 	bl	8000662 <LCD_String>
 8000c96:	e011      	b.n	8000cbc <ProcessRegistryNewFinger+0xcc>
	}
	else
	{
		LCD_SetPos(0,1);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fcfe 	bl	800069c <LCD_SetPos>
		LCD_String(" CO LOI XAY RA  ");
 8000ca0:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <ProcessRegistryNewFinger+0xec>)
 8000ca2:	f7ff fcde 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000ca6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000caa:	f001 f8c7 	bl	8001e3c <HAL_Delay>
		LCD_SetPos(0,1);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fcf3 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000cb6:	4807      	ldr	r0, [pc, #28]	@ (8000cd4 <ProcessRegistryNewFinger+0xe4>)
 8000cb8:	f7ff fcd3 	bl	8000662 <LCD_String>

	}
	return FingerResult;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	08004a4c 	.word	0x08004a4c
 8000ccc:	200001e5 	.word	0x200001e5
 8000cd0:	08004a60 	.word	0x08004a60
 8000cd4:	08004a74 	.word	0x08004a74
 8000cd8:	08004a88 	.word	0x08004a88
 8000cdc:	08004a9c 	.word	0x08004a9c

08000ce0 <DeleteAllFinger>:

void DeleteAllFinger()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

	uint8_t FingerResult;
	SendFPHeader();
 8000ce6:	f7ff fd35 	bl	8000754 <SendFPHeader>
	SendFPDeleteAllFinger();
 8000cea:	f7ff fd83 	bl	80007f4 <SendFPDeleteAllFinger>
	FingerResult=CheckFPRespsone(12);
 8000cee:	200c      	movs	r0, #12
 8000cf0:	f7ff fe0a 	bl	8000908 <CheckFPRespsone>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
	if(FingerResult==FP_OK)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d115      	bne.n	8000d2a <DeleteAllFinger+0x4a>
	{
		LCD_SetPos(0,1);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fccb 	bl	800069c <LCD_SetPos>
		LCD_String(" DA XOA VAN TAY ");
 8000d06:	4814      	ldr	r0, [pc, #80]	@ (8000d58 <DeleteAllFinger+0x78>)
 8000d08:	f7ff fcab 	bl	8000662 <LCD_String>
		HAL_Delay(1500);
 8000d0c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d10:	f001 f894 	bl	8001e3c <HAL_Delay>
		LCD_SetPos(0,1);
 8000d14:	2101      	movs	r1, #1
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fcc0 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000d1c:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <DeleteAllFinger+0x7c>)
 8000d1e:	f7ff fca0 	bl	8000662 <LCD_String>
		CurrentNumberFinger=0;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <DeleteAllFinger+0x80>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1500);
		LCD_SetPos(0,1);
		LCD_String("                ");
	}

}
 8000d28:	e011      	b.n	8000d4e <DeleteAllFinger+0x6e>
		LCD_SetPos(0,1);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fcb5 	bl	800069c <LCD_SetPos>
		LCD_String(" CO LOI XAY RA  ");
 8000d32:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <DeleteAllFinger+0x84>)
 8000d34:	f7ff fc95 	bl	8000662 <LCD_String>
		HAL_Delay(1500);
 8000d38:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d3c:	f001 f87e 	bl	8001e3c <HAL_Delay>
		LCD_SetPos(0,1);
 8000d40:	2101      	movs	r1, #1
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fcaa 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <DeleteAllFinger+0x7c>)
 8000d4a:	f7ff fc8a 	bl	8000662 <LCD_String>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	08004ab0 	.word	0x08004ab0
 8000d5c:	08004a74 	.word	0x08004a74
 8000d60:	200001e5 	.word	0x200001e5
 8000d64:	08004a9c 	.word	0x08004a9c

08000d68 <Delay_us>:


void Delay_us(uint32_t TimeDelay)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint32_t TimeCount;
	for(TimeCount=0;TimeCount<TimeDelay;TimeCount++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	e005      	b.n	8000d82 <Delay_us+0x1a>
	{
		__ASM volatile ("NOP");
 8000d76:	bf00      	nop
		__ASM volatile ("NOP");
 8000d78:	bf00      	nop
		__ASM volatile ("NOP");
 8000d7a:	bf00      	nop
	for(TimeCount=0;TimeCount<TimeDelay;TimeCount++)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3f5      	bcc.n	8000d76 <Delay_us+0xe>
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SetServoAngle>:

void SetServoAngle(uint8_t angle)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	if (angle > 180) angle = 180;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2bb4      	cmp	r3, #180	@ 0xb4
 8000da6:	d901      	bls.n	8000dac <SetServoAngle+0x14>
 8000da8:	23b4      	movs	r3, #180	@ 0xb4
 8000daa:	71fb      	strb	r3, [r7, #7]
	uint32_t pulse_length = ((angle * (2000 - 1000)) / 180) + 1000;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <SetServoAngle+0x48>)
 8000db8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbc:	441a      	add	r2, r3
 8000dbe:	11d2      	asrs	r2, r2, #7
 8000dc0:	17db      	asrs	r3, r3, #31
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000dc8:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_length);
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <SetServoAngle+0x4c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	b60b60b7 	.word	0xb60b60b7
 8000de4:	200000c4 	.word	0x200000c4

08000de8 <CloseDoor>:

void CloseDoor()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
//	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
//	  Delay_us(1000);
//	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
	SetServoAngle(0); // Close door (0 degrees)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ffd3 	bl	8000d98 <SetServoAngle>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <OpenDoor>:

void OpenDoor()
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
//	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
//	  Delay_us(2100);
//	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
	SetServoAngle(90); // Open door (90 degrees)
 8000dfa:	205a      	movs	r0, #90	@ 0x5a
 8000dfc:	f7ff ffcc 	bl	8000d98 <SetServoAngle>
	Delay_us(2100);
 8000e00:	f640 0034 	movw	r0, #2100	@ 0x834
 8000e04:	f7ff ffb0 	bl	8000d68 <Delay_us>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 ffa1 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f935 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 fac5 	bl	80013a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e1e:	f000 fa6f 	bl	8001300 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e22:	f000 fa97 	bl	8001354 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8000e26:	f000 fa41 	bl	80012ac <MX_UART5_Init>
  MX_SPI1_Init();
 8000e2a:	f000 f993 	bl	8001154 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e2e:	f000 f9c7 	bl	80011c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000e32:	f000 fc2f 	bl	8001694 <MFRC522_Init>

  LCD_Init();
 8000e36:	f7ff fc57 	bl	80006e8 <LCD_Init>
  LCD_SetPos(0,0);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fc2d 	bl	800069c <LCD_SetPos>
  LCD_String("HT VAN TAY/RFID");
 8000e42:	4883      	ldr	r0, [pc, #524]	@ (8001050 <main+0x244>)
 8000e44:	f7ff fc0d 	bl	8000662 <LCD_String>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4882      	ldr	r0, [pc, #520]	@ (8001054 <main+0x248>)
 8000e4c:	f002 fb1c 	bl	8003488 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8000e50:	4b80      	ldr	r3, [pc, #512]	@ (8001054 <main+0x248>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2232      	movs	r2, #50	@ 0x32
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_Delay(1000);
 8000e58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e5c:	f000 ffee 	bl	8001e3c <HAL_Delay>

  OpenDoor(); // need to active motor
 8000e60:	f7ff ffc9 	bl	8000df6 <OpenDoor>
  HAL_Delay(500);
 8000e64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e68:	f000 ffe8 	bl	8001e3c <HAL_Delay>
  CloseDoor();
 8000e6c:	f7ff ffbc 	bl	8000de8 <CloseDoor>
  HAL_Delay(500);
 8000e70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e74:	f000 ffe2 	bl	8001e3c <HAL_Delay>
  OpenDoor();
 8000e78:	f7ff ffbd 	bl	8000df6 <OpenDoor>
  HAL_Delay(500);
 8000e7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e80:	f000 ffdc 	bl	8001e3c <HAL_Delay>
  CloseDoor();
 8000e84:	f7ff ffb0 	bl	8000de8 <CloseDoor>
  CurrentNumberFinger=GetNumberOfFinger();
 8000e88:	f7ff fda2 	bl	80009d0 <GetNumberOfFinger>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b71      	ldr	r3, [pc, #452]	@ (8001058 <main+0x24c>)
 8000e92:	701a      	strb	r2, [r3, #0]
  if(CurrentNumberFinger>100)
 8000e94:	4b70      	ldr	r3, [pc, #448]	@ (8001058 <main+0x24c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b64      	cmp	r3, #100	@ 0x64
 8000e9a:	d902      	bls.n	8000ea2 <main+0x96>
  {
	CurrentNumberFinger=1;
 8000e9c:	4b6e      	ldr	r3, [pc, #440]	@ (8001058 <main+0x24c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
  }

	 LCD_SetPos(0,1);
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fbf9 	bl	800069c <LCD_SetPos>
	 LCD_String("    SAN SANG    ");
 8000eaa:	486c      	ldr	r0, [pc, #432]	@ (800105c <main+0x250>)
 8000eac:	f7ff fbd9 	bl	8000662 <LCD_String>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Begin RFID
	status = MFRC522_Request(PICC_REQIDL, str);
 8000eb0:	496b      	ldr	r1, [pc, #428]	@ (8001060 <main+0x254>)
 8000eb2:	2026      	movs	r0, #38	@ 0x26
 8000eb4:	f000 fce5 	bl	8001882 <MFRC522_Request>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b69      	ldr	r3, [pc, #420]	@ (8001064 <main+0x258>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	status = MFRC522_Anticoll(str);
 8000ec0:	4867      	ldr	r0, [pc, #412]	@ (8001060 <main+0x254>)
 8000ec2:	f000 fd03 	bl	80018cc <MFRC522_Anticoll>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b66      	ldr	r3, [pc, #408]	@ (8001064 <main+0x258>)
 8000ecc:	701a      	strb	r2, [r3, #0]
	memcpy(sNum, str, 5);
 8000ece:	4b66      	ldr	r3, [pc, #408]	@ (8001068 <main+0x25c>)
 8000ed0:	4a63      	ldr	r2, [pc, #396]	@ (8001060 <main+0x254>)
 8000ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed6:	6018      	str	r0, [r3, #0]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	7019      	strb	r1, [r3, #0]
	HAL_Delay(100);
 8000edc:	2064      	movs	r0, #100	@ 0x64
 8000ede:	f000 ffad 	bl	8001e3c <HAL_Delay>

	if (((str[0]==163) && (str[1]==99) && (str[2]==212) && (str[3]==26) && (str[4]==14)) || ((str[0]==68) && (str[1]==244) && (str[2]==128) && (str[3]==113) && (str[4]==65)))
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8001060 <main+0x254>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2ba3      	cmp	r3, #163	@ 0xa3
 8000ee8:	d10f      	bne.n	8000f0a <main+0xfe>
 8000eea:	4b5d      	ldr	r3, [pc, #372]	@ (8001060 <main+0x254>)
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	2b63      	cmp	r3, #99	@ 0x63
 8000ef0:	d10b      	bne.n	8000f0a <main+0xfe>
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8001060 <main+0x254>)
 8000ef4:	789b      	ldrb	r3, [r3, #2]
 8000ef6:	2bd4      	cmp	r3, #212	@ 0xd4
 8000ef8:	d107      	bne.n	8000f0a <main+0xfe>
 8000efa:	4b59      	ldr	r3, [pc, #356]	@ (8001060 <main+0x254>)
 8000efc:	78db      	ldrb	r3, [r3, #3]
 8000efe:	2b1a      	cmp	r3, #26
 8000f00:	d103      	bne.n	8000f0a <main+0xfe>
 8000f02:	4b57      	ldr	r3, [pc, #348]	@ (8001060 <main+0x254>)
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	2b0e      	cmp	r3, #14
 8000f08:	d013      	beq.n	8000f32 <main+0x126>
 8000f0a:	4b55      	ldr	r3, [pc, #340]	@ (8001060 <main+0x254>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b44      	cmp	r3, #68	@ 0x44
 8000f10:	d125      	bne.n	8000f5e <main+0x152>
 8000f12:	4b53      	ldr	r3, [pc, #332]	@ (8001060 <main+0x254>)
 8000f14:	785b      	ldrb	r3, [r3, #1]
 8000f16:	2bf4      	cmp	r3, #244	@ 0xf4
 8000f18:	d121      	bne.n	8000f5e <main+0x152>
 8000f1a:	4b51      	ldr	r3, [pc, #324]	@ (8001060 <main+0x254>)
 8000f1c:	789b      	ldrb	r3, [r3, #2]
 8000f1e:	2b80      	cmp	r3, #128	@ 0x80
 8000f20:	d11d      	bne.n	8000f5e <main+0x152>
 8000f22:	4b4f      	ldr	r3, [pc, #316]	@ (8001060 <main+0x254>)
 8000f24:	78db      	ldrb	r3, [r3, #3]
 8000f26:	2b71      	cmp	r3, #113	@ 0x71
 8000f28:	d119      	bne.n	8000f5e <main+0x152>
 8000f2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001060 <main+0x254>)
 8000f2c:	791b      	ldrb	r3, [r3, #4]
 8000f2e:	2b41      	cmp	r3, #65	@ 0x41
 8000f30:	d115      	bne.n	8000f5e <main+0x152>
	{
		LCD_SetPos(0,1);
 8000f32:	2101      	movs	r1, #1
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fbb1 	bl	800069c <LCD_SetPos>
		LCD_String(" Dang mo cua");
 8000f3a:	484c      	ldr	r0, [pc, #304]	@ (800106c <main+0x260>)
 8000f3c:	f7ff fb91 	bl	8000662 <LCD_String>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 150);
 8000f40:	4b44      	ldr	r3, [pc, #272]	@ (8001054 <main+0x248>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2296      	movs	r2, #150	@ 0x96
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(2000);
 8000f48:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f4c:	f000 ff76 	bl	8001e3c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8000f50:	4b40      	ldr	r3, [pc, #256]	@ (8001054 <main+0x248>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2232      	movs	r2, #50	@ 0x32
 8000f56:	635a      	str	r2, [r3, #52]	@ 0x34
		LCD_Clear();
 8000f58:	f7ff fbbc 	bl	80006d4 <LCD_Clear>
 8000f5c:	e014      	b.n	8000f88 <main+0x17c>
	} else if ((str[0]==147) && (str[1]==32))
 8000f5e:	4b40      	ldr	r3, [pc, #256]	@ (8001060 <main+0x254>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b93      	cmp	r3, #147	@ 0x93
 8000f64:	d103      	bne.n	8000f6e <main+0x162>
 8000f66:	4b3e      	ldr	r3, [pc, #248]	@ (8001060 <main+0x254>)
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	2b20      	cmp	r3, #32
 8000f6c:	d06d      	beq.n	800104a <main+0x23e>
	{
		continue;
	}
	else
	{
		LCD_SetPos(0,1);
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fb93 	bl	800069c <LCD_SetPos>
		LCD_String(" Mo cua that bai");
 8000f76:	483e      	ldr	r0, [pc, #248]	@ (8001070 <main+0x264>)
 8000f78:	f7ff fb73 	bl	8000662 <LCD_String>
		HAL_Delay(2000);
 8000f7c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f80:	f000 ff5c 	bl	8001e3c <HAL_Delay>
		LCD_Clear();
 8000f84:	f7ff fba6 	bl	80006d4 <LCD_Clear>
	}
	//End RFID

	FingerResult=CheckFinger();
 8000f88:	f7ff fde4 	bl	8000b54 <CheckFinger>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
    if(FingerResult==FP_OK)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d116      	bne.n	8000fc4 <main+0x1b8>
	{
		OpenDoor();
 8000f96:	f7ff ff2e 	bl	8000df6 <OpenDoor>
		LCD_SetPos(0,1);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fb7d 	bl	800069c <LCD_SetPos>
		LCD_String("   DANG MO CUA ");
 8000fa2:	4834      	ldr	r0, [pc, #208]	@ (8001074 <main+0x268>)
 8000fa4:	f7ff fb5d 	bl	8000662 <LCD_String>

		HAL_Delay(3000);
 8000fa8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fac:	f000 ff46 	bl	8001e3c <HAL_Delay>
		CloseDoor();
 8000fb0:	f7ff ff1a 	bl	8000de8 <CloseDoor>
		LCD_SetPos(0,1);
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fb70 	bl	800069c <LCD_SetPos>
		LCD_String("               ");
 8000fbc:	482e      	ldr	r0, [pc, #184]	@ (8001078 <main+0x26c>)
 8000fbe:	f7ff fb50 	bl	8000662 <LCD_String>
 8000fc2:	e014      	b.n	8000fee <main+0x1e2>
	}
	else if(FingerResult==FP_FINGER_NOTFOUND)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b09      	cmp	r3, #9
 8000fc8:	d111      	bne.n	8000fee <main+0x1e2>
	{
		LCD_SetPos(0,1);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fb65 	bl	800069c <LCD_SetPos>
		LCD_String("VT KHONG HOP LE");
 8000fd2:	482a      	ldr	r0, [pc, #168]	@ (800107c <main+0x270>)
 8000fd4:	f7ff fb45 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000fd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fdc:	f000 ff2e 	bl	8001e3c <HAL_Delay>
		LCD_SetPos(0,1);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fb5a 	bl	800069c <LCD_SetPos>
		LCD_String("               ");
 8000fe8:	4823      	ldr	r0, [pc, #140]	@ (8001078 <main+0x26c>)
 8000fea:	f7ff fb3a 	bl	8000662 <LCD_String>
	}

	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4823      	ldr	r0, [pc, #140]	@ (8001080 <main+0x274>)
 8000ff2:	f001 f9c9 	bl	8002388 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d121      	bne.n	8001040 <main+0x234>
	{
		TimeCount = HAL_GetTick();
 8000ffc:	f000 ff12 	bl	8001e24 <HAL_GetTick>
 8001000:	6038      	str	r0, [r7, #0]
		while(HAL_GetTick()-TimeCount<3000&&HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1) // check hold button in 3 second to erase
 8001002:	bf00      	nop
 8001004:	f000 ff0e 	bl	8001e24 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001012:	4293      	cmp	r3, r2
 8001014:	d806      	bhi.n	8001024 <main+0x218>
 8001016:	2101      	movs	r1, #1
 8001018:	4819      	ldr	r0, [pc, #100]	@ (8001080 <main+0x274>)
 800101a:	f001 f9b5 	bl	8002388 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d0ef      	beq.n	8001004 <main+0x1f8>
		{}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1) // still hold button
 8001024:	2101      	movs	r1, #1
 8001026:	4816      	ldr	r0, [pc, #88]	@ (8001080 <main+0x274>)
 8001028:	f001 f9ae 	bl	8002388 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d102      	bne.n	8001038 <main+0x22c>
		{
			DeleteAllFinger();
 8001032:	f7ff fe55 	bl	8000ce0 <DeleteAllFinger>
 8001036:	e003      	b.n	8001040 <main+0x234>
		}
		else
		{
			FingerResult=ProcessRegistryNewFinger();
 8001038:	f7ff fdda 	bl	8000bf0 <ProcessRegistryNewFinger>
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
		}

	}
	HAL_Delay(1000);
 8001040:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001044:	f000 fefa 	bl	8001e3c <HAL_Delay>
 8001048:	e732      	b.n	8000eb0 <main+0xa4>
		continue;
 800104a:	bf00      	nop
	status = MFRC522_Request(PICC_REQIDL, str);
 800104c:	e730      	b.n	8000eb0 <main+0xa4>
 800104e:	bf00      	nop
 8001050:	08004ac4 	.word	0x08004ac4
 8001054:	200000c4 	.word	0x200000c4
 8001058:	200001e5 	.word	0x200001e5
 800105c:	08004ad4 	.word	0x08004ad4
 8001060:	200001e8 	.word	0x200001e8
 8001064:	200001e6 	.word	0x200001e6
 8001068:	200001f8 	.word	0x200001f8
 800106c:	08004ae8 	.word	0x08004ae8
 8001070:	08004af8 	.word	0x08004af8
 8001074:	08004b0c 	.word	0x08004b0c
 8001078:	08004b1c 	.word	0x08004b1c
 800107c:	08004b2c 	.word	0x08004b2c
 8001080:	40020000 	.word	0x40020000

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	@ 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2230      	movs	r2, #48	@ 0x30
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fc84 	bl	80049a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <SystemClock_Config+0xc8>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	4a26      	ldr	r2, [pc, #152]	@ (800114c <SystemClock_Config+0xc8>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <SystemClock_Config+0xc8>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <SystemClock_Config+0xcc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a20      	ldr	r2, [pc, #128]	@ (8001150 <SystemClock_Config+0xcc>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <SystemClock_Config+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f4:	2308      	movs	r3, #8
 80010f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010f8:	2348      	movs	r3, #72	@ 0x48
 80010fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f96f 	bl	80023ec <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001114:	f000 fa06 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2102      	movs	r1, #2
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fbd1 	bl	80028dc <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001140:	f000 f9f0 	bl	8001524 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	@ 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800115a:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <MX_SPI1_Init+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001160:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001184:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001188:	2210      	movs	r2, #16
 800118a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_SPI1_Init+0x64>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_SPI1_Init+0x64>)
 80011a6:	f001 fdb9 	bl	8002d1c <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011b0:	f000 f9b8 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000006c 	.word	0x2000006c
 80011bc:	40013000 	.word	0x40013000

080011c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	@ 0x38
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]
 80011ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 80011f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 80011f8:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 80011fa:	f240 3283 	movw	r2, #899	@ 0x383
 80011fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001206:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 8001208:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800120c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800121a:	4823      	ldr	r0, [pc, #140]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 800121c:	f002 f88c 	bl	8003338 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001226:	f000 f97d 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001234:	4619      	mov	r1, r3
 8001236:	481c      	ldr	r0, [pc, #112]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 8001238:	f002 fab0 	bl	800379c <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001242:	f000 f96f 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001246:	4818      	ldr	r0, [pc, #96]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 8001248:	f002 f8c5 	bl	80033d6 <HAL_TIM_PWM_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001252:	f000 f967 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4619      	mov	r1, r3
 8001264:	4810      	ldr	r0, [pc, #64]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 8001266:	f002 fe7d 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001270:	f000 f958 	bl	8001524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	2360      	movs	r3, #96	@ 0x60
 8001276:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	4619      	mov	r1, r3
 800128a:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 800128c:	f002 f9c4 	bl	8003618 <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001296:	f000 f945 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800129a:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <MX_TIM2_Init+0xe8>)
 800129c:	f000 fbe4 	bl	8001a68 <HAL_TIM_MspPostInit>

}
 80012a0:	bf00      	nop
 80012a2:	3738      	adds	r7, #56	@ 0x38
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200000c4 	.word	0x200000c4

080012ac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_UART5_Init+0x4c>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <MX_UART5_Init+0x50>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <MX_UART5_Init+0x4c>)
 80012b8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80012bc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_UART5_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_UART5_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <MX_UART5_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_UART5_Init+0x4c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <MX_UART5_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_UART5_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_UART5_Init+0x4c>)
 80012e4:	f002 feba 	bl	800405c <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80012ee:	f000 f919 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000010c 	.word	0x2000010c
 80012fc:	40005000 	.word	0x40005000

08001300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <MX_USART1_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 800130c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_USART1_UART_Init+0x4c>)
 8001338:	f002 fe90 	bl	800405c <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001342:	f000 f8ef 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000154 	.word	0x20000154
 8001350:	40011000 	.word	0x40011000

08001354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_USART2_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <MX_USART2_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001360:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_USART2_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_USART2_UART_Init+0x4c>)
 800138c:	f002 fe66 	bl	800405c <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f8c5 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000019c 	.word	0x2000019c
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b53      	ldr	r3, [pc, #332]	@ (8001510 <MX_GPIO_Init+0x168>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a52      	ldr	r2, [pc, #328]	@ (8001510 <MX_GPIO_Init+0x168>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b50      	ldr	r3, [pc, #320]	@ (8001510 <MX_GPIO_Init+0x168>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b4c      	ldr	r3, [pc, #304]	@ (8001510 <MX_GPIO_Init+0x168>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001510 <MX_GPIO_Init+0x168>)
 80013e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <MX_GPIO_Init+0x168>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <MX_GPIO_Init+0x168>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a44      	ldr	r2, [pc, #272]	@ (8001510 <MX_GPIO_Init+0x168>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <MX_GPIO_Init+0x168>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <MX_GPIO_Init+0x168>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a3d      	ldr	r2, [pc, #244]	@ (8001510 <MX_GPIO_Init+0x168>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <MX_GPIO_Init+0x168>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <MX_GPIO_Init+0x168>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a36      	ldr	r2, [pc, #216]	@ (8001510 <MX_GPIO_Init+0x168>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <MX_GPIO_Init+0x168>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001450:	4830      	ldr	r0, [pc, #192]	@ (8001514 <MX_GPIO_Init+0x16c>)
 8001452:	f000 ffb1 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2110      	movs	r1, #16
 800145a:	482f      	ldr	r0, [pc, #188]	@ (8001518 <MX_GPIO_Init+0x170>)
 800145c:	f000 ffac 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001460:	2200      	movs	r2, #0
 8001462:	f64f 4101 	movw	r1, #64513	@ 0xfc01
 8001466:	482d      	ldr	r0, [pc, #180]	@ (800151c <MX_GPIO_Init+0x174>)
 8001468:	f000 ffa6 	bl	80023b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001472:	482b      	ldr	r0, [pc, #172]	@ (8001520 <MX_GPIO_Init+0x178>)
 8001474:	f000 ffa0 	bl	80023b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001478:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4820      	ldr	r0, [pc, #128]	@ (8001514 <MX_GPIO_Init+0x16c>)
 8001492:	f000 fddd 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001496:	2303      	movs	r3, #3
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	481b      	ldr	r0, [pc, #108]	@ (8001518 <MX_GPIO_Init+0x170>)
 80014aa:	f000 fdd1 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ae:	2310      	movs	r3, #16
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4814      	ldr	r0, [pc, #80]	@ (8001518 <MX_GPIO_Init+0x170>)
 80014c6:	f000 fdc3 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80014ca:	f64f 4301 	movw	r3, #64513	@ 0xfc01
 80014ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	480e      	ldr	r0, [pc, #56]	@ (800151c <MX_GPIO_Init+0x174>)
 80014e4:	f000 fdb4 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80014e8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4807      	ldr	r0, [pc, #28]	@ (8001520 <MX_GPIO_Init+0x178>)
 8001502:	f000 fda5 	bl	8002050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	@ 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40020800 	.word	0x40020800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020c00 	.word	0x40020c00

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <Error_Handler+0x8>

08001530 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af02      	add	r7, sp, #8
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800153a:	f107 020f 	add.w	r2, r7, #15
 800153e:	1df9      	adds	r1, r7, #7
 8001540:	2364      	movs	r3, #100	@ 0x64
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	4804      	ldr	r0, [pc, #16]	@ (8001558 <RC522_SPI_Transfer+0x28>)
 8001548:	f001 fc71 	bl	8002e2e <HAL_SPI_TransmitReceive>

	return rx_data;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000006c 	.word	0x2000006c

0800155c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	4613      	mov	r3, r2
 800156a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2110      	movs	r1, #16
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <Write_MFRC522+0x48>)
 8001572:	f000 ff21 	bl	80023b8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ffd4 	bl	8001530 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ffd0 	bl	8001530 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	2110      	movs	r1, #16
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <Write_MFRC522+0x48>)
 8001596:	f000 ff0f 	bl	80023b8 <HAL_GPIO_WritePin>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020000 	.word	0x40020000

080015a8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2110      	movs	r1, #16
 80015b6:	480f      	ldr	r0, [pc, #60]	@ (80015f4 <Read_MFRC522+0x4c>)
 80015b8:	f000 fefe 	bl	80023b8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffad 	bl	8001530 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff ffaa 	bl	8001530 <RC522_SPI_Transfer>
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2110      	movs	r1, #16
 80015e4:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <Read_MFRC522+0x4c>)
 80015e6:	f000 fee7 	bl	80023b8 <HAL_GPIO_WritePin>

	return val;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]

}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40020000 	.word	0x40020000

080015f8 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ffcc 	bl	80015a8 <Read_MFRC522>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	4313      	orrs	r3, r2
 800161a:	b2da      	uxtb	r2, r3
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff9b 	bl	800155c <Write_MFRC522>
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	460a      	mov	r2, r1
 8001638:	71fb      	strb	r3, [r7, #7]
 800163a:	4613      	mov	r3, r2
 800163c:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ffb1 	bl	80015a8 <Read_MFRC522>
 8001646:	4603      	mov	r3, r0
 8001648:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800164a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800164e:	43db      	mvns	r3, r3
 8001650:	b25a      	sxtb	r2, r3
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4013      	ands	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2da      	uxtb	r2, r3
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff7b 	bl	800155c <Write_MFRC522>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001672:	2014      	movs	r0, #20
 8001674:	f7ff ff98 	bl	80015a8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001678:	2103      	movs	r1, #3
 800167a:	2014      	movs	r0, #20
 800167c:	f7ff ffbc 	bl	80015f8 <SetBitMask>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001688:	210f      	movs	r1, #15
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff ff66 	bl	800155c <Write_MFRC522>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2110      	movs	r1, #16
 800169c:	4812      	ldr	r0, [pc, #72]	@ (80016e8 <MFRC522_Init+0x54>)
 800169e:	f000 fe8b 	bl	80023b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2101      	movs	r1, #1
 80016a6:	4811      	ldr	r0, [pc, #68]	@ (80016ec <MFRC522_Init+0x58>)
 80016a8:	f000 fe86 	bl	80023b8 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80016ac:	f7ff ffea 	bl	8001684 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80016b0:	218d      	movs	r1, #141	@ 0x8d
 80016b2:	202a      	movs	r0, #42	@ 0x2a
 80016b4:	f7ff ff52 	bl	800155c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80016b8:	213e      	movs	r1, #62	@ 0x3e
 80016ba:	202b      	movs	r0, #43	@ 0x2b
 80016bc:	f7ff ff4e 	bl	800155c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80016c0:	211e      	movs	r1, #30
 80016c2:	202d      	movs	r0, #45	@ 0x2d
 80016c4:	f7ff ff4a 	bl	800155c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80016c8:	2100      	movs	r1, #0
 80016ca:	202c      	movs	r0, #44	@ 0x2c
 80016cc:	f7ff ff46 	bl	800155c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80016d0:	2140      	movs	r1, #64	@ 0x40
 80016d2:	2015      	movs	r0, #21
 80016d4:	f7ff ff42 	bl	800155c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80016d8:	213d      	movs	r1, #61	@ 0x3d
 80016da:	2011      	movs	r0, #17
 80016dc:	f7ff ff3e 	bl	800155c <Write_MFRC522>

	AntennaOn();
 80016e0:	f7ff ffc5 	bl	800166e <AntennaOn>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400

080016f0 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	4613      	mov	r3, r2
 8001700:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001702:	2302      	movs	r3, #2
 8001704:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001706:	2300      	movs	r3, #0
 8001708:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 800170a:	2300      	movs	r3, #0
 800170c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d006      	beq.n	8001722 <MFRC522_ToCard+0x32>
 8001714:	2b0e      	cmp	r3, #14
 8001716:	d109      	bne.n	800172c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001718:	2312      	movs	r3, #18
 800171a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 800171c:	2310      	movs	r3, #16
 800171e:	777b      	strb	r3, [r7, #29]
			break;
 8001720:	e005      	b.n	800172e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001722:	2377      	movs	r3, #119	@ 0x77
 8001724:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001726:	2330      	movs	r3, #48	@ 0x30
 8001728:	777b      	strb	r3, [r7, #29]
			break;
 800172a:	e000      	b.n	800172e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800172c:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800172e:	7fbb      	ldrb	r3, [r7, #30]
 8001730:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4619      	mov	r1, r3
 8001738:	2002      	movs	r0, #2
 800173a:	f7ff ff0f 	bl	800155c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800173e:	2180      	movs	r1, #128	@ 0x80
 8001740:	2004      	movs	r0, #4
 8001742:	f7ff ff74 	bl	800162e <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8001746:	2180      	movs	r1, #128	@ 0x80
 8001748:	200a      	movs	r0, #10
 800174a:	f7ff ff55 	bl	80015f8 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800174e:	2100      	movs	r1, #0
 8001750:	2001      	movs	r0, #1
 8001752:	f7ff ff03 	bl	800155c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	e00a      	b.n	8001772 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	2009      	movs	r0, #9
 8001768:	f7ff fef8 	bl	800155c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	3301      	adds	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3f0      	bcc.n	800175c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	4619      	mov	r1, r3
 800177e:	2001      	movs	r0, #1
 8001780:	f7ff feec 	bl	800155c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d103      	bne.n	8001792 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 800178a:	2180      	movs	r1, #128	@ 0x80
 800178c:	200d      	movs	r0, #13
 800178e:	f7ff ff33 	bl	80015f8 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001792:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001796:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001798:	2004      	movs	r0, #4
 800179a:	f7ff ff05 	bl	80015a8 <Read_MFRC522>
 800179e:	4603      	mov	r3, r0
 80017a0:	773b      	strb	r3, [r7, #28]
        i--;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <MFRC522_ToCard+0xd4>
 80017ae:	7f3b      	ldrb	r3, [r7, #28]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <MFRC522_ToCard+0xd4>
 80017b8:	7f3a      	ldrb	r2, [r7, #28]
 80017ba:	7f7b      	ldrb	r3, [r7, #29]
 80017bc:	4013      	ands	r3, r2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0e9      	beq.n	8001798 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80017c4:	2180      	movs	r1, #128	@ 0x80
 80017c6:	200d      	movs	r0, #13
 80017c8:	f7ff ff31 	bl	800162e <ClearBitMask>

    if (i != 0)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d052      	beq.n	8001878 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80017d2:	2006      	movs	r0, #6
 80017d4:	f7ff fee8 	bl	80015a8 <Read_MFRC522>
 80017d8:	4603      	mov	r3, r0
 80017da:	f003 031b 	and.w	r3, r3, #27
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d148      	bne.n	8001874 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80017e6:	7f3a      	ldrb	r2, [r7, #28]
 80017e8:	7fbb      	ldrb	r3, [r7, #30]
 80017ea:	4013      	ands	r3, r2
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b0c      	cmp	r3, #12
 80017fe:	d13b      	bne.n	8001878 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001800:	200a      	movs	r0, #10
 8001802:	f7ff fed1 	bl	80015a8 <Read_MFRC522>
 8001806:	4603      	mov	r3, r0
 8001808:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800180a:	200c      	movs	r0, #12
 800180c:	f7ff fecc 	bl	80015a8 <Read_MFRC522>
 8001810:	4603      	mov	r3, r0
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 800181e:	7f3b      	ldrb	r3, [r7, #28]
 8001820:	3b01      	subs	r3, #1
 8001822:	00da      	lsls	r2, r3, #3
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	4413      	add	r3, r2
 8001828:	461a      	mov	r2, r3
 800182a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e004      	b.n	800183a <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001830:	7f3b      	ldrb	r3, [r7, #28]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	461a      	mov	r2, r3
 8001836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001838:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800183a:	7f3b      	ldrb	r3, [r7, #28]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001840:	2301      	movs	r3, #1
 8001842:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001844:	7f3b      	ldrb	r3, [r7, #28]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d901      	bls.n	800184e <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 800184a:	2310      	movs	r3, #16
 800184c:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	e00a      	b.n	800186a <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	18d4      	adds	r4, r2, r3
 800185a:	2009      	movs	r0, #9
 800185c:	f7ff fea4 	bl	80015a8 <Read_MFRC522>
 8001860:	4603      	mov	r3, r0
 8001862:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	3301      	adds	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	7f3b      	ldrb	r3, [r7, #28]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	429a      	cmp	r2, r3
 8001870:	d3f0      	bcc.n	8001854 <MFRC522_ToCard+0x164>
 8001872:	e001      	b.n	8001878 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8001874:	2302      	movs	r3, #2
 8001876:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8001878:	7ffb      	ldrb	r3, [r7, #31]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	@ 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}

08001882 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af02      	add	r7, sp, #8
 8001888:	4603      	mov	r3, r0
 800188a:	6039      	str	r1, [r7, #0]
 800188c:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 800188e:	2107      	movs	r1, #7
 8001890:	200d      	movs	r0, #13
 8001892:	f7ff fe63 	bl	800155c <Write_MFRC522>

	TagType[0] = reqMode;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	79fa      	ldrb	r2, [r7, #7]
 800189a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2201      	movs	r2, #1
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	200c      	movs	r0, #12
 80018aa:	f7ff ff21 	bl	80016f0 <MFRC522_ToCard>
 80018ae:	4603      	mov	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <MFRC522_Request+0x3c>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d001      	beq.n	80018c2 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80018be:	2302      	movs	r3, #2
 80018c0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80018d8:	2100      	movs	r1, #0
 80018da:	200d      	movs	r0, #13
 80018dc:	f7ff fe3e 	bl	800155c <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2293      	movs	r2, #147	@ 0x93
 80018e4:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	2220      	movs	r2, #32
 80018ec:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	200c      	movs	r0, #12
 80018fc:	f7ff fef8 	bl	80016f0 <MFRC522_ToCard>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d118      	bne.n	800193c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	73bb      	strb	r3, [r7, #14]
 800190e:	e009      	b.n	8001924 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	7b7b      	ldrb	r3, [r7, #13]
 800191a:	4053      	eors	r3, r2
 800191c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	3301      	adds	r3, #1
 8001922:	73bb      	strb	r3, [r7, #14]
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d9f2      	bls.n	8001910 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800192a:	7bbb      	ldrb	r3, [r7, #14]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	7b7a      	ldrb	r2, [r7, #13]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001938:	2302      	movs	r3, #2
 800193a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <HAL_MspInit+0x4c>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800195c:	6453      	str	r3, [r2, #68]	@ 0x44
 800195e:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <HAL_MspInit+0x4c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	@ 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <HAL_SPI_MspInit+0x84>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12b      	bne.n	8001a12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	4a17      	ldr	r2, [pc, #92]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a10      	ldr	r2, [pc, #64]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019f2:	23e0      	movs	r3, #224	@ 0xe0
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a02:	2305      	movs	r3, #5
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <HAL_SPI_MspInit+0x8c>)
 8001a0e:	f000 fb1f 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	@ 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40013000 	.word	0x40013000
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a38:	d10d      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_TIM_Base_MspInit+0x3c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <HAL_TIM_Base_MspInit+0x3c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_TIM_Base_MspInit+0x3c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a88:	d11e      	bne.n	8001ac8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <HAL_TIM_MspPostInit+0x68>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad0 <HAL_TIM_MspPostInit+0x68>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <HAL_TIM_MspPostInit+0x68>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001aaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <HAL_TIM_MspPostInit+0x6c>)
 8001ac4:	f000 fac4 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08e      	sub	sp, #56	@ 0x38
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a5b      	ldr	r2, [pc, #364]	@ (8001c64 <HAL_UART_MspInit+0x18c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d14b      	bne.n	8001b92 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
 8001afe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	4a59      	ldr	r2, [pc, #356]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001b04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0a:	4b57      	ldr	r3, [pc, #348]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	4b53      	ldr	r3, [pc, #332]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a52      	ldr	r2, [pc, #328]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b50      	ldr	r3, [pc, #320]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	4b4c      	ldr	r3, [pc, #304]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b49      	ldr	r3, [pc, #292]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b60:	2308      	movs	r3, #8
 8001b62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4840      	ldr	r0, [pc, #256]	@ (8001c6c <HAL_UART_MspInit+0x194>)
 8001b6c:	f000 fa70 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b70:	2304      	movs	r3, #4
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b80:	2308      	movs	r3, #8
 8001b82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4839      	ldr	r0, [pc, #228]	@ (8001c70 <HAL_UART_MspInit+0x198>)
 8001b8c:	f000 fa60 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b90:	e063      	b.n	8001c5a <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a37      	ldr	r2, [pc, #220]	@ (8001c74 <HAL_UART_MspInit+0x19c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d12d      	bne.n	8001bf8 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	4a30      	ldr	r2, [pc, #192]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bac:	4b2e      	ldr	r3, [pc, #184]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	4a29      	ldr	r2, [pc, #164]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bd4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001be6:	2307      	movs	r3, #7
 8001be8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4821      	ldr	r0, [pc, #132]	@ (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001bf2:	f000 fa2d 	bl	8002050 <HAL_GPIO_Init>
}
 8001bf6:	e030      	b.n	8001c5a <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c7c <HAL_UART_MspInit+0x1a4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d12b      	bne.n	8001c5a <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a10      	ldr	r2, [pc, #64]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <HAL_UART_MspInit+0x190>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c52:	4619      	mov	r1, r3
 8001c54:	4808      	ldr	r0, [pc, #32]	@ (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c56:	f000 f9fb 	bl	8002050 <HAL_GPIO_Init>
}
 8001c5a:	bf00      	nop
 8001c5c:	3738      	adds	r7, #56	@ 0x38
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40005000 	.word	0x40005000
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40011000 	.word	0x40011000
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40004400 	.word	0x40004400

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x4>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd6:	f000 f891 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d08:	f7ff ffea 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d0c:	480c      	ldr	r0, [pc, #48]	@ (8001d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d0e:	490d      	ldr	r1, [pc, #52]	@ (8001d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d24:	4c0a      	ldr	r4, [pc, #40]	@ (8001d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d32:	f002 fe3d 	bl	80049b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7ff f869 	bl	8000e0c <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001d48:	08004b64 	.word	0x08004b64
  ldr r2, =_sbss
 8001d4c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001d50:	20000204 	.word	0x20000204

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	@ (8001d98 <HAL_Init+0x40>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_Init+0x40>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_Init+0x40>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 f931 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	200f      	movs	r0, #15
 8001d88:	f000 f808 	bl	8001d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fddc 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_InitTick+0x54>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_InitTick+0x58>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f93b 	bl	8002036 <HAL_SYSTICK_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00e      	b.n	8001de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d80a      	bhi.n	8001de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f000 f911 	bl	8001ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ddc:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <HAL_InitTick+0x5c>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000044 	.word	0x20000044
 8001df4:	2000004c 	.word	0x2000004c
 8001df8:	20000048 	.word	0x20000048

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	2000004c 	.word	0x2000004c
 8001e20:	20000200 	.word	0x20000200

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000200 	.word	0x20000200

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000004c 	.word	0x2000004c

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	@ (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	@ 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f7ff ff8e 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff47 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002010:	f7ff ff5c 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ff8e 	bl	8001f3c <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff5d 	bl	8001ee8 <__NVIC_SetPriority>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffb0 	bl	8001fa4 <SysTick_Config>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	@ 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e16b      	b.n	8002344 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 815a 	bne.w	800233e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d005      	beq.n	80020a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d130      	bne.n	8002104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0201 	and.w	r2, r3, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b03      	cmp	r3, #3
 800210e:	d017      	beq.n	8002140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d123      	bne.n	8002194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	220f      	movs	r2, #15
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	69b9      	ldr	r1, [r7, #24]
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80b4 	beq.w	800233e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b60      	ldr	r3, [pc, #384]	@ (800235c <HAL_GPIO_Init+0x30c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	4a5f      	ldr	r2, [pc, #380]	@ (800235c <HAL_GPIO_Init+0x30c>)
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e6:	4b5d      	ldr	r3, [pc, #372]	@ (800235c <HAL_GPIO_Init+0x30c>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002360 <HAL_GPIO_Init+0x310>)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	3302      	adds	r3, #2
 80021fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	220f      	movs	r2, #15
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a52      	ldr	r2, [pc, #328]	@ (8002364 <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d02b      	beq.n	8002276 <HAL_GPIO_Init+0x226>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a51      	ldr	r2, [pc, #324]	@ (8002368 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d025      	beq.n	8002272 <HAL_GPIO_Init+0x222>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a50      	ldr	r2, [pc, #320]	@ (800236c <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01f      	beq.n	800226e <HAL_GPIO_Init+0x21e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4f      	ldr	r2, [pc, #316]	@ (8002370 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d019      	beq.n	800226a <HAL_GPIO_Init+0x21a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4e      	ldr	r2, [pc, #312]	@ (8002374 <HAL_GPIO_Init+0x324>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x216>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4d      	ldr	r2, [pc, #308]	@ (8002378 <HAL_GPIO_Init+0x328>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00d      	beq.n	8002262 <HAL_GPIO_Init+0x212>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4c      	ldr	r2, [pc, #304]	@ (800237c <HAL_GPIO_Init+0x32c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <HAL_GPIO_Init+0x20e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4b      	ldr	r2, [pc, #300]	@ (8002380 <HAL_GPIO_Init+0x330>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_GPIO_Init+0x20a>
 8002256:	2307      	movs	r3, #7
 8002258:	e00e      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800225a:	2308      	movs	r3, #8
 800225c:	e00c      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800225e:	2306      	movs	r3, #6
 8002260:	e00a      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002262:	2305      	movs	r3, #5
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002266:	2304      	movs	r3, #4
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002288:	4935      	ldr	r1, [pc, #212]	@ (8002360 <HAL_GPIO_Init+0x310>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_GPIO_Init+0x334>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a32      	ldr	r2, [pc, #200]	@ (8002384 <HAL_GPIO_Init+0x334>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b30      	ldr	r3, [pc, #192]	@ (8002384 <HAL_GPIO_Init+0x334>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a27      	ldr	r2, [pc, #156]	@ (8002384 <HAL_GPIO_Init+0x334>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ea:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <HAL_GPIO_Init+0x334>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230e:	4a1d      	ldr	r2, [pc, #116]	@ (8002384 <HAL_GPIO_Init+0x334>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002314:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_GPIO_Init+0x334>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002338:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <HAL_GPIO_Init+0x334>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f ae90 	bls.w	800206c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40013800 	.word	0x40013800
 8002364:	40020000 	.word	0x40020000
 8002368:	40020400 	.word	0x40020400
 800236c:	40020800 	.word	0x40020800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40021400 	.word	0x40021400
 800237c:	40021800 	.word	0x40021800
 8002380:	40021c00 	.word	0x40021c00
 8002384:	40013c00 	.word	0x40013c00

08002388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e001      	b.n	80023aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d4:	e003      	b.n	80023de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e267      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d075      	beq.n	80024f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800240a:	4b88      	ldr	r3, [pc, #544]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b04      	cmp	r3, #4
 8002414:	d00c      	beq.n	8002430 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4b85      	ldr	r3, [pc, #532]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800241e:	2b08      	cmp	r3, #8
 8002420:	d112      	bne.n	8002448 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b82      	ldr	r3, [pc, #520]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800242e:	d10b      	bne.n	8002448 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	4b7e      	ldr	r3, [pc, #504]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d05b      	beq.n	80024f4 <HAL_RCC_OscConfig+0x108>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d157      	bne.n	80024f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e242      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x74>
 8002452:	4b76      	ldr	r3, [pc, #472]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a75      	ldr	r2, [pc, #468]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e01d      	b.n	800249c <HAL_RCC_OscConfig+0xb0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x98>
 800246a:	4b70      	ldr	r3, [pc, #448]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6f      	ldr	r2, [pc, #444]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b6d      	ldr	r3, [pc, #436]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6c      	ldr	r2, [pc, #432]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0xb0>
 8002484:	4b69      	ldr	r3, [pc, #420]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a68      	ldr	r2, [pc, #416]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b66      	ldr	r3, [pc, #408]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a65      	ldr	r2, [pc, #404]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fcbe 	bl	8001e24 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fcba 	bl	8001e24 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e207      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b5b      	ldr	r3, [pc, #364]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xc0>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fcaa 	bl	8001e24 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff fca6 	bl	8001e24 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1f3      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b51      	ldr	r3, [pc, #324]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0xe8>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002502:	4b4a      	ldr	r3, [pc, #296]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b47      	ldr	r3, [pc, #284]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002516:	2b08      	cmp	r3, #8
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b44      	ldr	r3, [pc, #272]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x152>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1c7      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b3b      	ldr	r3, [pc, #236]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4937      	ldr	r1, [pc, #220]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <HAL_RCC_OscConfig+0x244>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7ff fc5f 	bl	8001e24 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256a:	f7ff fc5b 	bl	8001e24 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1a8      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b2b      	ldr	r3, [pc, #172]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b28      	ldr	r3, [pc, #160]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4925      	ldr	r1, [pc, #148]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <HAL_RCC_OscConfig+0x244>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff fc3e 	bl	8001e24 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff fc3a 	bl	8001e24 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e187      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d036      	beq.n	8002644 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <HAL_RCC_OscConfig+0x248>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff fc1e 	bl	8001e24 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff fc1a 	bl	8001e24 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e167      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <HAL_RCC_OscConfig+0x240>)
 8002600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x200>
 800260a:	e01b      	b.n	8002644 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260c:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_RCC_OscConfig+0x248>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff fc07 	bl	8001e24 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	e00e      	b.n	8002638 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261a:	f7ff fc03 	bl	8001e24 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d907      	bls.n	8002638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e150      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
 800262c:	40023800 	.word	0x40023800
 8002630:	42470000 	.word	0x42470000
 8002634:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b88      	ldr	r3, [pc, #544]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 800263a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ea      	bne.n	800261a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8097 	beq.w	8002780 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b81      	ldr	r3, [pc, #516]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10f      	bne.n	8002682 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	4b7d      	ldr	r3, [pc, #500]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	4a7c      	ldr	r2, [pc, #496]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	@ 0x40
 8002672:	4b7a      	ldr	r3, [pc, #488]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b77      	ldr	r3, [pc, #476]	@ (8002860 <HAL_RCC_OscConfig+0x474>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d118      	bne.n	80026c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b74      	ldr	r3, [pc, #464]	@ (8002860 <HAL_RCC_OscConfig+0x474>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a73      	ldr	r2, [pc, #460]	@ (8002860 <HAL_RCC_OscConfig+0x474>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7ff fbc3 	bl	8001e24 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a2:	f7ff fbbf 	bl	8001e24 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e10c      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002860 <HAL_RCC_OscConfig+0x474>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x2ea>
 80026c8:	4b64      	ldr	r3, [pc, #400]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4a63      	ldr	r2, [pc, #396]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d4:	e01c      	b.n	8002710 <HAL_RCC_OscConfig+0x324>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x30c>
 80026de:	4b5f      	ldr	r3, [pc, #380]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	4a5e      	ldr	r2, [pc, #376]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ea:	4b5c      	ldr	r3, [pc, #368]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ee:	4a5b      	ldr	r2, [pc, #364]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0x324>
 80026f8:	4b58      	ldr	r3, [pc, #352]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	4a57      	ldr	r2, [pc, #348]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	@ 0x70
 8002704:	4b55      	ldr	r3, [pc, #340]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002708:	4a54      	ldr	r2, [pc, #336]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 800270a:	f023 0304 	bic.w	r3, r3, #4
 800270e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d015      	beq.n	8002744 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7ff fb84 	bl	8001e24 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7ff fb80 	bl	8001e24 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0cb      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002736:	4b49      	ldr	r3, [pc, #292]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0ee      	beq.n	8002720 <HAL_RCC_OscConfig+0x334>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002744:	f7ff fb6e 	bl	8001e24 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7ff fb6a 	bl	8001e24 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0b5      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002762:	4b3e      	ldr	r3, [pc, #248]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ee      	bne.n	800274c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002774:	4b39      	ldr	r3, [pc, #228]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	4a38      	ldr	r2, [pc, #224]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 800277a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800277e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a1 	beq.w	80028cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800278a:	4b34      	ldr	r3, [pc, #208]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b08      	cmp	r3, #8
 8002794:	d05c      	beq.n	8002850 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d141      	bne.n	8002822 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b31      	ldr	r3, [pc, #196]	@ (8002864 <HAL_RCC_OscConfig+0x478>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff fb3e 	bl	8001e24 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7ff fb3a 	bl	8001e24 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e087      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	4b27      	ldr	r3, [pc, #156]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	3b01      	subs	r3, #1
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	491b      	ldr	r1, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <HAL_RCC_OscConfig+0x478>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7ff fb13 	bl	8001e24 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002802:	f7ff fb0f 	bl	8001e24 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e05c      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002814:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x416>
 8002820:	e054      	b.n	80028cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <HAL_RCC_OscConfig+0x478>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff fafc 	bl	8001e24 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7ff faf8 	bl	8001e24 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e045      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCC_OscConfig+0x470>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x444>
 800284e:	e03d      	b.n	80028cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d107      	bne.n	8002868 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e038      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000
 8002864:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002868:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <HAL_RCC_OscConfig+0x4ec>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d028      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d121      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d11a      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002898:	4013      	ands	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800289e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d111      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	3b01      	subs	r3, #1
 80028b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0cc      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b68      	ldr	r3, [pc, #416]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d90c      	bls.n	8002918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b65      	ldr	r3, [pc, #404]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a58      	ldr	r2, [pc, #352]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800293a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a52      	ldr	r2, [pc, #328]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d044      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d119      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	2b03      	cmp	r3, #3
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e067      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4934      	ldr	r1, [pc, #208]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7ff fa2a 	bl	8001e24 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7ff fa26 	bl	8001e24 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e04f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b25      	ldr	r3, [pc, #148]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d20c      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b22      	ldr	r3, [pc, #136]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f98a 	bl	8001d9c <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	08004b3c 	.word	0x08004b3c
 8002aa0:	20000044 	.word	0x20000044
 8002aa4:	20000048 	.word	0x20000048

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aac:	b094      	sub	sp, #80	@ 0x50
 8002aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac0:	4b79      	ldr	r3, [pc, #484]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d00d      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	f200 80e1 	bhi.w	8002c94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x34>
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ada:	e0db      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b73      	ldr	r3, [pc, #460]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x204>)
 8002ade:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ae0:	e0db      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae2:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ae6:	e0d8      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002af2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d063      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	2200      	movs	r2, #0
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	462b      	mov	r3, r5
 8002b1e:	f04f 0000 	mov.w	r0, #0
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	0159      	lsls	r1, r3, #5
 8002b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2c:	0150      	lsls	r0, r2, #5
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4621      	mov	r1, r4
 8002b34:	1a51      	subs	r1, r2, r1
 8002b36:	6139      	str	r1, [r7, #16]
 8002b38:	4629      	mov	r1, r5
 8002b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b4c:	4659      	mov	r1, fp
 8002b4e:	018b      	lsls	r3, r1, #6
 8002b50:	4651      	mov	r1, sl
 8002b52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b56:	4651      	mov	r1, sl
 8002b58:	018a      	lsls	r2, r1, #6
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b60:	4659      	mov	r1, fp
 8002b62:	eb63 0901 	sbc.w	r9, r3, r1
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b7a:	4690      	mov	r8, r2
 8002b7c:	4699      	mov	r9, r3
 8002b7e:	4623      	mov	r3, r4
 8002b80:	eb18 0303 	adds.w	r3, r8, r3
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	462b      	mov	r3, r5
 8002b88:	eb49 0303 	adc.w	r3, r9, r3
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	024b      	lsls	r3, r1, #9
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	024a      	lsls	r2, r1, #9
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bb8:	f7fd fb06 	bl	80001c8 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bc4:	e058      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	099b      	lsrs	r3, r3, #6
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002be0:	4642      	mov	r2, r8
 8002be2:	464b      	mov	r3, r9
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	0159      	lsls	r1, r3, #5
 8002bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf2:	0150      	lsls	r0, r2, #5
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bfe:	4649      	mov	r1, r9
 8002c00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c18:	ebb2 040a 	subs.w	r4, r2, sl
 8002c1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	00eb      	lsls	r3, r5, #3
 8002c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2e:	00e2      	lsls	r2, r4, #3
 8002c30:	4614      	mov	r4, r2
 8002c32:	461d      	mov	r5, r3
 8002c34:	4643      	mov	r3, r8
 8002c36:	18e3      	adds	r3, r4, r3
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	eb45 0303 	adc.w	r3, r5, r3
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	028b      	lsls	r3, r1, #10
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c58:	4621      	mov	r1, r4
 8002c5a:	028a      	lsls	r2, r1, #10
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c62:	2200      	movs	r2, #0
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	61fa      	str	r2, [r7, #28]
 8002c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6c:	f7fd faac 	bl	80001c8 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x204>)
 8002c96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3750      	adds	r7, #80	@ 0x50
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000044 	.word	0x20000044

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	@ (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08004b4c 	.word	0x08004b4c

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff ffdc 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0b5b      	lsrs	r3, r3, #13
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	@ (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08004b4c 	.word	0x08004b4c

08002d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e07b      	b.n	8002e26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d108      	bne.n	8002d48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d3e:	d009      	beq.n	8002d54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
 8002d46:	e005      	b.n	8002d54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe fe12 	bl	8001998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd8:	ea42 0103 	orr.w	r1, r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0104 	and.w	r1, r3, #4
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	f003 0210 	and.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08a      	sub	sp, #40	@ 0x28
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e40:	f7fe fff0 	bl	8001e24 <HAL_GetTick>
 8002e44:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e4c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e54:	887b      	ldrh	r3, [r7, #2]
 8002e56:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e58:	7ffb      	ldrb	r3, [r7, #31]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d00c      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x4a>
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e64:	d106      	bne.n	8002e74 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <HAL_SPI_TransmitReceive+0x46>
 8002e6e:	7ffb      	ldrb	r3, [r7, #31]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d001      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
 8002e76:	e17f      	b.n	8003178 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x5c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x5c>
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e174      	b.n	8003178 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x6e>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e16d      	b.n	8003178 <HAL_SPI_TransmitReceive+0x34a>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d003      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2205      	movs	r2, #5
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	887a      	ldrh	r2, [r7, #2]
 8002ece:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	887a      	ldrh	r2, [r7, #2]
 8002eda:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef8:	2b40      	cmp	r3, #64	@ 0x40
 8002efa:	d007      	beq.n	8002f0c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f14:	d17e      	bne.n	8003014 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0xf6>
 8002f1e:	8afb      	ldrh	r3, [r7, #22]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d16c      	bne.n	8002ffe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f48:	e059      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d11b      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x162>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_SPI_TransmitReceive+0x162>
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d113      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	1c9a      	adds	r2, r3, #2
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d119      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x1a4>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d014      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fd2:	f7fe ff27 	bl	8001e24 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d80d      	bhi.n	8002ffe <HAL_SPI_TransmitReceive+0x1d0>
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d009      	beq.n	8002ffe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0bc      	b.n	8003178 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1a0      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x11c>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d19b      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x11c>
 8003012:	e082      	b.n	800311a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x1f4>
 800301c:	8afb      	ldrh	r3, [r7, #22]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d171      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003048:	e05d      	b.n	8003106 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b02      	cmp	r3, #2
 8003056:	d11c      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x264>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d017      	beq.n	8003092 <HAL_SPI_TransmitReceive+0x264>
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	2b01      	cmp	r3, #1
 8003066:	d114      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d119      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x2a6>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d014      	beq.n	80030d4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030d0:	2301      	movs	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030d4:	f7fe fea6 	bl	8001e24 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d803      	bhi.n	80030ec <HAL_SPI_TransmitReceive+0x2be>
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ea:	d102      	bne.n	80030f2 <HAL_SPI_TransmitReceive+0x2c4>
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e038      	b.n	8003178 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d19c      	bne.n	800304a <HAL_SPI_TransmitReceive+0x21c>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d197      	bne.n	800304a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800311a:	6a3a      	ldr	r2, [r7, #32]
 800311c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f8b6 	bl	8003290 <SPI_EndRxTxTransaction>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e01d      	b.n	8003178 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003176:	2300      	movs	r3, #0
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	@ 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003190:	f7fe fe48 	bl	8001e24 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	4413      	add	r3, r2
 800319e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031a0:	f7fe fe40 	bl	8001e24 <HAL_GetTick>
 80031a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031a6:	4b39      	ldr	r3, [pc, #228]	@ (800328c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	015b      	lsls	r3, r3, #5
 80031ac:	0d1b      	lsrs	r3, r3, #20
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031b6:	e054      	b.n	8003262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d050      	beq.n	8003262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031c0:	f7fe fe30 	bl	8001e24 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d902      	bls.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d13d      	bne.n	8003252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ee:	d111      	bne.n	8003214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f8:	d004      	beq.n	8003204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003202:	d107      	bne.n	8003214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321c:	d10f      	bne.n	800323e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800323c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e017      	b.n	8003282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3b01      	subs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4013      	ands	r3, r2
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	429a      	cmp	r2, r3
 800327e:	d19b      	bne.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000044 	.word	0x20000044

08003290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2201      	movs	r2, #1
 80032a4:	2102      	movs	r1, #2
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff ff6a 	bl	8003180 <SPI_WaitFlagStateUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e032      	b.n	8003328 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <SPI_EndRxTxTransaction+0xa0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003334 <SPI_EndRxTxTransaction+0xa4>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	0d5b      	lsrs	r3, r3, #21
 80032ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032e0:	d112      	bne.n	8003308 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2180      	movs	r1, #128	@ 0x80
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ff47 	bl	8003180 <SPI_WaitFlagStateUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d016      	beq.n	8003326 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e00f      	b.n	8003328 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	3b01      	subs	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331e:	2b80      	cmp	r3, #128	@ 0x80
 8003320:	d0f2      	beq.n	8003308 <SPI_EndRxTxTransaction+0x78>
 8003322:	e000      	b.n	8003326 <SPI_EndRxTxTransaction+0x96>
        break;
 8003324:	bf00      	nop
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000044 	.word	0x20000044
 8003334:	165e9f81 	.word	0x165e9f81

08003338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e041      	b.n	80033ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe fb62 	bl	8001a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 fad8 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e041      	b.n	800346c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f839 	bl	8003474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f000 fa89 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start+0x24>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e022      	b.n	80034f2 <HAL_TIM_PWM_Start+0x6a>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d109      	bne.n	80034c6 <HAL_TIM_PWM_Start+0x3e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e015      	b.n	80034f2 <HAL_TIM_PWM_Start+0x6a>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d109      	bne.n	80034e0 <HAL_TIM_PWM_Start+0x58>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bf14      	ite	ne
 80034d8:	2301      	movne	r3, #1
 80034da:	2300      	moveq	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e008      	b.n	80034f2 <HAL_TIM_PWM_Start+0x6a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e07c      	b.n	80035f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0x82>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003508:	e013      	b.n	8003532 <HAL_TIM_PWM_Start+0xaa>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0x92>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003518:	e00b      	b.n	8003532 <HAL_TIM_PWM_Start+0xaa>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0xa2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003528:	e003      	b.n	8003532 <HAL_TIM_PWM_Start+0xaa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	6839      	ldr	r1, [r7, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fcec 	bl	8003f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2d      	ldr	r2, [pc, #180]	@ (80035fc <HAL_TIM_PWM_Start+0x174>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_TIM_PWM_Start+0xcc>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2c      	ldr	r2, [pc, #176]	@ (8003600 <HAL_TIM_PWM_Start+0x178>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_TIM_PWM_Start+0xd0>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <HAL_TIM_PWM_Start+0xd2>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a22      	ldr	r2, [pc, #136]	@ (80035fc <HAL_TIM_PWM_Start+0x174>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003580:	d01d      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1f      	ldr	r2, [pc, #124]	@ (8003604 <HAL_TIM_PWM_Start+0x17c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <HAL_TIM_PWM_Start+0x180>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1c      	ldr	r2, [pc, #112]	@ (800360c <HAL_TIM_PWM_Start+0x184>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a16      	ldr	r2, [pc, #88]	@ (8003600 <HAL_TIM_PWM_Start+0x178>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_TIM_PWM_Start+0x188>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a16      	ldr	r2, [pc, #88]	@ (8003614 <HAL_TIM_PWM_Start+0x18c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d111      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d010      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	e007      	b.n	80035f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40010000 	.word	0x40010000
 8003600:	40010400 	.word	0x40010400
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40014000 	.word	0x40014000
 8003614:	40001800 	.word	0x40001800

08003618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003632:	2302      	movs	r3, #2
 8003634:	e0ae      	b.n	8003794 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	f200 809f 	bhi.w	8003784 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003646:	a201      	add	r2, pc, #4	@ (adr r2, 800364c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	08003681 	.word	0x08003681
 8003650:	08003785 	.word	0x08003785
 8003654:	08003785 	.word	0x08003785
 8003658:	08003785 	.word	0x08003785
 800365c:	080036c1 	.word	0x080036c1
 8003660:	08003785 	.word	0x08003785
 8003664:	08003785 	.word	0x08003785
 8003668:	08003785 	.word	0x08003785
 800366c:	08003703 	.word	0x08003703
 8003670:	08003785 	.word	0x08003785
 8003674:	08003785 	.word	0x08003785
 8003678:	08003785 	.word	0x08003785
 800367c:	08003743 	.word	0x08003743
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f9fc 	bl	8003a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0204 	bic.w	r2, r2, #4
 80036aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6999      	ldr	r1, [r3, #24]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	619a      	str	r2, [r3, #24]
      break;
 80036be:	e064      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa4c 	bl	8003b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6999      	ldr	r1, [r3, #24]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]
      break;
 8003700:	e043      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 faa1 	bl	8003c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0208 	orr.w	r2, r2, #8
 800371c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0204 	bic.w	r2, r2, #4
 800372c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	61da      	str	r2, [r3, #28]
      break;
 8003740:	e023      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 faf5 	bl	8003d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800375c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	021a      	lsls	r2, r3, #8
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	61da      	str	r2, [r3, #28]
      break;
 8003782:	e002      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
      break;
 8003788:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIM_ConfigClockSource+0x1c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e0b4      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x186>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f0:	d03e      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xd4>
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f6:	f200 8087 	bhi.w	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fe:	f000 8086 	beq.w	800390e <HAL_TIM_ConfigClockSource+0x172>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003806:	d87f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003808:	2b70      	cmp	r3, #112	@ 0x70
 800380a:	d01a      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xa6>
 800380c:	2b70      	cmp	r3, #112	@ 0x70
 800380e:	d87b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b60      	cmp	r3, #96	@ 0x60
 8003812:	d050      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003814:	2b60      	cmp	r3, #96	@ 0x60
 8003816:	d877      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b50      	cmp	r3, #80	@ 0x50
 800381a:	d03c      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xfa>
 800381c:	2b50      	cmp	r3, #80	@ 0x50
 800381e:	d873      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d058      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d86f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b30      	cmp	r3, #48	@ 0x30
 800382a:	d064      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	2b30      	cmp	r3, #48	@ 0x30
 800382e:	d86b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b20      	cmp	r3, #32
 8003832:	d060      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	2b20      	cmp	r3, #32
 8003836:	d867      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b10      	cmp	r3, #16
 800383e:	d05a      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003840:	e062      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003852:	f000 fb41 	bl	8003ed8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	609a      	str	r2, [r3, #8]
      break;
 800386e:	e04f      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003880:	f000 fb2a 	bl	8003ed8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003892:	609a      	str	r2, [r3, #8]
      break;
 8003894:	e03c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	461a      	mov	r2, r3
 80038a4:	f000 fa9e 	bl	8003de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2150      	movs	r1, #80	@ 0x50
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 faf7 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 80038b4:	e02c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 fabd 	bl	8003e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2160      	movs	r1, #96	@ 0x60
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fae7 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 80038d4:	e01c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 fa7e 	bl	8003de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	@ 0x40
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fad7 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 80038f4:	e00c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f000 face 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003906:	e003      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	e000      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800390e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a46      	ldr	r2, [pc, #280]	@ (8003a58 <TIM_Base_SetConfig+0x12c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394a:	d00f      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a43      	ldr	r2, [pc, #268]	@ (8003a5c <TIM_Base_SetConfig+0x130>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00b      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a42      	ldr	r2, [pc, #264]	@ (8003a60 <TIM_Base_SetConfig+0x134>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a41      	ldr	r2, [pc, #260]	@ (8003a64 <TIM_Base_SetConfig+0x138>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a40      	ldr	r2, [pc, #256]	@ (8003a68 <TIM_Base_SetConfig+0x13c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a35      	ldr	r2, [pc, #212]	@ (8003a58 <TIM_Base_SetConfig+0x12c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02b      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398c:	d027      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a32      	ldr	r2, [pc, #200]	@ (8003a5c <TIM_Base_SetConfig+0x130>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d023      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a31      	ldr	r2, [pc, #196]	@ (8003a60 <TIM_Base_SetConfig+0x134>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01f      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a30      	ldr	r2, [pc, #192]	@ (8003a64 <TIM_Base_SetConfig+0x138>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01b      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a68 <TIM_Base_SetConfig+0x13c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d017      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a6c <TIM_Base_SetConfig+0x140>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a70 <TIM_Base_SetConfig+0x144>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00f      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a74 <TIM_Base_SetConfig+0x148>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00b      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a78 <TIM_Base_SetConfig+0x14c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a7c <TIM_Base_SetConfig+0x150>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a29      	ldr	r2, [pc, #164]	@ (8003a80 <TIM_Base_SetConfig+0x154>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d108      	bne.n	80039f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a10      	ldr	r2, [pc, #64]	@ (8003a58 <TIM_Base_SetConfig+0x12c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_Base_SetConfig+0xf8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a12      	ldr	r2, [pc, #72]	@ (8003a68 <TIM_Base_SetConfig+0x13c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40010400 	.word	0x40010400
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40014400 	.word	0x40014400
 8003a74:	40014800 	.word	0x40014800
 8003a78:	40001800 	.word	0x40001800
 8003a7c:	40001c00 	.word	0x40001c00
 8003a80:	40002000 	.word	0x40002000

08003a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 0201 	bic.w	r2, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 0302 	bic.w	r3, r3, #2
 8003acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a20      	ldr	r2, [pc, #128]	@ (8003b5c <TIM_OC1_SetConfig+0xd8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x64>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b60 <TIM_OC1_SetConfig+0xdc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10c      	bne.n	8003b02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0308 	bic.w	r3, r3, #8
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 0304 	bic.w	r3, r3, #4
 8003b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a15      	ldr	r2, [pc, #84]	@ (8003b5c <TIM_OC1_SetConfig+0xd8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_OC1_SetConfig+0x8e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a14      	ldr	r2, [pc, #80]	@ (8003b60 <TIM_OC1_SetConfig+0xdc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d111      	bne.n	8003b36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40010400 	.word	0x40010400

08003b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f023 0210 	bic.w	r2, r3, #16
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0320 	bic.w	r3, r3, #32
 8003bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a22      	ldr	r2, [pc, #136]	@ (8003c48 <TIM_OC2_SetConfig+0xe4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC2_SetConfig+0x68>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a21      	ldr	r2, [pc, #132]	@ (8003c4c <TIM_OC2_SetConfig+0xe8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10d      	bne.n	8003be8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a17      	ldr	r2, [pc, #92]	@ (8003c48 <TIM_OC2_SetConfig+0xe4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC2_SetConfig+0x94>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	@ (8003c4c <TIM_OC2_SetConfig+0xe8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d113      	bne.n	8003c20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40010400 	.word	0x40010400

08003c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a21      	ldr	r2, [pc, #132]	@ (8003d30 <TIM_OC3_SetConfig+0xe0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_OC3_SetConfig+0x66>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	@ (8003d34 <TIM_OC3_SetConfig+0xe4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10d      	bne.n	8003cd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a16      	ldr	r2, [pc, #88]	@ (8003d30 <TIM_OC3_SetConfig+0xe0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <TIM_OC3_SetConfig+0x92>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	@ (8003d34 <TIM_OC3_SetConfig+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d113      	bne.n	8003d0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	621a      	str	r2, [r3, #32]
}
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40010400 	.word	0x40010400

08003d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	031b      	lsls	r3, r3, #12
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a12      	ldr	r2, [pc, #72]	@ (8003ddc <TIM_OC4_SetConfig+0xa4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_OC4_SetConfig+0x68>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a11      	ldr	r2, [pc, #68]	@ (8003de0 <TIM_OC4_SetConfig+0xa8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d109      	bne.n	8003db4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	019b      	lsls	r3, r3, #6
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40010400 	.word	0x40010400

08003de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 030a 	bic.w	r3, r3, #10
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b087      	sub	sp, #28
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 0210 	bic.w	r2, r3, #16
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	031b      	lsls	r3, r3, #12
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f043 0307 	orr.w	r3, r3, #7
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	609a      	str	r2, [r3, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1a      	ldr	r2, [r3, #32]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e05a      	b.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a21      	ldr	r2, [pc, #132]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc8:	d01d      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1d      	ldr	r2, [pc, #116]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800404c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a17      	ldr	r2, [pc, #92]	@ (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a15      	ldr	r2, [pc, #84]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10c      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800400c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4313      	orrs	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40001800 	.word	0x40001800

0800405c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e042      	b.n	80040f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd fd28 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	@ 0x24
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800409e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fa09 	bl	80044b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	@ 0x28
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b20      	cmp	r3, #32
 800411a:	d175      	bne.n	8004208 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_UART_Transmit+0x2c>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e06e      	b.n	800420a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2221      	movs	r2, #33	@ 0x21
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413a:	f7fd fe73 	bl	8001e24 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004154:	d108      	bne.n	8004168 <HAL_UART_Transmit+0x6c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e003      	b.n	8004170 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004170:	e02e      	b.n	80041d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f8df 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e03a      	b.n	800420a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	3302      	adds	r3, #2
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e007      	b.n	80041c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	781a      	ldrb	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	3301      	adds	r3, #1
 80041c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1cb      	bne.n	8004172 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2140      	movs	r1, #64	@ 0x40
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f8ab 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e006      	b.n	800420a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b08a      	sub	sp, #40	@ 0x28
 8004216:	af02      	add	r7, sp, #8
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b20      	cmp	r3, #32
 8004230:	f040 8081 	bne.w	8004336 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Receive+0x2e>
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e079      	b.n	8004338 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2222      	movs	r2, #34	@ 0x22
 800424e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004258:	f7fd fde4 	bl	8001e24 <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004272:	d108      	bne.n	8004286 <HAL_UART_Receive+0x74>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d104      	bne.n	8004286 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	e003      	b.n	800428e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800428e:	e047      	b.n	8004320 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2200      	movs	r2, #0
 8004298:	2120      	movs	r1, #32
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f850 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e042      	b.n	8004338 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10c      	bne.n	80042d2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	3302      	adds	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	e01f      	b.n	8004312 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042da:	d007      	beq.n	80042ec <HAL_UART_Receive+0xda>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <HAL_UART_Receive+0xe8>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e008      	b.n	800430c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004306:	b2da      	uxtb	r2, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	3301      	adds	r3, #1
 8004310:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1b2      	bne.n	8004290 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
  }
}
 8004338:	4618      	mov	r0, r3
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004350:	e03b      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d037      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fd fd63 	bl	8001e24 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <UART_WaitOnFlagUntilTimeout+0x30>
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e03a      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d023      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b80      	cmp	r3, #128	@ 0x80
 8004386:	d020      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b40      	cmp	r3, #64	@ 0x40
 800438c:	d01d      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d116      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f81d 	bl	80043f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2208      	movs	r2, #8
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e00f      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4013      	ands	r3, r2
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d0b4      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b095      	sub	sp, #84	@ 0x54
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800441a:	643a      	str	r2, [r7, #64]	@ 0x40
 800441c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004420:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e5      	bne.n	80043fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	61fb      	str	r3, [r7, #28]
   return(result);
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3314      	adds	r3, #20
 800444c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800444e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004450:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e5      	bne.n	800442e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	2b01      	cmp	r3, #1
 8004468:	d119      	bne.n	800449e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	60bb      	str	r3, [r7, #8]
   return(result);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f023 0310 	bic.w	r3, r3, #16
 8004480:	647b      	str	r3, [r7, #68]	@ 0x44
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800448a:	61ba      	str	r2, [r7, #24]
 800448c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6979      	ldr	r1, [r7, #20]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	613b      	str	r3, [r7, #16]
   return(result);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e5      	bne.n	800446a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044ac:	bf00      	nop
 80044ae:	3754      	adds	r7, #84	@ 0x54
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b0c0      	sub	sp, #256	@ 0x100
 80044be:	af00      	add	r7, sp, #0
 80044c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	68d9      	ldr	r1, [r3, #12]
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	ea40 0301 	orr.w	r3, r0, r1
 80044e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004510:	f021 010c 	bic.w	r1, r1, #12
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800451e:	430b      	orrs	r3, r1
 8004520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004532:	6999      	ldr	r1, [r3, #24]
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	ea40 0301 	orr.w	r3, r0, r1
 800453e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b8f      	ldr	r3, [pc, #572]	@ (8004784 <UART_SetConfig+0x2cc>)
 8004548:	429a      	cmp	r2, r3
 800454a:	d005      	beq.n	8004558 <UART_SetConfig+0xa0>
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b8d      	ldr	r3, [pc, #564]	@ (8004788 <UART_SetConfig+0x2d0>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d104      	bne.n	8004562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004558:	f7fe fbcc 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 800455c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004560:	e003      	b.n	800456a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004562:	f7fe fbb3 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8004566:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004574:	f040 810c 	bne.w	8004790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800457c:	2200      	movs	r2, #0
 800457e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004582:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800458a:	4622      	mov	r2, r4
 800458c:	462b      	mov	r3, r5
 800458e:	1891      	adds	r1, r2, r2
 8004590:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004592:	415b      	adcs	r3, r3
 8004594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800459a:	4621      	mov	r1, r4
 800459c:	eb12 0801 	adds.w	r8, r2, r1
 80045a0:	4629      	mov	r1, r5
 80045a2:	eb43 0901 	adc.w	r9, r3, r1
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ba:	4690      	mov	r8, r2
 80045bc:	4699      	mov	r9, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	eb18 0303 	adds.w	r3, r8, r3
 80045c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045c8:	462b      	mov	r3, r5
 80045ca:	eb49 0303 	adc.w	r3, r9, r3
 80045ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045e6:	460b      	mov	r3, r1
 80045e8:	18db      	adds	r3, r3, r3
 80045ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ec:	4613      	mov	r3, r2
 80045ee:	eb42 0303 	adc.w	r3, r2, r3
 80045f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80045f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045fc:	f7fb fde4 	bl	80001c8 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4b61      	ldr	r3, [pc, #388]	@ (800478c <UART_SetConfig+0x2d4>)
 8004606:	fba3 2302 	umull	r2, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	011c      	lsls	r4, r3, #4
 800460e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004618:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800461c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	1891      	adds	r1, r2, r2
 8004626:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004628:	415b      	adcs	r3, r3
 800462a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800462c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004630:	4641      	mov	r1, r8
 8004632:	eb12 0a01 	adds.w	sl, r2, r1
 8004636:	4649      	mov	r1, r9
 8004638:	eb43 0b01 	adc.w	fp, r3, r1
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800464c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004650:	4692      	mov	sl, r2
 8004652:	469b      	mov	fp, r3
 8004654:	4643      	mov	r3, r8
 8004656:	eb1a 0303 	adds.w	r3, sl, r3
 800465a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800465e:	464b      	mov	r3, r9
 8004660:	eb4b 0303 	adc.w	r3, fp, r3
 8004664:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004674:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800467c:	460b      	mov	r3, r1
 800467e:	18db      	adds	r3, r3, r3
 8004680:	643b      	str	r3, [r7, #64]	@ 0x40
 8004682:	4613      	mov	r3, r2
 8004684:	eb42 0303 	adc.w	r3, r2, r3
 8004688:	647b      	str	r3, [r7, #68]	@ 0x44
 800468a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800468e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004692:	f7fb fd99 	bl	80001c8 <__aeabi_uldivmod>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4611      	mov	r1, r2
 800469c:	4b3b      	ldr	r3, [pc, #236]	@ (800478c <UART_SetConfig+0x2d4>)
 800469e:	fba3 2301 	umull	r2, r3, r3, r1
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2264      	movs	r2, #100	@ 0x64
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	1acb      	subs	r3, r1, r3
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046b2:	4b36      	ldr	r3, [pc, #216]	@ (800478c <UART_SetConfig+0x2d4>)
 80046b4:	fba3 2302 	umull	r2, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046c0:	441c      	add	r4, r3
 80046c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	1891      	adds	r1, r2, r2
 80046da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046dc:	415b      	adcs	r3, r3
 80046de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046e4:	4641      	mov	r1, r8
 80046e6:	1851      	adds	r1, r2, r1
 80046e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80046ea:	4649      	mov	r1, r9
 80046ec:	414b      	adcs	r3, r1
 80046ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046fc:	4659      	mov	r1, fp
 80046fe:	00cb      	lsls	r3, r1, #3
 8004700:	4651      	mov	r1, sl
 8004702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004706:	4651      	mov	r1, sl
 8004708:	00ca      	lsls	r2, r1, #3
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	4603      	mov	r3, r0
 8004710:	4642      	mov	r2, r8
 8004712:	189b      	adds	r3, r3, r2
 8004714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004718:	464b      	mov	r3, r9
 800471a:	460a      	mov	r2, r1
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004730:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004738:	460b      	mov	r3, r1
 800473a:	18db      	adds	r3, r3, r3
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800473e:	4613      	mov	r3, r2
 8004740:	eb42 0303 	adc.w	r3, r2, r3
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800474a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800474e:	f7fb fd3b 	bl	80001c8 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <UART_SetConfig+0x2d4>)
 8004758:	fba3 1302 	umull	r1, r3, r3, r2
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	2164      	movs	r1, #100	@ 0x64
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	3332      	adds	r3, #50	@ 0x32
 800476a:	4a08      	ldr	r2, [pc, #32]	@ (800478c <UART_SetConfig+0x2d4>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	f003 0207 	and.w	r2, r3, #7
 8004776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4422      	add	r2, r4
 800477e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004780:	e106      	b.n	8004990 <UART_SetConfig+0x4d8>
 8004782:	bf00      	nop
 8004784:	40011000 	.word	0x40011000
 8004788:	40011400 	.word	0x40011400
 800478c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004794:	2200      	movs	r2, #0
 8004796:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800479a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800479e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047a2:	4642      	mov	r2, r8
 80047a4:	464b      	mov	r3, r9
 80047a6:	1891      	adds	r1, r2, r2
 80047a8:	6239      	str	r1, [r7, #32]
 80047aa:	415b      	adcs	r3, r3
 80047ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047b2:	4641      	mov	r1, r8
 80047b4:	1854      	adds	r4, r2, r1
 80047b6:	4649      	mov	r1, r9
 80047b8:	eb43 0501 	adc.w	r5, r3, r1
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	00eb      	lsls	r3, r5, #3
 80047c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ca:	00e2      	lsls	r2, r4, #3
 80047cc:	4614      	mov	r4, r2
 80047ce:	461d      	mov	r5, r3
 80047d0:	4643      	mov	r3, r8
 80047d2:	18e3      	adds	r3, r4, r3
 80047d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047d8:	464b      	mov	r3, r9
 80047da:	eb45 0303 	adc.w	r3, r5, r3
 80047de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047fe:	4629      	mov	r1, r5
 8004800:	008b      	lsls	r3, r1, #2
 8004802:	4621      	mov	r1, r4
 8004804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004808:	4621      	mov	r1, r4
 800480a:	008a      	lsls	r2, r1, #2
 800480c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004810:	f7fb fcda 	bl	80001c8 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4b60      	ldr	r3, [pc, #384]	@ (800499c <UART_SetConfig+0x4e4>)
 800481a:	fba3 2302 	umull	r2, r3, r3, r2
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	011c      	lsls	r4, r3, #4
 8004822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004826:	2200      	movs	r2, #0
 8004828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800482c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004834:	4642      	mov	r2, r8
 8004836:	464b      	mov	r3, r9
 8004838:	1891      	adds	r1, r2, r2
 800483a:	61b9      	str	r1, [r7, #24]
 800483c:	415b      	adcs	r3, r3
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004844:	4641      	mov	r1, r8
 8004846:	1851      	adds	r1, r2, r1
 8004848:	6139      	str	r1, [r7, #16]
 800484a:	4649      	mov	r1, r9
 800484c:	414b      	adcs	r3, r1
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800485c:	4659      	mov	r1, fp
 800485e:	00cb      	lsls	r3, r1, #3
 8004860:	4651      	mov	r1, sl
 8004862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004866:	4651      	mov	r1, sl
 8004868:	00ca      	lsls	r2, r1, #3
 800486a:	4610      	mov	r0, r2
 800486c:	4619      	mov	r1, r3
 800486e:	4603      	mov	r3, r0
 8004870:	4642      	mov	r2, r8
 8004872:	189b      	adds	r3, r3, r2
 8004874:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004878:	464b      	mov	r3, r9
 800487a:	460a      	mov	r2, r1
 800487c:	eb42 0303 	adc.w	r3, r2, r3
 8004880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800488e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800489c:	4649      	mov	r1, r9
 800489e:	008b      	lsls	r3, r1, #2
 80048a0:	4641      	mov	r1, r8
 80048a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a6:	4641      	mov	r1, r8
 80048a8:	008a      	lsls	r2, r1, #2
 80048aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048ae:	f7fb fc8b 	bl	80001c8 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	4b38      	ldr	r3, [pc, #224]	@ (800499c <UART_SetConfig+0x4e4>)
 80048ba:	fba3 2301 	umull	r2, r3, r3, r1
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2264      	movs	r2, #100	@ 0x64
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	1acb      	subs	r3, r1, r3
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	3332      	adds	r3, #50	@ 0x32
 80048cc:	4a33      	ldr	r2, [pc, #204]	@ (800499c <UART_SetConfig+0x4e4>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048d8:	441c      	add	r4, r3
 80048da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048de:	2200      	movs	r2, #0
 80048e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80048e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80048e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048e8:	4642      	mov	r2, r8
 80048ea:	464b      	mov	r3, r9
 80048ec:	1891      	adds	r1, r2, r2
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	415b      	adcs	r3, r3
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048f8:	4641      	mov	r1, r8
 80048fa:	1851      	adds	r1, r2, r1
 80048fc:	6039      	str	r1, [r7, #0]
 80048fe:	4649      	mov	r1, r9
 8004900:	414b      	adcs	r3, r1
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004910:	4659      	mov	r1, fp
 8004912:	00cb      	lsls	r3, r1, #3
 8004914:	4651      	mov	r1, sl
 8004916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800491a:	4651      	mov	r1, sl
 800491c:	00ca      	lsls	r2, r1, #3
 800491e:	4610      	mov	r0, r2
 8004920:	4619      	mov	r1, r3
 8004922:	4603      	mov	r3, r0
 8004924:	4642      	mov	r2, r8
 8004926:	189b      	adds	r3, r3, r2
 8004928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800492a:	464b      	mov	r3, r9
 800492c:	460a      	mov	r2, r1
 800492e:	eb42 0303 	adc.w	r3, r2, r3
 8004932:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	663b      	str	r3, [r7, #96]	@ 0x60
 800493e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800494c:	4649      	mov	r1, r9
 800494e:	008b      	lsls	r3, r1, #2
 8004950:	4641      	mov	r1, r8
 8004952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004956:	4641      	mov	r1, r8
 8004958:	008a      	lsls	r2, r1, #2
 800495a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800495e:	f7fb fc33 	bl	80001c8 <__aeabi_uldivmod>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4b0d      	ldr	r3, [pc, #52]	@ (800499c <UART_SetConfig+0x4e4>)
 8004968:	fba3 1302 	umull	r1, r3, r3, r2
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	2164      	movs	r1, #100	@ 0x64
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	3332      	adds	r3, #50	@ 0x32
 800497a:	4a08      	ldr	r2, [pc, #32]	@ (800499c <UART_SetConfig+0x4e4>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4422      	add	r2, r4
 800498e:	609a      	str	r2, [r3, #8]
}
 8004990:	bf00      	nop
 8004992:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004996:	46bd      	mov	sp, r7
 8004998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800499c:	51eb851f 	.word	0x51eb851f

080049a0 <memset>:
 80049a0:	4402      	add	r2, r0
 80049a2:	4603      	mov	r3, r0
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d100      	bne.n	80049aa <memset+0xa>
 80049a8:	4770      	bx	lr
 80049aa:	f803 1b01 	strb.w	r1, [r3], #1
 80049ae:	e7f9      	b.n	80049a4 <memset+0x4>

080049b0 <__libc_init_array>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4d0d      	ldr	r5, [pc, #52]	@ (80049e8 <__libc_init_array+0x38>)
 80049b4:	4c0d      	ldr	r4, [pc, #52]	@ (80049ec <__libc_init_array+0x3c>)
 80049b6:	1b64      	subs	r4, r4, r5
 80049b8:	10a4      	asrs	r4, r4, #2
 80049ba:	2600      	movs	r6, #0
 80049bc:	42a6      	cmp	r6, r4
 80049be:	d109      	bne.n	80049d4 <__libc_init_array+0x24>
 80049c0:	4d0b      	ldr	r5, [pc, #44]	@ (80049f0 <__libc_init_array+0x40>)
 80049c2:	4c0c      	ldr	r4, [pc, #48]	@ (80049f4 <__libc_init_array+0x44>)
 80049c4:	f000 f818 	bl	80049f8 <_init>
 80049c8:	1b64      	subs	r4, r4, r5
 80049ca:	10a4      	asrs	r4, r4, #2
 80049cc:	2600      	movs	r6, #0
 80049ce:	42a6      	cmp	r6, r4
 80049d0:	d105      	bne.n	80049de <__libc_init_array+0x2e>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d8:	4798      	blx	r3
 80049da:	3601      	adds	r6, #1
 80049dc:	e7ee      	b.n	80049bc <__libc_init_array+0xc>
 80049de:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e2:	4798      	blx	r3
 80049e4:	3601      	adds	r6, #1
 80049e6:	e7f2      	b.n	80049ce <__libc_init_array+0x1e>
 80049e8:	08004b5c 	.word	0x08004b5c
 80049ec:	08004b5c 	.word	0x08004b5c
 80049f0:	08004b5c 	.word	0x08004b5c
 80049f4:	08004b60 	.word	0x08004b60

080049f8 <_init>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	bf00      	nop
 80049fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fe:	bc08      	pop	{r3}
 8004a00:	469e      	mov	lr, r3
 8004a02:	4770      	bx	lr

08004a04 <_fini>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	bf00      	nop
 8004a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	469e      	mov	lr, r3
 8004a0e:	4770      	bx	lr
