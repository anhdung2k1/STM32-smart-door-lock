
MainCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004a14  08004a14  00005a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b3c  08004b3c  00006050  2**0
                  CONTENTS
  4 .ARM          00000008  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b44  08004b44  00006050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b48  08004b48  00005b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08004b4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006050  2**0
                  CONTENTS
 10 .bss          000001fc  20000050  20000050  00006050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000024c  2000024c  00006050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e963  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fda  00000000  00000000  000149e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  000169c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be8  00000000  00000000  000178f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021803  00000000  00000000  000184d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109cd  00000000  00000000  00039cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd57c  00000000  00000000  0004a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117c24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004030  00000000  00000000  00117c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0011bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049fc 	.word	0x080049fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	080049fc 	.word	0x080049fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LCD_Delay>:
void LCD_Delay(void);
void LCD_Write4Bits(uint8_t nb);
void LCD_PulseEnable(void);

void LCD_Delay(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  uint16_t i;
  for (i = 0; i < 1000; i++) {}
 80004be:	2300      	movs	r3, #0
 80004c0:	80fb      	strh	r3, [r7, #6]
 80004c2:	e002      	b.n	80004ca <LCD_Delay+0x12>
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	3301      	adds	r3, #1
 80004c8:	80fb      	strh	r3, [r7, #6]
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004d0:	d3f8      	bcc.n	80004c4 <LCD_Delay+0xc>
}
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <LCD_PulseEnable>:

void LCD_PulseEnable(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  EN_RESET();
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004ea:	480c      	ldr	r0, [pc, #48]	@ (800051c <LCD_PulseEnable+0x3c>)
 80004ec:	f001 ff66 	bl	80023bc <HAL_GPIO_WritePin>
  LCD_Delay();
 80004f0:	f7ff ffe2 	bl	80004b8 <LCD_Delay>
  EN_SET();
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004fa:	4808      	ldr	r0, [pc, #32]	@ (800051c <LCD_PulseEnable+0x3c>)
 80004fc:	f001 ff5e 	bl	80023bc <HAL_GPIO_WritePin>
  LCD_Delay();
 8000500:	f7ff ffda 	bl	80004b8 <LCD_Delay>
  EN_RESET();
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800050a:	4804      	ldr	r0, [pc, #16]	@ (800051c <LCD_PulseEnable+0x3c>)
 800050c:	f001 ff56 	bl	80023bc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f001 fc95 	bl	8001e40 <HAL_Delay>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400

08000520 <LCD_Write4Bits>:

void LCD_Write4Bits(uint8_t nb)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
  if (((nb >> 0) & 0x01) == 1) { D4_SET(); } else { D4_RESET(); }
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	2b00      	cmp	r3, #0
 8000532:	d006      	beq.n	8000542 <LCD_Write4Bits+0x22>
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800053a:	4826      	ldr	r0, [pc, #152]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800053c:	f001 ff3e 	bl	80023bc <HAL_GPIO_WritePin>
 8000540:	e005      	b.n	800054e <LCD_Write4Bits+0x2e>
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000548:	4822      	ldr	r0, [pc, #136]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800054a:	f001 ff37 	bl	80023bc <HAL_GPIO_WritePin>
  if (((nb >> 1) & 0x01) == 1) { D5_SET(); } else { D5_RESET(); }
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	d006      	beq.n	800056a <LCD_Write4Bits+0x4a>
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000562:	481c      	ldr	r0, [pc, #112]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 8000564:	f001 ff2a 	bl	80023bc <HAL_GPIO_WritePin>
 8000568:	e005      	b.n	8000576 <LCD_Write4Bits+0x56>
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000570:	4818      	ldr	r0, [pc, #96]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 8000572:	f001 ff23 	bl	80023bc <HAL_GPIO_WritePin>
  if (((nb >> 2) & 0x01) == 1) { D6_SET(); } else { D6_RESET(); }
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d006      	beq.n	8000592 <LCD_Write4Bits+0x72>
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058a:	4812      	ldr	r0, [pc, #72]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800058c:	f001 ff16 	bl	80023bc <HAL_GPIO_WritePin>
 8000590:	e005      	b.n	800059e <LCD_Write4Bits+0x7e>
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000598:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800059a:	f001 ff0f 	bl	80023bc <HAL_GPIO_WritePin>
  if (((nb >> 3) & 0x01) == 1) { D7_SET(); } else { D7_RESET(); }
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d006      	beq.n	80005ba <LCD_Write4Bits+0x9a>
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 80005b4:	f001 ff02 	bl	80023bc <HAL_GPIO_WritePin>
 80005b8:	e005      	b.n	80005c6 <LCD_Write4Bits+0xa6>
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 80005c2:	f001 fefb 	bl	80023bc <HAL_GPIO_WritePin>
  LCD_PulseEnable();
 80005c6:	f7ff ff8b 	bl	80004e0 <LCD_PulseEnable>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020400 	.word	0x40020400

080005d8 <LCD_Command>:

void LCD_Command(uint8_t cmd)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  RS_RESET();
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e8:	4808      	ldr	r0, [pc, #32]	@ (800060c <LCD_Command+0x34>)
 80005ea:	f001 fee7 	bl	80023bc <HAL_GPIO_WritePin>

  LCD_Write4Bits(cmd >> 4);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	091b      	lsrs	r3, r3, #4
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff93 	bl	8000520 <LCD_Write4Bits>
  LCD_Write4Bits(cmd);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff8f 	bl	8000520 <LCD_Write4Bits>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40020400 	.word	0x40020400

08000610 <LCD_Data>:

void LCD_Data(uint8_t dt)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  RS_SET();
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000620:	4808      	ldr	r0, [pc, #32]	@ (8000644 <LCD_Data+0x34>)
 8000622:	f001 fecb 	bl	80023bc <HAL_GPIO_WritePin>
 
  LCD_Write4Bits(dt >> 4);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	091b      	lsrs	r3, r3, #4
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff77 	bl	8000520 <LCD_Write4Bits>
  LCD_Write4Bits(dt);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff73 	bl	8000520 <LCD_Write4Bits>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40020400 	.word	0x40020400

08000648 <LCD_Char>:

void LCD_Char(char chr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  LCD_Data((uint8_t) chr);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffdb 	bl	8000610 <LCD_Data>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <LCD_String>:

void LCD_String(char * str)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
  while (str[i] != 0)
 800066e:	e009      	b.n	8000684 <LCD_String+0x22>
  {
   LCD_Char(str[i]);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffe5 	bl	8000648 <LCD_Char>
   i++;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
  while (str[i] != 0)
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1ef      	bne.n	8000670 <LCD_String+0xe>
  }
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <LCD_SetPos>:

void LCD_SetPos(uint8_t x, uint8_t y)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
  uint8_t firstChar[] = {0x80, 0xC0, 0x94, 0xD4};
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <LCD_SetPos+0x34>)
 80006ae:	60fb      	str	r3, [r7, #12]
  LCD_Command(firstChar[y] + x);
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	3310      	adds	r3, #16
 80006b4:	443b      	add	r3, r7
 80006b6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4413      	add	r3, r2
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff89 	bl	80005d8 <LCD_Command>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	d494c080 	.word	0xd494c080

080006d4 <LCD_Clear>:

void LCD_Clear(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  LCD_Command(0x01);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff7d 	bl	80005d8 <LCD_Command>
  HAL_Delay(2);
 80006de:	2002      	movs	r0, #2
 80006e0:	f001 fbae 	bl	8001e40 <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <LCD_Init>:

void LCD_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80006ec:	2032      	movs	r0, #50	@ 0x32
 80006ee:	f001 fba7 	bl	8001e40 <HAL_Delay>
  RS_RESET();
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f8:	4815      	ldr	r0, [pc, #84]	@ (8000750 <LCD_Init+0x68>)
 80006fa:	f001 fe5f 	bl	80023bc <HAL_GPIO_WritePin>
  EN_RESET();
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <LCD_Init+0x68>)
 8000706:	f001 fe59 	bl	80023bc <HAL_GPIO_WritePin>
 
  LCD_Write4Bits(0x03);
 800070a:	2003      	movs	r0, #3
 800070c:	f7ff ff08 	bl	8000520 <LCD_Write4Bits>
  HAL_Delay(5);
 8000710:	2005      	movs	r0, #5
 8000712:	f001 fb95 	bl	8001e40 <HAL_Delay>
  LCD_Write4Bits(0x03);
 8000716:	2003      	movs	r0, #3
 8000718:	f7ff ff02 	bl	8000520 <LCD_Write4Bits>
  HAL_Delay(5);
 800071c:	2005      	movs	r0, #5
 800071e:	f001 fb8f 	bl	8001e40 <HAL_Delay>
  LCD_Write4Bits(0x03);
 8000722:	2003      	movs	r0, #3
 8000724:	f7ff fefc 	bl	8000520 <LCD_Write4Bits>
  HAL_Delay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f001 fb89 	bl	8001e40 <HAL_Delay>
  LCD_Write4Bits(0x02);
 800072e:	2002      	movs	r0, #2
 8000730:	f7ff fef6 	bl	8000520 <LCD_Write4Bits>
  LCD_Command(0x28);
 8000734:	2028      	movs	r0, #40	@ 0x28
 8000736:	f7ff ff4f 	bl	80005d8 <LCD_Command>
  LCD_Command(0x0C);
 800073a:	200c      	movs	r0, #12
 800073c:	f7ff ff4c 	bl	80005d8 <LCD_Command>
  LCD_Clear();
 8000740:	f7ff ffc8 	bl	80006d4 <LCD_Clear>
  LCD_Command(0x06);
 8000744:	2006      	movs	r0, #6
 8000746:	f7ff ff47 	bl	80005d8 <LCD_Command>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020400 	.word	0x40020400

08000754 <SendFPHeader>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendFPHeader()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPHeader,6,1000);
 8000758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075c:	2206      	movs	r2, #6
 800075e:	4903      	ldr	r1, [pc, #12]	@ (800076c <SendFPHeader+0x18>)
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <SendFPHeader+0x1c>)
 8000762:	f003 fccd 	bl	8004100 <HAL_UART_Transmit>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	20000154 	.word	0x20000154

08000774 <SendFPGetImage>:

void SendFPGetImage()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	 HAL_UART_Transmit(&huart5,FPGetImage,6,1000);
 8000778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077c:	2206      	movs	r2, #6
 800077e:	4903      	ldr	r1, [pc, #12]	@ (800078c <SendFPGetImage+0x18>)
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <SendFPGetImage+0x1c>)
 8000782:	f003 fcbd 	bl	8004100 <HAL_UART_Transmit>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	20000154 	.word	0x20000154

08000794 <SendFPCreateCharFile1>:

void SendFPCreateCharFile1()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateCharFile1,7,1000);
 8000798:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079c:	2207      	movs	r2, #7
 800079e:	4903      	ldr	r1, [pc, #12]	@ (80007ac <SendFPCreateCharFile1+0x18>)
 80007a0:	4803      	ldr	r0, [pc, #12]	@ (80007b0 <SendFPCreateCharFile1+0x1c>)
 80007a2:	f003 fcad 	bl	8004100 <HAL_UART_Transmit>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000010 	.word	0x20000010
 80007b0:	20000154 	.word	0x20000154

080007b4 <SendFPCreateCharFile2>:

void SendFPCreateCharFile2()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateCharFile2,7,1000);
 80007b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007bc:	2207      	movs	r2, #7
 80007be:	4903      	ldr	r1, [pc, #12]	@ (80007cc <SendFPCreateCharFile2+0x18>)
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <SendFPCreateCharFile2+0x1c>)
 80007c2:	f003 fc9d 	bl	8004100 <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000018 	.word	0x20000018
 80007d0:	20000154 	.word	0x20000154

080007d4 <SendFPCreateTemplate>:

void SendFPCreateTemplate()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateTemplate,6,1000);
 80007d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007dc:	2206      	movs	r2, #6
 80007de:	4903      	ldr	r1, [pc, #12]	@ (80007ec <SendFPCreateTemplate+0x18>)
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <SendFPCreateTemplate+0x1c>)
 80007e2:	f003 fc8d 	bl	8004100 <HAL_UART_Transmit>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000020 	.word	0x20000020
 80007f0:	20000154 	.word	0x20000154

080007f4 <SendFPDeleteAllFinger>:

void SendFPDeleteAllFinger()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPDeleteAllFinger,6,1000);
 80007f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fc:	2206      	movs	r2, #6
 80007fe:	4903      	ldr	r1, [pc, #12]	@ (800080c <SendFPDeleteAllFinger+0x18>)
 8000800:	4803      	ldr	r0, [pc, #12]	@ (8000810 <SendFPDeleteAllFinger+0x1c>)
 8000802:	f003 fc7d 	bl	8004100 <HAL_UART_Transmit>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000028 	.word	0x20000028
 8000810:	20000154 	.word	0x20000154

08000814 <SendFPDSearchFinger>:

void SendFPDSearchFinger()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPSearchFinger,11,1000);
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	220b      	movs	r2, #11
 800081e:	4903      	ldr	r1, [pc, #12]	@ (800082c <SendFPDSearchFinger+0x18>)
 8000820:	4803      	ldr	r0, [pc, #12]	@ (8000830 <SendFPDSearchFinger+0x1c>)
 8000822:	f003 fc6d 	bl	8004100 <HAL_UART_Transmit>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000030 	.word	0x20000030
 8000830:	20000154 	.word	0x20000154

08000834 <SendFGetNumberOfFinger>:

void SendFGetNumberOfFinger()
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPGetNumberOfFinger,6,1000);
 8000838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083c:	2206      	movs	r2, #6
 800083e:	4903      	ldr	r1, [pc, #12]	@ (800084c <SendFGetNumberOfFinger+0x18>)
 8000840:	4803      	ldr	r0, [pc, #12]	@ (8000850 <SendFGetNumberOfFinger+0x1c>)
 8000842:	f003 fc5d 	bl	8004100 <HAL_UART_Transmit>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000003c 	.word	0x2000003c
 8000850:	20000154 	.word	0x20000154

08000854 <SendStoreFinger>:

void SendStoreFinger(uint16_t IDStore)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
	uint16_t Sum=0;
 800085e:	2300      	movs	r3, #0
 8000860:	82fb      	strh	r3, [r7, #22]
	uint8_t DataSend[9]={0};
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	711a      	strb	r2, [r3, #4]

	DataSend[0]=0x01;
 8000870:	2301      	movs	r3, #1
 8000872:	733b      	strb	r3, [r7, #12]
	Sum=Sum+DataSend[0];
 8000874:	7b3b      	ldrb	r3, [r7, #12]
 8000876:	461a      	mov	r2, r3
 8000878:	8afb      	ldrh	r3, [r7, #22]
 800087a:	4413      	add	r3, r2
 800087c:	82fb      	strh	r3, [r7, #22]
	DataSend[1]=0x00;
 800087e:	2300      	movs	r3, #0
 8000880:	737b      	strb	r3, [r7, #13]
	Sum=Sum+DataSend[1];
 8000882:	7b7b      	ldrb	r3, [r7, #13]
 8000884:	461a      	mov	r2, r3
 8000886:	8afb      	ldrh	r3, [r7, #22]
 8000888:	4413      	add	r3, r2
 800088a:	82fb      	strh	r3, [r7, #22]
	DataSend[2]=0x06;
 800088c:	2306      	movs	r3, #6
 800088e:	73bb      	strb	r3, [r7, #14]
	Sum=Sum+DataSend[2];
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	8afb      	ldrh	r3, [r7, #22]
 8000896:	4413      	add	r3, r2
 8000898:	82fb      	strh	r3, [r7, #22]
	DataSend[3]=0x06;
 800089a:	2306      	movs	r3, #6
 800089c:	73fb      	strb	r3, [r7, #15]
	Sum=Sum+DataSend[3];
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	461a      	mov	r2, r3
 80008a2:	8afb      	ldrh	r3, [r7, #22]
 80008a4:	4413      	add	r3, r2
 80008a6:	82fb      	strh	r3, [r7, #22]
	DataSend[4]=0x01;
 80008a8:	2301      	movs	r3, #1
 80008aa:	743b      	strb	r3, [r7, #16]
	Sum=Sum+DataSend[4];
 80008ac:	7c3b      	ldrb	r3, [r7, #16]
 80008ae:	461a      	mov	r2, r3
 80008b0:	8afb      	ldrh	r3, [r7, #22]
 80008b2:	4413      	add	r3, r2
 80008b4:	82fb      	strh	r3, [r7, #22]
	DataSend[5]= (uint8_t)(IDStore>> 8);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	747b      	strb	r3, [r7, #17]
	Sum=Sum+DataSend[5];
 80008c0:	7c7b      	ldrb	r3, [r7, #17]
 80008c2:	461a      	mov	r2, r3
 80008c4:	8afb      	ldrh	r3, [r7, #22]
 80008c6:	4413      	add	r3, r2
 80008c8:	82fb      	strh	r3, [r7, #22]
	DataSend[6]=(uint8_t) (IDStore&0xFF);
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	74bb      	strb	r3, [r7, #18]
	Sum=Sum+DataSend[6];
 80008d0:	7cbb      	ldrb	r3, [r7, #18]
 80008d2:	461a      	mov	r2, r3
 80008d4:	8afb      	ldrh	r3, [r7, #22]
 80008d6:	4413      	add	r3, r2
 80008d8:	82fb      	strh	r3, [r7, #22]
  DataSend[7]=(uint8_t)(Sum>> 8);
 80008da:	8afb      	ldrh	r3, [r7, #22]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	74fb      	strb	r3, [r7, #19]
	DataSend[8]=(uint8_t)(Sum&0xFF);
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	753b      	strb	r3, [r7, #20]
	HAL_UART_Transmit(&huart5,DataSend,9,1000);
 80008ea:	f107 010c 	add.w	r1, r7, #12
 80008ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f2:	2209      	movs	r2, #9
 80008f4:	4803      	ldr	r0, [pc, #12]	@ (8000904 <SendStoreFinger+0xb0>)
 80008f6:	f003 fc03 	bl	8004100 <HAL_UART_Transmit>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000154 	.word	0x20000154

08000908 <CheckFPRespsone>:




uint8_t CheckFPRespsone(uint8_t MaxRead)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	uint8_t ByteCount=0;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t FPRXData[20]={0xFF};
 8000918:	23ff      	movs	r3, #255	@ 0xff
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
	uint8_t UARTData[1]={0};
 800092a:	2300      	movs	r3, #0
 800092c:	733b      	strb	r3, [r7, #12]
	uint32_t TimeOut = HAL_GetTick();
 800092e:	f001 fa7b 	bl	8001e28 <HAL_GetTick>
 8000932:	62b8      	str	r0, [r7, #40]	@ 0x28
	uint8_t Result;
	IDFromFinger=0xFF;
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <CheckFPRespsone+0xc0>)
 8000936:	22ff      	movs	r2, #255	@ 0xff
 8000938:	701a      	strb	r2, [r3, #0]
	while((HAL_GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 800093a:	e016      	b.n	800096a <CheckFPRespsone+0x62>
	{
	    if(HAL_UART_Receive(&huart5, (uint8_t *)UARTData, 1, 1000) == HAL_OK)
 800093c:	f107 010c 	add.w	r1, r7, #12
 8000940:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000944:	2201      	movs	r2, #1
 8000946:	4821      	ldr	r0, [pc, #132]	@ (80009cc <CheckFPRespsone+0xc4>)
 8000948:	f003 fc65 	bl	8004216 <HAL_UART_Receive>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10b      	bne.n	800096a <CheckFPRespsone+0x62>
			{
				FPRXData[ByteCount] = UARTData[0];
 8000952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000956:	7b3a      	ldrb	r2, [r7, #12]
 8000958:	3330      	adds	r3, #48	@ 0x30
 800095a:	443b      	add	r3, r7
 800095c:	f803 2c20 	strb.w	r2, [r3, #-32]
				ByteCount++;
 8000960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000964:	3301      	adds	r3, #1
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	while((HAL_GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 800096a:	f001 fa5d 	bl	8001e28 <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000978:	d204      	bcs.n	8000984 <CheckFPRespsone+0x7c>
 800097a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3db      	bcc.n	800093c <CheckFPRespsone+0x34>
			}
	}

	if(ByteCount==0)
 8000984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <CheckFPRespsone+0x90>
	{
		//FPRXData[0]=0xEE;
		//FPRXData[1]=0xEE;
		//HAL_UART_Transmit(&huart2,FPRXData,2,1000);
		Result=FP_ERROR;
 800098c:	23fe      	movs	r3, #254	@ 0xfe
 800098e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		return Result;
 8000992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000996:	e012      	b.n	80009be <CheckFPRespsone+0xb6>
	}
	else if(ByteCount<MaxRead)
 8000998:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d205      	bcs.n	80009ae <CheckFPRespsone+0xa6>
	{
		Result=FP_ERROR;
 80009a2:	23fe      	movs	r3, #254	@ 0xfe
 80009a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		return Result;
 80009a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ac:	e007      	b.n	80009be <CheckFPRespsone+0xb6>
	}
	  else // vail data return
	{

		 Result=FPRXData[9];
 80009ae:	7e7b      	ldrb	r3, [r7, #25]
 80009b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		 IDFromFinger=FPRXData[11];
 80009b4:	7efa      	ldrb	r2, [r7, #27]
 80009b6:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <CheckFPRespsone+0xc0>)
 80009b8:	701a      	strb	r2, [r3, #0]
	   //HAL_UART_Transmit(&huart2,FPRXData,MaxRead,1000);
		 return Result;
 80009ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27

	}
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3730      	adds	r7, #48	@ 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000022c 	.word	0x2000022c
 80009cc:	20000154 	.word	0x20000154

080009d0 <GetNumberOfFinger>:

uint8_t GetNumberOfFinger()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	uint8_t Result;
	SendFPHeader();
 80009d6:	f7ff febd 	bl	8000754 <SendFPHeader>
	SendFGetNumberOfFinger();
 80009da:	f7ff ff2b 	bl	8000834 <SendFGetNumberOfFinger>
	Result=CheckFPRespsone(14);
 80009de:	200e      	movs	r0, #14
 80009e0:	f7ff ff92 	bl	8000908 <CheckFPRespsone>
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return 0xFF;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <GetNumberOfFinger+0x22>
 80009ee:	23ff      	movs	r3, #255	@ 0xff
 80009f0:	e001      	b.n	80009f6 <GetNumberOfFinger+0x26>

	return IDFromFinger;
 80009f2:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <GetNumberOfFinger+0x30>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000022c 	.word	0x2000022c

08000a04 <RegistryNewFinger>:




uint8_t RegistryNewFinger(uint16_t LocationID)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]

	uint8_t Result=FP_NOFINGER;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	73fb      	strb	r3, [r7, #15]
	uint32_t TimeOut = HAL_GetTick();
 8000a12:	f001 fa09 	bl	8001e28 <HAL_GetTick>
 8000a16:	60b8      	str	r0, [r7, #8]


	LCD_SetPos(0,1);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fe3e 	bl	800069c <LCD_SetPos>
	LCD_String("HAY DAT NGON TAY");
 8000a20:	4849      	ldr	r0, [pc, #292]	@ (8000b48 <RegistryNewFinger+0x144>)
 8000a22:	f7ff fe1e 	bl	8000662 <LCD_String>

	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000a26:	e008      	b.n	8000a3a <RegistryNewFinger+0x36>
	{

		SendFPHeader();
 8000a28:	f7ff fe94 	bl	8000754 <SendFPHeader>
		SendFPGetImage();
 8000a2c:	f7ff fea2 	bl	8000774 <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8000a30:	200c      	movs	r0, #12
 8000a32:	f7ff ff69 	bl	8000908 <CheckFPRespsone>
 8000a36:	4603      	mov	r3, r0
 8000a38:	73fb      	strb	r3, [r7, #15]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d108      	bne.n	8000a52 <RegistryNewFinger+0x4e>
 8000a40:	f001 f9f2 	bl	8001e28 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d9ea      	bls.n	8000a28 <RegistryNewFinger+0x24>
	}
	if(Result!=FP_OK) return FP_ERROR;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <RegistryNewFinger+0x58>
 8000a58:	23fe      	movs	r3, #254	@ 0xfe
 8000a5a:	e071      	b.n	8000b40 <RegistryNewFinger+0x13c>
	// continue if detect finger;
	SendFPHeader();
 8000a5c:	f7ff fe7a 	bl	8000754 <SendFPHeader>
	SendFPCreateCharFile1();
 8000a60:	f7ff fe98 	bl	8000794 <SendFPCreateCharFile1>
	Result=CheckFPRespsone(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff ff4f 	bl	8000908 <CheckFPRespsone>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	73fb      	strb	r3, [r7, #15]
	if(Result!=FP_OK) return FP_ERROR;
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <RegistryNewFinger+0x74>
 8000a74:	23fe      	movs	r3, #254	@ 0xfe
 8000a76:	e063      	b.n	8000b40 <RegistryNewFinger+0x13c>

	LCD_SetPos(0,1);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fe0e 	bl	800069c <LCD_SetPos>
	LCD_String(" HAY BO TAY RA  ");
 8000a80:	4832      	ldr	r0, [pc, #200]	@ (8000b4c <RegistryNewFinger+0x148>)
 8000a82:	f7ff fdee 	bl	8000662 <LCD_String>

	HAL_Delay(2000);
 8000a86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a8a:	f001 f9d9 	bl	8001e40 <HAL_Delay>
	Result=FP_NOFINGER;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	73fb      	strb	r3, [r7, #15]
	TimeOut = HAL_GetTick();
 8000a92:	f001 f9c9 	bl	8001e28 <HAL_GetTick>
 8000a96:	60b8      	str	r0, [r7, #8]
	LCD_SetPos(0,1);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fdfe 	bl	800069c <LCD_SetPos>
	LCD_String("DAT LAI NGON TAY");
 8000aa0:	482b      	ldr	r0, [pc, #172]	@ (8000b50 <RegistryNewFinger+0x14c>)
 8000aa2:	f7ff fdde 	bl	8000662 <LCD_String>

	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000aa6:	e008      	b.n	8000aba <RegistryNewFinger+0xb6>
	{

		SendFPHeader();
 8000aa8:	f7ff fe54 	bl	8000754 <SendFPHeader>
		SendFPGetImage();
 8000aac:	f7ff fe62 	bl	8000774 <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f7ff ff29 	bl	8000908 <CheckFPRespsone>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	73fb      	strb	r3, [r7, #15]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d108      	bne.n	8000ad2 <RegistryNewFinger+0xce>
 8000ac0:	f001 f9b2 	bl	8001e28 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d9ea      	bls.n	8000aa8 <RegistryNewFinger+0xa4>
	}
	if(Result!=FP_OK) return FP_ERROR;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <RegistryNewFinger+0xd8>
 8000ad8:	23fe      	movs	r3, #254	@ 0xfe
 8000ada:	e031      	b.n	8000b40 <RegistryNewFinger+0x13c>

	// continue if detect finger;
	SendFPHeader();
 8000adc:	f7ff fe3a 	bl	8000754 <SendFPHeader>
	SendFPCreateCharFile2();
 8000ae0:	f7ff fe68 	bl	80007b4 <SendFPCreateCharFile2>
	Result=CheckFPRespsone(12);
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f7ff ff0f 	bl	8000908 <CheckFPRespsone>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
	if(Result!=FP_OK) return FP_ERROR;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <RegistryNewFinger+0xf4>
 8000af4:	23fe      	movs	r3, #254	@ 0xfe
 8000af6:	e023      	b.n	8000b40 <RegistryNewFinger+0x13c>

	// Compare finger, create template
	SendFPHeader();
 8000af8:	f7ff fe2c 	bl	8000754 <SendFPHeader>
	SendFPCreateTemplate();
 8000afc:	f7ff fe6a 	bl	80007d4 <SendFPCreateTemplate>
	Result=CheckFPRespsone(12);
 8000b00:	200c      	movs	r0, #12
 8000b02:	f7ff ff01 	bl	8000908 <CheckFPRespsone>
 8000b06:	4603      	mov	r3, r0
 8000b08:	73fb      	strb	r3, [r7, #15]
	if(Result==FP_FINGER_NOTMATCH)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b0a      	cmp	r3, #10
 8000b0e:	d101      	bne.n	8000b14 <RegistryNewFinger+0x110>
	{

		return FP_FINGER_NOTMATCH;
 8000b10:	230a      	movs	r3, #10
 8000b12:	e015      	b.n	8000b40 <RegistryNewFinger+0x13c>
	}
	else if(Result!=FP_OK) return FP_ERROR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <RegistryNewFinger+0x11a>
 8000b1a:	23fe      	movs	r3, #254	@ 0xfe
 8000b1c:	e010      	b.n	8000b40 <RegistryNewFinger+0x13c>

	// save finger
	SendFPHeader();
 8000b1e:	f7ff fe19 	bl	8000754 <SendFPHeader>
	SendStoreFinger(LocationID);
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe95 	bl	8000854 <SendStoreFinger>
	Result=CheckFPRespsone(12);
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f7ff feec 	bl	8000908 <CheckFPRespsone>
 8000b30:	4603      	mov	r3, r0
 8000b32:	73fb      	strb	r3, [r7, #15]
	if(Result!=FP_OK) return FP_ERROR;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <RegistryNewFinger+0x13a>
 8000b3a:	23fe      	movs	r3, #254	@ 0xfe
 8000b3c:	e000      	b.n	8000b40 <RegistryNewFinger+0x13c>
	else
	{
		return FP_OK;
 8000b3e:	2300      	movs	r3, #0
	}

}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08004a14 	.word	0x08004a14
 8000b4c:	08004a28 	.word	0x08004a28
 8000b50:	08004a3c 	.word	0x08004a3c

08000b54 <CheckFinger>:

uint8_t CheckFinger()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	uint8_t Result=FP_NOFINGER;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	71fb      	strb	r3, [r7, #7]
	uint32_t TimeOut = HAL_GetTick();
 8000b5e:	f001 f963 	bl	8001e28 <HAL_GetTick>
 8000b62:	6038      	str	r0, [r7, #0]





	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)&&HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0) // time out is 5000 ms and no button press
 8000b64:	e008      	b.n	8000b78 <CheckFinger+0x24>
	{

		SendFPHeader();
 8000b66:	f7ff fdf5 	bl	8000754 <SendFPHeader>
		SendFPGetImage();
 8000b6a:	f7ff fe03 	bl	8000774 <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8000b6e:	200c      	movs	r0, #12
 8000b70:	f7ff feca 	bl	8000908 <CheckFPRespsone>
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)&&HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0) // time out is 5000 ms and no button press
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d10f      	bne.n	8000b9e <CheckFinger+0x4a>
 8000b7e:	f001 f953 	bl	8001e28 <HAL_GetTick>
 8000b82:	4602      	mov	r2, r0
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d806      	bhi.n	8000b9e <CheckFinger+0x4a>
 8000b90:	2101      	movs	r1, #1
 8000b92:	4816      	ldr	r0, [pc, #88]	@ (8000bec <CheckFinger+0x98>)
 8000b94:	f001 fbfa 	bl	800238c <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0e3      	beq.n	8000b66 <CheckFinger+0x12>
	}
	if(Result==FP_NOFINGER)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d101      	bne.n	8000ba8 <CheckFinger+0x54>
	{

		return FP_NOFINGER;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e01c      	b.n	8000be2 <CheckFinger+0x8e>
	}
	if(Result!=FP_OK) return FP_ERROR;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <CheckFinger+0x5e>
 8000bae:	23fe      	movs	r3, #254	@ 0xfe
 8000bb0:	e017      	b.n	8000be2 <CheckFinger+0x8e>
	// continue if detect finger;
	SendFPHeader();
 8000bb2:	f7ff fdcf 	bl	8000754 <SendFPHeader>
	SendFPCreateCharFile1();
 8000bb6:	f7ff fded 	bl	8000794 <SendFPCreateCharFile1>
	Result=CheckFPRespsone(12);
 8000bba:	200c      	movs	r0, #12
 8000bbc:	f7ff fea4 	bl	8000908 <CheckFPRespsone>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return FP_ERROR;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <CheckFinger+0x7a>
 8000bca:	23fe      	movs	r3, #254	@ 0xfe
 8000bcc:	e009      	b.n	8000be2 <CheckFinger+0x8e>

	// Search Finger
	SendFPHeader();
 8000bce:	f7ff fdc1 	bl	8000754 <SendFPHeader>
	SendFPDSearchFinger();
 8000bd2:	f7ff fe1f 	bl	8000814 <SendFPDSearchFinger>
	Result=CheckFPRespsone(16);
 8000bd6:	2010      	movs	r0, #16
 8000bd8:	f7ff fe96 	bl	8000908 <CheckFPRespsone>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
	return Result;
 8000be0:	79fb      	ldrb	r3, [r7, #7]


}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020000 	.word	0x40020000

08000bf0 <ProcessRegistryNewFinger>:


uint8_t ProcessRegistryNewFinger()
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  uint8_t FingerResult;
  LCD_SetPos(0,1);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fd4f 	bl	800069c <LCD_SetPos>
  LCD_String("DANG KY VAN TAY ");
 8000bfe:	4832      	ldr	r0, [pc, #200]	@ (8000cc8 <ProcessRegistryNewFinger+0xd8>)
 8000c00:	f7ff fd2f 	bl	8000662 <LCD_String>

  HAL_Delay(1000);
 8000c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c08:	f001 f91a 	bl	8001e40 <HAL_Delay>
  FingerResult=RegistryNewFinger(CurrentNumberFinger+1);
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fef5 	bl	8000a04 <RegistryNewFinger>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	if(FingerResult==FP_OK)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d123      	bne.n	8000c6c <ProcessRegistryNewFinger+0x7c>
	{
		LCD_SetPos(0,1);
 8000c24:	2101      	movs	r1, #1
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fd38 	bl	800069c <LCD_SetPos>
		LCD_String("DANG KY T.CONG  ");
 8000c2c:	4828      	ldr	r0, [pc, #160]	@ (8000cd0 <ProcessRegistryNewFinger+0xe0>)
 8000c2e:	f7ff fd18 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c36:	f001 f903 	bl	8001e40 <HAL_Delay>
		LCD_SetPos(0,1);
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fd2d 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000c42:	4824      	ldr	r0, [pc, #144]	@ (8000cd4 <ProcessRegistryNewFinger+0xe4>)
 8000c44:	f7ff fd0d 	bl	8000662 <LCD_String>
		CurrentNumberFinger++;
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c52:	701a      	strb	r2, [r3, #0]
		if(CurrentNumberFinger==100) CurrentNumberFinger=1;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b64      	cmp	r3, #100	@ 0x64
 8000c5a:	d102      	bne.n	8000c62 <ProcessRegistryNewFinger+0x72>
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1500);
 8000c62:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c66:	f001 f8eb 	bl	8001e40 <HAL_Delay>
 8000c6a:	e027      	b.n	8000cbc <ProcessRegistryNewFinger+0xcc>
	}
	else if(FingerResult==FP_FINGER_NOTMATCH)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b0a      	cmp	r3, #10
 8000c70:	d112      	bne.n	8000c98 <ProcessRegistryNewFinger+0xa8>
	{
		LCD_SetPos(0,1);
 8000c72:	2101      	movs	r1, #1
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fd11 	bl	800069c <LCD_SetPos>
		LCD_String("2 VT KHONG KHOP ");
 8000c7a:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <ProcessRegistryNewFinger+0xe8>)
 8000c7c:	f7ff fcf1 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000c80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c84:	f001 f8dc 	bl	8001e40 <HAL_Delay>
		LCD_SetPos(0,1);
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fd06 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000c90:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <ProcessRegistryNewFinger+0xe4>)
 8000c92:	f7ff fce6 	bl	8000662 <LCD_String>
 8000c96:	e011      	b.n	8000cbc <ProcessRegistryNewFinger+0xcc>
	}
	else
	{
		LCD_SetPos(0,1);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fcfe 	bl	800069c <LCD_SetPos>
		LCD_String(" CO LOI XAY RA  ");
 8000ca0:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <ProcessRegistryNewFinger+0xec>)
 8000ca2:	f7ff fcde 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000ca6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000caa:	f001 f8c9 	bl	8001e40 <HAL_Delay>
		LCD_SetPos(0,1);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fcf3 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000cb6:	4807      	ldr	r0, [pc, #28]	@ (8000cd4 <ProcessRegistryNewFinger+0xe4>)
 8000cb8:	f7ff fcd3 	bl	8000662 <LCD_String>

	}
	return FingerResult;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	08004a50 	.word	0x08004a50
 8000ccc:	2000022d 	.word	0x2000022d
 8000cd0:	08004a64 	.word	0x08004a64
 8000cd4:	08004a78 	.word	0x08004a78
 8000cd8:	08004a8c 	.word	0x08004a8c
 8000cdc:	08004aa0 	.word	0x08004aa0

08000ce0 <DeleteAllFinger>:

void DeleteAllFinger()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

	uint8_t FingerResult;
	SendFPHeader();
 8000ce6:	f7ff fd35 	bl	8000754 <SendFPHeader>
	SendFPDeleteAllFinger();
 8000cea:	f7ff fd83 	bl	80007f4 <SendFPDeleteAllFinger>
	FingerResult=CheckFPRespsone(12);
 8000cee:	200c      	movs	r0, #12
 8000cf0:	f7ff fe0a 	bl	8000908 <CheckFPRespsone>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
	if(FingerResult==FP_OK)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d115      	bne.n	8000d2a <DeleteAllFinger+0x4a>
	{
		LCD_SetPos(0,1);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fccb 	bl	800069c <LCD_SetPos>
		LCD_String(" DA XOA VAN TAY ");
 8000d06:	4814      	ldr	r0, [pc, #80]	@ (8000d58 <DeleteAllFinger+0x78>)
 8000d08:	f7ff fcab 	bl	8000662 <LCD_String>
		HAL_Delay(1500);
 8000d0c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d10:	f001 f896 	bl	8001e40 <HAL_Delay>
		LCD_SetPos(0,1);
 8000d14:	2101      	movs	r1, #1
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fcc0 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000d1c:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <DeleteAllFinger+0x7c>)
 8000d1e:	f7ff fca0 	bl	8000662 <LCD_String>
		CurrentNumberFinger=0;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <DeleteAllFinger+0x80>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1500);
		LCD_SetPos(0,1);
		LCD_String("                ");
	}

}
 8000d28:	e011      	b.n	8000d4e <DeleteAllFinger+0x6e>
		LCD_SetPos(0,1);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fcb5 	bl	800069c <LCD_SetPos>
		LCD_String(" CO LOI XAY RA  ");
 8000d32:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <DeleteAllFinger+0x84>)
 8000d34:	f7ff fc95 	bl	8000662 <LCD_String>
		HAL_Delay(1500);
 8000d38:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d3c:	f001 f880 	bl	8001e40 <HAL_Delay>
		LCD_SetPos(0,1);
 8000d40:	2101      	movs	r1, #1
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fcaa 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <DeleteAllFinger+0x7c>)
 8000d4a:	f7ff fc8a 	bl	8000662 <LCD_String>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	08004ab4 	.word	0x08004ab4
 8000d5c:	08004a78 	.word	0x08004a78
 8000d60:	2000022d 	.word	0x2000022d
 8000d64:	08004aa0 	.word	0x08004aa0

08000d68 <CloseDoor>:
	uint32_t pulse_length = ((angle * (2000 - 1000)) / 180) + 1000;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_length);
}

void CloseDoor()
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
////	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
////	  Delay_us(1000);
////	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
//	SetServoAngle(0); // Close door (0 degrees)
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <CloseDoor+0x18>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2232      	movs	r2, #50	@ 0x32
 8000d72:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200000c4 	.word	0x200000c4

08000d84 <OpenDoor>:

void OpenDoor()
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
////	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
////	  Delay_us(2100);
////	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
//	SetServoAngle(90); // Open door (90 degrees)
//	Delay_us(2100);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 150);
 8000d88:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <OpenDoor+0x18>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2296      	movs	r2, #150	@ 0x96
 8000d8e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200000c4 	.word	0x200000c4

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da6:	f000 ffd9 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000daa:	f000 f90d 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dae:	f000 fac9 	bl	8001344 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000db2:	f000 fa73 	bl	800129c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000db6:	f000 fa9b 	bl	80012f0 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8000dba:	f000 fa45 	bl	8001248 <MX_UART5_Init>
  MX_TIM2_Init();
 8000dbe:	f000 f9a3 	bl	8001108 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000dc2:	f000 f96b 	bl	800109c <MX_SPI1_Init>
  MX_UART4_Init();
 8000dc6:	f000 fa15 	bl	80011f4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000dca:	f000 fc31 	bl	8001630 <MFRC522_Init>
  LCD_Init();
 8000dce:	f7ff fc8b 	bl	80006e8 <LCD_Init>
  LCD_SetPos(0,0);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fc61 	bl	800069c <LCD_SetPos>
  LCD_String(" HT VAN TAY/RFID");
 8000dda:	486e      	ldr	r0, [pc, #440]	@ (8000f94 <main+0x1f4>)
 8000ddc:	f7ff fc41 	bl	8000662 <LCD_String>


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000de0:	2100      	movs	r1, #0
 8000de2:	486d      	ldr	r0, [pc, #436]	@ (8000f98 <main+0x1f8>)
 8000de4:	f002 fb52 	bl	800348c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8000de8:	4b6b      	ldr	r3, [pc, #428]	@ (8000f98 <main+0x1f8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2232      	movs	r2, #50	@ 0x32
 8000dee:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_Delay(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000df4:	f001 f824 	bl	8001e40 <HAL_Delay>


  OpenDoor(); // need to active motor
 8000df8:	f7ff ffc4 	bl	8000d84 <OpenDoor>
  HAL_Delay(500);
 8000dfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e00:	f001 f81e 	bl	8001e40 <HAL_Delay>
  CloseDoor();
 8000e04:	f7ff ffb0 	bl	8000d68 <CloseDoor>
  HAL_Delay(500);
 8000e08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e0c:	f001 f818 	bl	8001e40 <HAL_Delay>
  OpenDoor();
 8000e10:	f7ff ffb8 	bl	8000d84 <OpenDoor>
  HAL_Delay(500);
 8000e14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e18:	f001 f812 	bl	8001e40 <HAL_Delay>
  CloseDoor();
 8000e1c:	f7ff ffa4 	bl	8000d68 <CloseDoor>
  CurrentNumberFinger=GetNumberOfFinger();
 8000e20:	f7ff fdd6 	bl	80009d0 <GetNumberOfFinger>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b5c      	ldr	r3, [pc, #368]	@ (8000f9c <main+0x1fc>)
 8000e2a:	701a      	strb	r2, [r3, #0]
  if(CurrentNumberFinger>100)
 8000e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8000f9c <main+0x1fc>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b64      	cmp	r3, #100	@ 0x64
 8000e32:	d902      	bls.n	8000e3a <main+0x9a>
  {
	CurrentNumberFinger=1;
 8000e34:	4b59      	ldr	r3, [pc, #356]	@ (8000f9c <main+0x1fc>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
  }

	 LCD_SetPos(0,1);
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fc2d 	bl	800069c <LCD_SetPos>
	 LCD_String("    SAN SANG    ");
 8000e42:	4857      	ldr	r0, [pc, #348]	@ (8000fa0 <main+0x200>)
 8000e44:	f7ff fc0d 	bl	8000662 <LCD_String>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	status = MFRC522_Request(PICC_REQIDL, str);
 8000e48:	4956      	ldr	r1, [pc, #344]	@ (8000fa4 <main+0x204>)
 8000e4a:	2026      	movs	r0, #38	@ 0x26
 8000e4c:	f000 fce7 	bl	800181e <MFRC522_Request>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b54      	ldr	r3, [pc, #336]	@ (8000fa8 <main+0x208>)
 8000e56:	701a      	strb	r2, [r3, #0]
	status = MFRC522_Anticoll(str);
 8000e58:	4852      	ldr	r0, [pc, #328]	@ (8000fa4 <main+0x204>)
 8000e5a:	f000 fd05 	bl	8001868 <MFRC522_Anticoll>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b51      	ldr	r3, [pc, #324]	@ (8000fa8 <main+0x208>)
 8000e64:	701a      	strb	r2, [r3, #0]
	memcpy(sNum, str, 5);
 8000e66:	4b51      	ldr	r3, [pc, #324]	@ (8000fac <main+0x20c>)
 8000e68:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa4 <main+0x204>)
 8000e6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e6e:	6018      	str	r0, [r3, #0]
 8000e70:	3304      	adds	r3, #4
 8000e72:	7019      	strb	r1, [r3, #0]
	HAL_Delay(100);
 8000e74:	2064      	movs	r0, #100	@ 0x64
 8000e76:	f000 ffe3 	bl	8001e40 <HAL_Delay>
	FingerResult=CheckFinger();
 8000e7a:	f7ff fe6b 	bl	8000b54 <CheckFinger>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
    if(FingerResult==FP_OK || ((str[0]==163) && (str[1]==99) && (str[2]==212) && (str[3]==26) && (str[4]==14)) || ((str[0]==68) && (str[1]==244) && (str[2]==128) && (str[3]==113) && (str[4]==65)))
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d027      	beq.n	8000ed8 <main+0x138>
 8000e88:	4b46      	ldr	r3, [pc, #280]	@ (8000fa4 <main+0x204>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2ba3      	cmp	r3, #163	@ 0xa3
 8000e8e:	d10f      	bne.n	8000eb0 <main+0x110>
 8000e90:	4b44      	ldr	r3, [pc, #272]	@ (8000fa4 <main+0x204>)
 8000e92:	785b      	ldrb	r3, [r3, #1]
 8000e94:	2b63      	cmp	r3, #99	@ 0x63
 8000e96:	d10b      	bne.n	8000eb0 <main+0x110>
 8000e98:	4b42      	ldr	r3, [pc, #264]	@ (8000fa4 <main+0x204>)
 8000e9a:	789b      	ldrb	r3, [r3, #2]
 8000e9c:	2bd4      	cmp	r3, #212	@ 0xd4
 8000e9e:	d107      	bne.n	8000eb0 <main+0x110>
 8000ea0:	4b40      	ldr	r3, [pc, #256]	@ (8000fa4 <main+0x204>)
 8000ea2:	78db      	ldrb	r3, [r3, #3]
 8000ea4:	2b1a      	cmp	r3, #26
 8000ea6:	d103      	bne.n	8000eb0 <main+0x110>
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <main+0x204>)
 8000eaa:	791b      	ldrb	r3, [r3, #4]
 8000eac:	2b0e      	cmp	r3, #14
 8000eae:	d013      	beq.n	8000ed8 <main+0x138>
 8000eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa4 <main+0x204>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b44      	cmp	r3, #68	@ 0x44
 8000eb6:	d12d      	bne.n	8000f14 <main+0x174>
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa4 <main+0x204>)
 8000eba:	785b      	ldrb	r3, [r3, #1]
 8000ebc:	2bf4      	cmp	r3, #244	@ 0xf4
 8000ebe:	d129      	bne.n	8000f14 <main+0x174>
 8000ec0:	4b38      	ldr	r3, [pc, #224]	@ (8000fa4 <main+0x204>)
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	2b80      	cmp	r3, #128	@ 0x80
 8000ec6:	d125      	bne.n	8000f14 <main+0x174>
 8000ec8:	4b36      	ldr	r3, [pc, #216]	@ (8000fa4 <main+0x204>)
 8000eca:	78db      	ldrb	r3, [r3, #3]
 8000ecc:	2b71      	cmp	r3, #113	@ 0x71
 8000ece:	d121      	bne.n	8000f14 <main+0x174>
 8000ed0:	4b34      	ldr	r3, [pc, #208]	@ (8000fa4 <main+0x204>)
 8000ed2:	791b      	ldrb	r3, [r3, #4]
 8000ed4:	2b41      	cmp	r3, #65	@ 0x41
 8000ed6:	d11d      	bne.n	8000f14 <main+0x174>
	{
    	HAL_UART_Transmit(&huart4, (uint8_t*)"1", 1, 1000);
 8000ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000edc:	2201      	movs	r2, #1
 8000ede:	4934      	ldr	r1, [pc, #208]	@ (8000fb0 <main+0x210>)
 8000ee0:	4834      	ldr	r0, [pc, #208]	@ (8000fb4 <main+0x214>)
 8000ee2:	f003 f90d 	bl	8004100 <HAL_UART_Transmit>
		OpenDoor();
 8000ee6:	f7ff ff4d 	bl	8000d84 <OpenDoor>

		LCD_SetPos(0,1);
 8000eea:	2101      	movs	r1, #1
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fbd5 	bl	800069c <LCD_SetPos>
		LCD_String("   DANG MO CUA ");
 8000ef2:	4831      	ldr	r0, [pc, #196]	@ (8000fb8 <main+0x218>)
 8000ef4:	f7ff fbb5 	bl	8000662 <LCD_String>

		HAL_Delay(2000);
 8000ef8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000efc:	f000 ffa0 	bl	8001e40 <HAL_Delay>
		CloseDoor();
 8000f00:	f7ff ff32 	bl	8000d68 <CloseDoor>

		LCD_SetPos(0,1);
 8000f04:	2101      	movs	r1, #1
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fbc8 	bl	800069c <LCD_SetPos>
		LCD_String("               ");
 8000f0c:	482b      	ldr	r0, [pc, #172]	@ (8000fbc <main+0x21c>)
 8000f0e:	f7ff fba8 	bl	8000662 <LCD_String>
 8000f12:	e014      	b.n	8000f3e <main+0x19e>
	}
	else if(FingerResult==FP_FINGER_NOTFOUND)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b09      	cmp	r3, #9
 8000f18:	d111      	bne.n	8000f3e <main+0x19e>
	{
		LCD_SetPos(0,1);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fbbd 	bl	800069c <LCD_SetPos>
		LCD_String("VT KHONG HOP LE");
 8000f22:	4827      	ldr	r0, [pc, #156]	@ (8000fc0 <main+0x220>)
 8000f24:	f7ff fb9d 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000f28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f2c:	f000 ff88 	bl	8001e40 <HAL_Delay>
		LCD_SetPos(0,1);
 8000f30:	2101      	movs	r1, #1
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff fbb2 	bl	800069c <LCD_SetPos>
		LCD_String("               ");
 8000f38:	4820      	ldr	r0, [pc, #128]	@ (8000fbc <main+0x21c>)
 8000f3a:	f7ff fb92 	bl	8000662 <LCD_String>
	}

	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4820      	ldr	r0, [pc, #128]	@ (8000fc4 <main+0x224>)
 8000f42:	f001 fa23 	bl	800238c <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	f47f af7d 	bne.w	8000e48 <main+0xa8>
	{
		TimeCount = HAL_GetTick();
 8000f4e:	f000 ff6b 	bl	8001e28 <HAL_GetTick>
 8000f52:	6038      	str	r0, [r7, #0]
		while(HAL_GetTick()-TimeCount<3000&&HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1) // check hold button in 3 second to erase
 8000f54:	bf00      	nop
 8000f56:	f000 ff67 	bl	8001e28 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d806      	bhi.n	8000f76 <main+0x1d6>
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4816      	ldr	r0, [pc, #88]	@ (8000fc4 <main+0x224>)
 8000f6c:	f001 fa0e 	bl	800238c <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d0ef      	beq.n	8000f56 <main+0x1b6>
		{}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1) // still hold button
 8000f76:	2101      	movs	r1, #1
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <main+0x224>)
 8000f7a:	f001 fa07 	bl	800238c <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d102      	bne.n	8000f8a <main+0x1ea>
		{
			DeleteAllFinger();
 8000f84:	f7ff feac 	bl	8000ce0 <DeleteAllFinger>
 8000f88:	e75e      	b.n	8000e48 <main+0xa8>
		}
		else
		{
			FingerResult=ProcessRegistryNewFinger();
 8000f8a:	f7ff fe31 	bl	8000bf0 <ProcessRegistryNewFinger>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	status = MFRC522_Request(PICC_REQIDL, str);
 8000f92:	e759      	b.n	8000e48 <main+0xa8>
 8000f94:	08004ac8 	.word	0x08004ac8
 8000f98:	200000c4 	.word	0x200000c4
 8000f9c:	2000022d 	.word	0x2000022d
 8000fa0:	08004adc 	.word	0x08004adc
 8000fa4:	20000230 	.word	0x20000230
 8000fa8:	2000022e 	.word	0x2000022e
 8000fac:	20000240 	.word	0x20000240
 8000fb0:	08004af0 	.word	0x08004af0
 8000fb4:	2000010c 	.word	0x2000010c
 8000fb8:	08004af4 	.word	0x08004af4
 8000fbc:	08004b04 	.word	0x08004b04
 8000fc0:	08004b14 	.word	0x08004b14
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	@ 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2230      	movs	r2, #48	@ 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 fce4 	bl	80049a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <SystemClock_Config+0xcc>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <SystemClock_Config+0xcc>)
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <SystemClock_Config+0xcc>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <SystemClock_Config+0xd0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a21      	ldr	r2, [pc, #132]	@ (8001098 <SystemClock_Config+0xd0>)
 8001012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <SystemClock_Config+0xd0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001024:	2301      	movs	r3, #1
 8001026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001028:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102e:	2302      	movs	r3, #2
 8001030:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001032:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001038:	2304      	movs	r3, #4
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800103c:	23a8      	movs	r3, #168	@ 0xa8
 800103e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001040:	2302      	movs	r3, #2
 8001042:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001044:	2304      	movs	r3, #4
 8001046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4618      	mov	r0, r3
 800104e:	f001 f9cf 	bl	80023f0 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001058:	f000 fa32 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2302      	movs	r3, #2
 8001062:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001068:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800106c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001072:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2105      	movs	r1, #5
 800107a:	4618      	mov	r0, r3
 800107c:	f001 fc30 	bl	80028e0 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001086:	f000 fa1b 	bl	80014c0 <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3750      	adds	r7, #80	@ 0x50
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000

0800109c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010a2:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <MX_SPI1_Init+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010d0:	2210      	movs	r2, #16
 80010d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010e8:	220a      	movs	r2, #10
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <MX_SPI1_Init+0x64>)
 80010ee:	f001 fe17 	bl	8002d20 <HAL_SPI_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010f8:	f000 f9e2 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000006c 	.word	0x2000006c
 8001104:	40013000 	.word	0x40013000

08001108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	@ 0x38
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001138:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 800113a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800113e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900 - 1;
 8001140:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 8001142:	f240 3283 	movw	r2, #899	@ 0x383
 8001146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800114e:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 8001150:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001162:	4823      	ldr	r0, [pc, #140]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 8001164:	f002 f8ea 	bl	800333c <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800116e:	f000 f9a7 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800117c:	4619      	mov	r1, r3
 800117e:	481c      	ldr	r0, [pc, #112]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 8001180:	f002 fb0e 	bl	80037a0 <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800118a:	f000 f999 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800118e:	4818      	ldr	r0, [pc, #96]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 8001190:	f002 f923 	bl	80033da <HAL_TIM_PWM_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800119a:	f000 f991 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4619      	mov	r1, r3
 80011ac:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 80011ae:	f002 fedb 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011b8:	f000 f982 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011bc:	2360      	movs	r3, #96	@ 0x60
 80011be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 80011d4:	f002 fa22 	bl	800361c <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011de:	f000 f96f 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011e2:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <MX_TIM2_Init+0xe8>)
 80011e4:	f000 fc0e 	bl	8001a04 <HAL_TIM_MspPostInit>

}
 80011e8:	bf00      	nop
 80011ea:	3738      	adds	r7, #56	@ 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000c4 	.word	0x200000c4

080011f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <MX_UART4_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <MX_UART4_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <MX_UART4_Init+0x4c>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_UART4_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_UART4_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <MX_UART4_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_UART4_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <MX_UART4_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_UART4_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_UART4_Init+0x4c>)
 800122c:	f002 ff18 	bl	8004060 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001236:	f000 f943 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000010c 	.word	0x2000010c
 8001244:	40004c00 	.word	0x40004c00

08001248 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_UART5_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_UART5_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_UART5_Init+0x4c>)
 8001254:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001258:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_UART5_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_UART5_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_UART5_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_UART5_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_UART5_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_UART5_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_UART5_Init+0x4c>)
 8001280:	f002 feee 	bl	8004060 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f919 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000154 	.word	0x20000154
 8001298:	40005000 	.word	0x40005000

0800129c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <MX_USART1_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012a8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80012ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012d4:	f002 fec4 	bl	8004060 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 f8ef 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000019c 	.word	0x2000019c
 80012ec:	40011000 	.word	0x40011000

080012f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <MX_USART2_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 80012fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001328:	f002 fe9a 	bl	8004060 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 f8c5 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001e4 	.word	0x200001e4
 8001340:	40004400 	.word	0x40004400

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <MX_GPIO_Init+0x168>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a52      	ldr	r2, [pc, #328]	@ (80014ac <MX_GPIO_Init+0x168>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b50      	ldr	r3, [pc, #320]	@ (80014ac <MX_GPIO_Init+0x168>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b4c      	ldr	r3, [pc, #304]	@ (80014ac <MX_GPIO_Init+0x168>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a4b      	ldr	r2, [pc, #300]	@ (80014ac <MX_GPIO_Init+0x168>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b49      	ldr	r3, [pc, #292]	@ (80014ac <MX_GPIO_Init+0x168>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b45      	ldr	r3, [pc, #276]	@ (80014ac <MX_GPIO_Init+0x168>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a44      	ldr	r2, [pc, #272]	@ (80014ac <MX_GPIO_Init+0x168>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b42      	ldr	r3, [pc, #264]	@ (80014ac <MX_GPIO_Init+0x168>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b3e      	ldr	r3, [pc, #248]	@ (80014ac <MX_GPIO_Init+0x168>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a3d      	ldr	r2, [pc, #244]	@ (80014ac <MX_GPIO_Init+0x168>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b3b      	ldr	r3, [pc, #236]	@ (80014ac <MX_GPIO_Init+0x168>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <MX_GPIO_Init+0x168>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a36      	ldr	r2, [pc, #216]	@ (80014ac <MX_GPIO_Init+0x168>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <MX_GPIO_Init+0x168>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ec:	4830      	ldr	r0, [pc, #192]	@ (80014b0 <MX_GPIO_Init+0x16c>)
 80013ee:	f000 ffe5 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2110      	movs	r1, #16
 80013f6:	482f      	ldr	r0, [pc, #188]	@ (80014b4 <MX_GPIO_Init+0x170>)
 80013f8:	f000 ffe0 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80013fc:	2200      	movs	r2, #0
 80013fe:	f64f 4101 	movw	r1, #64513	@ 0xfc01
 8001402:	482d      	ldr	r0, [pc, #180]	@ (80014b8 <MX_GPIO_Init+0x174>)
 8001404:	f000 ffda 	bl	80023bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800140e:	482b      	ldr	r0, [pc, #172]	@ (80014bc <MX_GPIO_Init+0x178>)
 8001410:	f000 ffd4 	bl	80023bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4820      	ldr	r0, [pc, #128]	@ (80014b0 <MX_GPIO_Init+0x16c>)
 800142e:	f000 fe11 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001432:	2303      	movs	r3, #3
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	481b      	ldr	r0, [pc, #108]	@ (80014b4 <MX_GPIO_Init+0x170>)
 8001446:	f000 fe05 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144a:	2310      	movs	r3, #16
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4814      	ldr	r0, [pc, #80]	@ (80014b4 <MX_GPIO_Init+0x170>)
 8001462:	f000 fdf7 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001466:	f64f 4301 	movw	r3, #64513	@ 0xfc01
 800146a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	480e      	ldr	r0, [pc, #56]	@ (80014b8 <MX_GPIO_Init+0x174>)
 8001480:	f000 fde8 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001484:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001488:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	@ (80014bc <MX_GPIO_Init+0x178>)
 800149e:	f000 fdd9 	bl	8002054 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	@ 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40020c00 	.word	0x40020c00

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80014d6:	f107 020f 	add.w	r2, r7, #15
 80014da:	1df9      	adds	r1, r7, #7
 80014dc:	2364      	movs	r3, #100	@ 0x64
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	4804      	ldr	r0, [pc, #16]	@ (80014f4 <RC522_SPI_Transfer+0x28>)
 80014e4:	f001 fca5 	bl	8002e32 <HAL_SPI_TransmitReceive>

	return rx_data;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000006c 	.word	0x2000006c

080014f8 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <Write_MFRC522+0x48>)
 800150e:	f000 ff55 	bl	80023bc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffd4 	bl	80014cc <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ffd0 	bl	80014cc <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2110      	movs	r1, #16
 8001530:	4803      	ldr	r0, [pc, #12]	@ (8001540 <Write_MFRC522+0x48>)
 8001532:	f000 ff43 	bl	80023bc <HAL_GPIO_WritePin>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40020000 	.word	0x40020000

08001544 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2110      	movs	r1, #16
 8001552:	480f      	ldr	r0, [pc, #60]	@ (8001590 <Read_MFRC522+0x4c>)
 8001554:	f000 ff32 	bl	80023bc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	b25b      	sxtb	r3, r3
 800155e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001562:	b25b      	sxtb	r3, r3
 8001564:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001568:	b25b      	sxtb	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffad 	bl	80014cc <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff ffaa 	bl	80014cc <RC522_SPI_Transfer>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2110      	movs	r1, #16
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <Read_MFRC522+0x4c>)
 8001582:	f000 ff1b 	bl	80023bc <HAL_GPIO_WritePin>

	return val;
 8001586:	7bfb      	ldrb	r3, [r7, #15]

}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40020000 	.word	0x40020000

08001594 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	460a      	mov	r2, r1
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ffcc 	bl	8001544 <Read_MFRC522>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff9b 	bl	80014f8 <Write_MFRC522>
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	460a      	mov	r2, r1
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	4613      	mov	r3, r2
 80015d8:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ffb1 	bl	8001544 <Read_MFRC522>
 80015e2:	4603      	mov	r3, r0
 80015e4:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80015e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4013      	ands	r3, r2
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff7b 	bl	80014f8 <Write_MFRC522>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800160e:	2014      	movs	r0, #20
 8001610:	f7ff ff98 	bl	8001544 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001614:	2103      	movs	r1, #3
 8001616:	2014      	movs	r0, #20
 8001618:	f7ff ffbc 	bl	8001594 <SetBitMask>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001624:	210f      	movs	r1, #15
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff ff66 	bl	80014f8 <Write_MFRC522>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2110      	movs	r1, #16
 8001638:	4812      	ldr	r0, [pc, #72]	@ (8001684 <MFRC522_Init+0x54>)
 800163a:	f000 febf 	bl	80023bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2101      	movs	r1, #1
 8001642:	4811      	ldr	r0, [pc, #68]	@ (8001688 <MFRC522_Init+0x58>)
 8001644:	f000 feba 	bl	80023bc <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001648:	f7ff ffea 	bl	8001620 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800164c:	218d      	movs	r1, #141	@ 0x8d
 800164e:	202a      	movs	r0, #42	@ 0x2a
 8001650:	f7ff ff52 	bl	80014f8 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001654:	213e      	movs	r1, #62	@ 0x3e
 8001656:	202b      	movs	r0, #43	@ 0x2b
 8001658:	f7ff ff4e 	bl	80014f8 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 800165c:	211e      	movs	r1, #30
 800165e:	202d      	movs	r0, #45	@ 0x2d
 8001660:	f7ff ff4a 	bl	80014f8 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001664:	2100      	movs	r1, #0
 8001666:	202c      	movs	r0, #44	@ 0x2c
 8001668:	f7ff ff46 	bl	80014f8 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 800166c:	2140      	movs	r1, #64	@ 0x40
 800166e:	2015      	movs	r0, #21
 8001670:	f7ff ff42 	bl	80014f8 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001674:	213d      	movs	r1, #61	@ 0x3d
 8001676:	2011      	movs	r0, #17
 8001678:	f7ff ff3e 	bl	80014f8 <Write_MFRC522>

	AntennaOn();
 800167c:	f7ff ffc5 	bl	800160a <AntennaOn>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400

0800168c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	4613      	mov	r3, r2
 800169c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800169e:	2302      	movs	r3, #2
 80016a0:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 80016a2:	2300      	movs	r3, #0
 80016a4:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80016a6:	2300      	movs	r3, #0
 80016a8:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d006      	beq.n	80016be <MFRC522_ToCard+0x32>
 80016b0:	2b0e      	cmp	r3, #14
 80016b2:	d109      	bne.n	80016c8 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80016b4:	2312      	movs	r3, #18
 80016b6:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80016b8:	2310      	movs	r3, #16
 80016ba:	777b      	strb	r3, [r7, #29]
			break;
 80016bc:	e005      	b.n	80016ca <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80016be:	2377      	movs	r3, #119	@ 0x77
 80016c0:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80016c2:	2330      	movs	r3, #48	@ 0x30
 80016c4:	777b      	strb	r3, [r7, #29]
			break;
 80016c6:	e000      	b.n	80016ca <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80016c8:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80016ca:	7fbb      	ldrb	r3, [r7, #30]
 80016cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	2002      	movs	r0, #2
 80016d6:	f7ff ff0f 	bl	80014f8 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	2004      	movs	r0, #4
 80016de:	f7ff ff74 	bl	80015ca <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80016e2:	2180      	movs	r1, #128	@ 0x80
 80016e4:	200a      	movs	r0, #10
 80016e6:	f7ff ff55 	bl	8001594 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80016ea:	2100      	movs	r1, #0
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff ff03 	bl	80014f8 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	e00a      	b.n	800170e <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	2009      	movs	r0, #9
 8001704:	f7ff fef8 	bl	80014f8 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	3301      	adds	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3f0      	bcc.n	80016f8 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	4619      	mov	r1, r3
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff feec 	bl	80014f8 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2b0c      	cmp	r3, #12
 8001724:	d103      	bne.n	800172e <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001726:	2180      	movs	r1, #128	@ 0x80
 8001728:	200d      	movs	r0, #13
 800172a:	f7ff ff33 	bl	8001594 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800172e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001732:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001734:	2004      	movs	r0, #4
 8001736:	f7ff ff05 	bl	8001544 <Read_MFRC522>
 800173a:	4603      	mov	r3, r0
 800173c:	773b      	strb	r3, [r7, #28]
        i--;
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	3b01      	subs	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00a      	beq.n	8001760 <MFRC522_ToCard+0xd4>
 800174a:	7f3b      	ldrb	r3, [r7, #28]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <MFRC522_ToCard+0xd4>
 8001754:	7f3a      	ldrb	r2, [r7, #28]
 8001756:	7f7b      	ldrb	r3, [r7, #29]
 8001758:	4013      	ands	r3, r2
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0e9      	beq.n	8001734 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001760:	2180      	movs	r1, #128	@ 0x80
 8001762:	200d      	movs	r0, #13
 8001764:	f7ff ff31 	bl	80015ca <ClearBitMask>

    if (i != 0)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d052      	beq.n	8001814 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800176e:	2006      	movs	r0, #6
 8001770:	f7ff fee8 	bl	8001544 <Read_MFRC522>
 8001774:	4603      	mov	r3, r0
 8001776:	f003 031b 	and.w	r3, r3, #27
 800177a:	2b00      	cmp	r3, #0
 800177c:	d148      	bne.n	8001810 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001782:	7f3a      	ldrb	r2, [r7, #28]
 8001784:	7fbb      	ldrb	r3, [r7, #30]
 8001786:	4013      	ands	r3, r2
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8001792:	2301      	movs	r3, #1
 8001794:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d13b      	bne.n	8001814 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800179c:	200a      	movs	r0, #10
 800179e:	f7ff fed1 	bl	8001544 <Read_MFRC522>
 80017a2:	4603      	mov	r3, r0
 80017a4:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80017a6:	200c      	movs	r0, #12
 80017a8:	f7ff fecc 	bl	8001544 <Read_MFRC522>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d008      	beq.n	80017cc <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80017ba:	7f3b      	ldrb	r3, [r7, #28]
 80017bc:	3b01      	subs	r3, #1
 80017be:	00da      	lsls	r2, r3, #3
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	4413      	add	r3, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e004      	b.n	80017d6 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80017cc:	7f3b      	ldrb	r3, [r7, #28]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	461a      	mov	r2, r3
 80017d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d4:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80017d6:	7f3b      	ldrb	r3, [r7, #28]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <MFRC522_ToCard+0x154>
                {
					n = 1;
 80017dc:	2301      	movs	r3, #1
 80017de:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80017e0:	7f3b      	ldrb	r3, [r7, #28]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d901      	bls.n	80017ea <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80017e6:	2310      	movs	r3, #16
 80017e8:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	e00a      	b.n	8001806 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	18d4      	adds	r4, r2, r3
 80017f6:	2009      	movs	r0, #9
 80017f8:	f7ff fea4 	bl	8001544 <Read_MFRC522>
 80017fc:	4603      	mov	r3, r0
 80017fe:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	3301      	adds	r3, #1
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	7f3b      	ldrb	r3, [r7, #28]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3f0      	bcc.n	80017f0 <MFRC522_ToCard+0x164>
 800180e:	e001      	b.n	8001814 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8001810:	2302      	movs	r3, #2
 8001812:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8001814:	7ffb      	ldrb	r3, [r7, #31]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}

0800181e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af02      	add	r7, sp, #8
 8001824:	4603      	mov	r3, r0
 8001826:	6039      	str	r1, [r7, #0]
 8001828:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 800182a:	2107      	movs	r1, #7
 800182c:	200d      	movs	r0, #13
 800182e:	f7ff fe63 	bl	80014f8 <Write_MFRC522>

	TagType[0] = reqMode;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	79fa      	ldrb	r2, [r7, #7]
 8001836:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	6839      	ldr	r1, [r7, #0]
 8001844:	200c      	movs	r0, #12
 8001846:	f7ff ff21 	bl	800168c <MFRC522_ToCard>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <MFRC522_Request+0x3c>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b10      	cmp	r3, #16
 8001858:	d001      	beq.n	800185e <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 800185a:	2302      	movs	r3, #2
 800185c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af02      	add	r7, sp, #8
 800186e:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8001870:	2300      	movs	r3, #0
 8001872:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001874:	2100      	movs	r1, #0
 8001876:	200d      	movs	r0, #13
 8001878:	f7ff fe3e 	bl	80014f8 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2293      	movs	r2, #147	@ 0x93
 8001880:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3301      	adds	r3, #1
 8001886:	2220      	movs	r2, #32
 8001888:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	200c      	movs	r0, #12
 8001898:	f7ff fef8 	bl	800168c <MFRC522_ToCard>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d118      	bne.n	80018d8 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	73bb      	strb	r3, [r7, #14]
 80018aa:	e009      	b.n	80018c0 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	7b7b      	ldrb	r3, [r7, #13]
 80018b6:	4053      	eors	r3, r2
 80018b8:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80018ba:	7bbb      	ldrb	r3, [r7, #14]
 80018bc:	3301      	adds	r3, #1
 80018be:	73bb      	strb	r3, [r7, #14]
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d9f2      	bls.n	80018ac <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80018c6:	7bbb      	ldrb	r3, [r7, #14]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	7b7a      	ldrb	r2, [r7, #13]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80018d4:	2302      	movs	r3, #2
 80018d6:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <HAL_MspInit+0x4c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001930 <HAL_MspInit+0x4c>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <HAL_MspInit+0x4c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_MspInit+0x4c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4a08      	ldr	r2, [pc, #32]	@ (8001930 <HAL_MspInit+0x4c>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	@ 0x40
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_MspInit+0x4c>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	@ 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_SPI_MspInit+0x84>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d12b      	bne.n	80019ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <HAL_SPI_MspInit+0x88>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <HAL_SPI_MspInit+0x88>)
 8001960:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <HAL_SPI_MspInit+0x88>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_SPI_MspInit+0x88>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a10      	ldr	r2, [pc, #64]	@ (80019bc <HAL_SPI_MspInit+0x88>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <HAL_SPI_MspInit+0x88>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800198e:	23e0      	movs	r3, #224	@ 0xe0
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800199e:	2305      	movs	r3, #5
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <HAL_SPI_MspInit+0x8c>)
 80019aa:	f000 fb53 	bl	8002054 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	@ 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40013000 	.word	0x40013000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000

080019c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d4:	d10d      	bne.n	80019f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_TIM_Base_MspInit+0x3c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <HAL_TIM_Base_MspInit+0x3c>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_TIM_Base_MspInit+0x3c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a24:	d11e      	bne.n	8001a64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_TIM_MspPostInit+0x68>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a6c <HAL_TIM_MspPostInit+0x68>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <HAL_TIM_MspPostInit+0x68>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a54:	2301      	movs	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4804      	ldr	r0, [pc, #16]	@ (8001a70 <HAL_TIM_MspPostInit+0x6c>)
 8001a60:	f000 faf8 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b090      	sub	sp, #64	@ 0x40
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a74      	ldr	r2, [pc, #464]	@ (8001c64 <HAL_UART_MspInit+0x1f0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d12d      	bne.n	8001af2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a9a:	4b73      	ldr	r3, [pc, #460]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a72      	ldr	r2, [pc, #456]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001aa0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b70      	ldr	r3, [pc, #448]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a6b      	ldr	r2, [pc, #428]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b69      	ldr	r3, [pc, #420]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ace:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4860      	ldr	r0, [pc, #384]	@ (8001c6c <HAL_UART_MspInit+0x1f8>)
 8001aec:	f000 fab2 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af0:	e0b4      	b.n	8001c5c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==UART5)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a5e      	ldr	r2, [pc, #376]	@ (8001c70 <HAL_UART_MspInit+0x1fc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d14b      	bne.n	8001b94 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
 8001b00:	4b59      	ldr	r3, [pc, #356]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	4a58      	ldr	r2, [pc, #352]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001b06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0c:	4b56      	ldr	r3, [pc, #344]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	4b52      	ldr	r3, [pc, #328]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	4a51      	ldr	r2, [pc, #324]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b28:	4b4f      	ldr	r3, [pc, #316]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001b3e:	f043 0308 	orr.w	r3, r3, #8
 8001b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b44:	4b48      	ldr	r3, [pc, #288]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b62:	2308      	movs	r3, #8
 8001b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	483f      	ldr	r0, [pc, #252]	@ (8001c6c <HAL_UART_MspInit+0x1f8>)
 8001b6e:	f000 fa71 	bl	8002054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b72:	2304      	movs	r3, #4
 8001b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b82:	2308      	movs	r3, #8
 8001b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4839      	ldr	r0, [pc, #228]	@ (8001c74 <HAL_UART_MspInit+0x200>)
 8001b8e:	f000 fa61 	bl	8002054 <HAL_GPIO_Init>
}
 8001b92:	e063      	b.n	8001c5c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a37      	ldr	r2, [pc, #220]	@ (8001c78 <HAL_UART_MspInit+0x204>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d12d      	bne.n	8001bfa <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	4a30      	ldr	r2, [pc, #192]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001ba8:	f043 0310 	orr.w	r3, r3, #16
 8001bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bae:	4b2e      	ldr	r3, [pc, #184]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a29      	ldr	r2, [pc, #164]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bd6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001be8:	2307      	movs	r3, #7
 8001bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4822      	ldr	r0, [pc, #136]	@ (8001c7c <HAL_UART_MspInit+0x208>)
 8001bf4:	f000 fa2e 	bl	8002054 <HAL_GPIO_Init>
}
 8001bf8:	e030      	b.n	8001c5c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a20      	ldr	r2, [pc, #128]	@ (8001c80 <HAL_UART_MspInit+0x20c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d12b      	bne.n	8001c5c <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	4a16      	ldr	r2, [pc, #88]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	4a0f      	ldr	r2, [pc, #60]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <HAL_UART_MspInit+0x1f4>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c54:	4619      	mov	r1, r3
 8001c56:	4809      	ldr	r0, [pc, #36]	@ (8001c7c <HAL_UART_MspInit+0x208>)
 8001c58:	f000 f9fc 	bl	8002054 <HAL_GPIO_Init>
}
 8001c5c:	bf00      	nop
 8001c5e:	3740      	adds	r7, #64	@ 0x40
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40004c00 	.word	0x40004c00
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40005000 	.word	0x40005000
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40004400 	.word	0x40004400

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <NMI_Handler+0x4>

08001c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <HardFault_Handler+0x4>

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <MemManage_Handler+0x4>

08001c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cda:	f000 f891 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d40 <LoopFillZerobss+0xe>
 8001d0c:	f7ff ffea 	bl	8001ce4 <SystemInit>
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <LoopFillZerobss+0x12>)
 8001d12:	490d      	ldr	r1, [pc, #52]	@ (8001d48 <LoopFillZerobss+0x16>)
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <LoopFillZerobss+0x1a>)
 8001d16:	2300      	movs	r3, #0
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:
 8001d1a:	58d4      	ldr	r4, [r2, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:
 8001d20:	18c4      	adds	r4, r0, r3
 8001d22:	428c      	cmp	r4, r1
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <LoopFillZerobss+0x1e>)
 8001d28:	4c0a      	ldr	r4, [pc, #40]	@ (8001d54 <LoopFillZerobss+0x22>)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:
 8001d32:	42a2      	cmp	r2, r4
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>
 8001d36:	f002 fe3d 	bl	80049b4 <__libc_init_array>
 8001d3a:	f7ff f831 	bl	8000da0 <main>
 8001d3e:	4770      	bx	lr
 8001d40:	20020000 	.word	0x20020000
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000050 	.word	0x20000050
 8001d4c:	08004b4c 	.word	0x08004b4c
 8001d50:	20000050 	.word	0x20000050
 8001d54:	2000024c 	.word	0x2000024c

08001d58 <ADC_IRQHandler>:
 8001d58:	e7fe      	b.n	8001d58 <ADC_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <HAL_Init+0x40>)
 8001d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <HAL_Init+0x40>)
 8001d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <HAL_Init+0x40>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 f931 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f000 f808 	bl	8001da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fda8 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_InitTick+0x54>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_InitTick+0x58>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f93b 	bl	800203a <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f000 f911 	bl	8002002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	@ (8001dfc <HAL_InitTick+0x5c>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000044 	.word	0x20000044
 8001df8:	2000004c 	.word	0x2000004c
 8001dfc:	20000048 	.word	0x20000048

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	2000004c 	.word	0x2000004c
 8001e24:	20000248 	.word	0x20000248

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000248 	.word	0x20000248

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff ffee 	bl	8001e28 <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_Delay+0x44>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000004c 	.word	0x2000004c

08001e88 <__NVIC_SetPriorityGrouping>:
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_GetPriorityGrouping>:
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_SetPriority>:
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <SysTick_Config>:
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb8:	d301      	bcc.n	8001fbe <SysTick_Config+0x16>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <SysTick_Config+0x36>
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <SysTick_Config+0x40>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f7ff ff8e 	bl	8001eec <__NVIC_SetPriority>
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <SysTick_Config+0x40>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <SysTick_Config+0x40>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriorityGrouping>:
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff47 	bl	8001e88 <__NVIC_SetPriorityGrouping>
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SetPriority>:
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	f7ff ff5c 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 8002018:	6178      	str	r0, [r7, #20]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f7ff ff8e 	bl	8001f40 <NVIC_EncodePriority>
 8002024:	4602      	mov	r2, r0
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff5d 	bl	8001eec <__NVIC_SetPriority>
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_SYSTICK_Config>:
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffb0 	bl	8001fa8 <SysTick_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_GPIO_Init>:
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e16b      	b.n	8002348 <HAL_GPIO_Init+0x2f4>
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	f040 815a 	bne.w	8002342 <HAL_GPIO_Init+0x2ee>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d005      	beq.n	80020a6 <HAL_GPIO_Init+0x52>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d130      	bne.n	8002108 <HAL_GPIO_Init+0xb4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 0201 	and.w	r2, r3, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b03      	cmp	r3, #3
 8002112:	d017      	beq.n	8002144 <HAL_GPIO_Init+0xf0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d123      	bne.n	8002198 <HAL_GPIO_Init+0x144>
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	220f      	movs	r2, #15
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0203 	and.w	r2, r3, #3
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b4 	beq.w	8002342 <HAL_GPIO_Init+0x2ee>
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b60      	ldr	r3, [pc, #384]	@ (8002360 <HAL_GPIO_Init+0x30c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002360 <HAL_GPIO_Init+0x30c>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002360 <HAL_GPIO_Init+0x30c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002364 <HAL_GPIO_Init+0x310>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a52      	ldr	r2, [pc, #328]	@ (8002368 <HAL_GPIO_Init+0x314>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d02b      	beq.n	800227a <HAL_GPIO_Init+0x226>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a51      	ldr	r2, [pc, #324]	@ (800236c <HAL_GPIO_Init+0x318>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d025      	beq.n	8002276 <HAL_GPIO_Init+0x222>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a50      	ldr	r2, [pc, #320]	@ (8002370 <HAL_GPIO_Init+0x31c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01f      	beq.n	8002272 <HAL_GPIO_Init+0x21e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	@ (8002374 <HAL_GPIO_Init+0x320>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d019      	beq.n	800226e <HAL_GPIO_Init+0x21a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4e      	ldr	r2, [pc, #312]	@ (8002378 <HAL_GPIO_Init+0x324>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0x216>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4d      	ldr	r2, [pc, #308]	@ (800237c <HAL_GPIO_Init+0x328>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00d      	beq.n	8002266 <HAL_GPIO_Init+0x212>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4c      	ldr	r2, [pc, #304]	@ (8002380 <HAL_GPIO_Init+0x32c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <HAL_GPIO_Init+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	@ (8002384 <HAL_GPIO_Init+0x330>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_GPIO_Init+0x20a>
 800225a:	2307      	movs	r3, #7
 800225c:	e00e      	b.n	800227c <HAL_GPIO_Init+0x228>
 800225e:	2308      	movs	r3, #8
 8002260:	e00c      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002262:	2306      	movs	r3, #6
 8002264:	e00a      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002266:	2305      	movs	r3, #5
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x228>
 800226a:	2304      	movs	r3, #4
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x228>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x228>
 800227a:	2300      	movs	r3, #0
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	4935      	ldr	r1, [pc, #212]	@ (8002364 <HAL_GPIO_Init+0x310>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800229a:	4b3b      	ldr	r3, [pc, #236]	@ (8002388 <HAL_GPIO_Init+0x334>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x26a>
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	4a32      	ldr	r2, [pc, #200]	@ (8002388 <HAL_GPIO_Init+0x334>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]
 80022c4:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <HAL_GPIO_Init+0x334>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x294>
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	4a27      	ldr	r2, [pc, #156]	@ (8002388 <HAL_GPIO_Init+0x334>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]
 80022ee:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <HAL_GPIO_Init+0x334>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x2be>
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	4a1d      	ldr	r2, [pc, #116]	@ (8002388 <HAL_GPIO_Init+0x334>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6053      	str	r3, [r2, #4]
 8002318:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_GPIO_Init+0x334>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2e8>
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <HAL_GPIO_Init+0x334>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	f67f ae90 	bls.w	8002070 <HAL_GPIO_Init+0x1c>
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40013800 	.word	0x40013800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40021400 	.word	0x40021400
 8002380:	40021800 	.word	0x40021800
 8002384:	40021c00 	.word	0x40021c00
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_ReadPin>:
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_GPIO_ReadPin+0x1e>
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e001      	b.n	80023ae <HAL_GPIO_ReadPin+0x22>
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_GPIO_WritePin>:
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_RCC_OscConfig>:
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
 80023fe:	2301      	movs	r3, #1
 8002400:	e267      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d075      	beq.n	80024fa <HAL_RCC_OscConfig+0x10a>
 800240e:	4b88      	ldr	r3, [pc, #544]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b04      	cmp	r3, #4
 8002418:	d00c      	beq.n	8002434 <HAL_RCC_OscConfig+0x44>
 800241a:	4b85      	ldr	r3, [pc, #532]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d112      	bne.n	800244c <HAL_RCC_OscConfig+0x5c>
 8002426:	4b82      	ldr	r3, [pc, #520]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002432:	d10b      	bne.n	800244c <HAL_RCC_OscConfig+0x5c>
 8002434:	4b7e      	ldr	r3, [pc, #504]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d05b      	beq.n	80024f8 <HAL_RCC_OscConfig+0x108>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d157      	bne.n	80024f8 <HAL_RCC_OscConfig+0x108>
 8002448:	2301      	movs	r3, #1
 800244a:	e242      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002454:	d106      	bne.n	8002464 <HAL_RCC_OscConfig+0x74>
 8002456:	4b76      	ldr	r3, [pc, #472]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a75      	ldr	r2, [pc, #468]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xb0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x98>
 800246e:	4b70      	ldr	r3, [pc, #448]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6f      	ldr	r2, [pc, #444]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b6d      	ldr	r3, [pc, #436]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6c      	ldr	r2, [pc, #432]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xb0>
 8002488:	4b69      	ldr	r3, [pc, #420]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a68      	ldr	r2, [pc, #416]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b66      	ldr	r3, [pc, #408]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a65      	ldr	r2, [pc, #404]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe0>
 80024a8:	f7ff fcbe 	bl	8001e28 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xd2>
 80024b0:	f7ff fcba 	bl	8001e28 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xd2>
 80024be:	2303      	movs	r3, #3
 80024c0:	e207      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 80024c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xc0>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x10a>
 80024d0:	f7ff fcaa 	bl	8001e28 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xfa>
 80024d8:	f7ff fca6 	bl	8001e28 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	@ 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xfa>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1f3      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 80024ea:	4b51      	ldr	r3, [pc, #324]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0xe8>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x10a>
 80024f8:	bf00      	nop
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d063      	beq.n	80025ce <HAL_RCC_OscConfig+0x1de>
 8002506:	4b4a      	ldr	r3, [pc, #296]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x13a>
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x168>
 800251e:	4b44      	ldr	r3, [pc, #272]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x168>
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x152>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x152>
 800253e:	2301      	movs	r3, #1
 8002540:	e1c7      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002542:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4937      	ldr	r1, [pc, #220]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
 8002556:	e03a      	b.n	80025ce <HAL_RCC_OscConfig+0x1de>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1b2>
 8002560:	4b34      	ldr	r3, [pc, #208]	@ (8002634 <HAL_RCC_OscConfig+0x244>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f7ff fc5f 	bl	8001e28 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x190>
 800256e:	f7ff fc5b 	bl	8001e28 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x190>
 800257c:	2303      	movs	r3, #3
 800257e:	e1a8      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002580:	4b2b      	ldr	r3, [pc, #172]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x17e>
 800258c:	4b28      	ldr	r3, [pc, #160]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4925      	ldr	r1, [pc, #148]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x1de>
 80025a2:	4b24      	ldr	r3, [pc, #144]	@ (8002634 <HAL_RCC_OscConfig+0x244>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f7ff fc3e 	bl	8001e28 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1d2>
 80025b0:	f7ff fc3a 	bl	8001e28 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1d2>
 80025be:	2303      	movs	r3, #3
 80025c0:	e187      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 80025c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1c0>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x258>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCC_OscConfig+0x220>
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <HAL_RCC_OscConfig+0x248>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f7ff fc1e 	bl	8001e28 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x212>
 80025f0:	f7ff fc1a 	bl	8001e28 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x212>
 80025fe:	2303      	movs	r3, #3
 8002600:	e167      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_OscConfig+0x240>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x200>
 800260e:	e01b      	b.n	8002648 <HAL_RCC_OscConfig+0x258>
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_RCC_OscConfig+0x248>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	f7ff fc07 	bl	8001e28 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]
 800261c:	e00e      	b.n	800263c <HAL_RCC_OscConfig+0x24c>
 800261e:	f7ff fc03 	bl	8001e28 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d907      	bls.n	800263c <HAL_RCC_OscConfig+0x24c>
 800262c:	2303      	movs	r3, #3
 800262e:	e150      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002630:	40023800 	.word	0x40023800
 8002634:	42470000 	.word	0x42470000
 8002638:	42470e80 	.word	0x42470e80
 800263c:	4b88      	ldr	r3, [pc, #544]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ea      	bne.n	800261e <HAL_RCC_OscConfig+0x22e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8097 	beq.w	8002784 <HAL_RCC_OscConfig+0x394>
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
 800265a:	4b81      	ldr	r3, [pc, #516]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <HAL_RCC_OscConfig+0x296>
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b7d      	ldr	r3, [pc, #500]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	4a7c      	ldr	r2, [pc, #496]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	@ 0x40
 8002676:	4b7a      	ldr	r3, [pc, #488]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
 8002686:	4b77      	ldr	r3, [pc, #476]	@ (8002864 <HAL_RCC_OscConfig+0x474>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
 8002692:	4b74      	ldr	r3, [pc, #464]	@ (8002864 <HAL_RCC_OscConfig+0x474>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a73      	ldr	r2, [pc, #460]	@ (8002864 <HAL_RCC_OscConfig+0x474>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	f7ff fbc3 	bl	8001e28 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2c8>
 80026a6:	f7ff fbbf 	bl	8001e28 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2c8>
 80026b4:	2303      	movs	r3, #3
 80026b6:	e10c      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 80026b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002864 <HAL_RCC_OscConfig+0x474>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2b6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x2ea>
 80026cc:	4b64      	ldr	r3, [pc, #400]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d0:	4a63      	ldr	r2, [pc, #396]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d8:	e01c      	b.n	8002714 <HAL_RCC_OscConfig+0x324>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x30c>
 80026e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x324>
 80026fc:	4b58      	ldr	r3, [pc, #352]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	4a57      	ldr	r2, [pc, #348]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	@ 0x70
 8002708:	4b55      	ldr	r3, [pc, #340]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270c:	4a54      	ldr	r2, [pc, #336]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	@ 0x70
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCC_OscConfig+0x358>
 800271c:	f7ff fb84 	bl	8001e28 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x34a>
 8002724:	f7ff fb80 	bl	8001e28 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x34a>
 8002736:	2303      	movs	r3, #3
 8002738:	e0cb      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 800273a:	4b49      	ldr	r3, [pc, #292]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <HAL_RCC_OscConfig+0x334>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x382>
 8002748:	f7ff fb6e 	bl	8001e28 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x376>
 8002750:	f7ff fb6a 	bl	8001e28 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x376>
 8002762:	2303      	movs	r3, #3
 8002764:	e0b5      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002766:	4b3e      	ldr	r3, [pc, #248]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ee      	bne.n	8002750 <HAL_RCC_OscConfig+0x360>
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x394>
 8002778:	4b39      	ldr	r3, [pc, #228]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	4a38      	ldr	r2, [pc, #224]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002782:	6413      	str	r3, [r2, #64]	@ 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a1 	beq.w	80028d0 <HAL_RCC_OscConfig+0x4e0>
 800278e:	4b34      	ldr	r3, [pc, #208]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d05c      	beq.n	8002854 <HAL_RCC_OscConfig+0x464>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d141      	bne.n	8002826 <HAL_RCC_OscConfig+0x436>
 80027a2:	4b31      	ldr	r3, [pc, #196]	@ (8002868 <HAL_RCC_OscConfig+0x478>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f7ff fb3e 	bl	8001e28 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x3d2>
 80027b0:	f7ff fb3a 	bl	8001e28 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x3d2>
 80027be:	2303      	movs	r3, #3
 80027c0:	e087      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 80027c2:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	491b      	ldr	r1, [pc, #108]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
 80027f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <HAL_RCC_OscConfig+0x478>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f7ff fb13 	bl	8001e28 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x428>
 8002806:	f7ff fb0f 	bl	8001e28 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x428>
 8002814:	2303      	movs	r3, #3
 8002816:	e05c      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002818:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x416>
 8002824:	e054      	b.n	80028d0 <HAL_RCC_OscConfig+0x4e0>
 8002826:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <HAL_RCC_OscConfig+0x478>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f7ff fafc 	bl	8001e28 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x456>
 8002834:	f7ff faf8 	bl	8001e28 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x456>
 8002842:	2303      	movs	r3, #3
 8002844:	e045      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002846:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_RCC_OscConfig+0x470>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x444>
 8002852:	e03d      	b.n	80028d0 <HAL_RCC_OscConfig+0x4e0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_RCC_OscConfig+0x47c>
 800285c:	2301      	movs	r3, #1
 800285e:	e038      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002860:	40023800 	.word	0x40023800
 8002864:	40007000 	.word	0x40007000
 8002868:	42470060 	.word	0x42470060
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_OscConfig+0x4ec>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d028      	beq.n	80028cc <HAL_RCC_OscConfig+0x4dc>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	429a      	cmp	r2, r3
 8002886:	d121      	bne.n	80028cc <HAL_RCC_OscConfig+0x4dc>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	429a      	cmp	r2, r3
 8002894:	d11a      	bne.n	80028cc <HAL_RCC_OscConfig+0x4dc>
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028a2:	0192      	lsls	r2, r2, #6
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_RCC_OscConfig+0x4dc>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	3b01      	subs	r3, #1
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x4dc>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4e0>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 80028d0:	2300      	movs	r3, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800

080028e0 <HAL_RCC_ClockConfig>:
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x14>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0cc      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
 80028f4:	4b68      	ldr	r3, [pc, #416]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d90c      	bls.n	800291c <HAL_RCC_ClockConfig+0x3c>
 8002902:	4b65      	ldr	r3, [pc, #404]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	4b63      	ldr	r3, [pc, #396]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x3c>
 8002918:	2301      	movs	r3, #1
 800291a:	e0b8      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_ClockConfig+0x8a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x60>
 8002934:	4b59      	ldr	r3, [pc, #356]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a58      	ldr	r2, [pc, #352]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800293e:	6093      	str	r3, [r2, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x78>
 800294c:	4b53      	ldr	r3, [pc, #332]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a52      	ldr	r2, [pc, #328]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002956:	6093      	str	r3, [r2, #8]
 8002958:	4b50      	ldr	r3, [pc, #320]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	494d      	ldr	r1, [pc, #308]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d044      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x120>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xae>
 800297e:	4b47      	ldr	r3, [pc, #284]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d119      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
 800298a:	2301      	movs	r3, #1
 800298c:	e07f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d003      	beq.n	800299e <HAL_RCC_ClockConfig+0xbe>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xce>
 800299e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
 80029ae:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e067      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
 80029be:	4b37      	ldr	r3, [pc, #220]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4934      	ldr	r1, [pc, #208]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
 80029d0:	f7ff fa2a 	bl	8001e28 <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x10e>
 80029d8:	f7ff fa26 	bl	8001e28 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x10e>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e04f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
 80029ee:	4b2b      	ldr	r3, [pc, #172]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1eb      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xf8>
 8002a00:	4b25      	ldr	r3, [pc, #148]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d20c      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x148>
 8002a0e:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	4b20      	ldr	r3, [pc, #128]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x148>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e032      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x166>
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4916      	ldr	r1, [pc, #88]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x186>
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	490e      	ldr	r1, [pc, #56]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
 8002a66:	f000 f821 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	490a      	ldr	r1, [pc, #40]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	5ccb      	ldrb	r3, [r1, r3]
 8002a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7e:	4a09      	ldr	r2, [pc, #36]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f98a 	bl	8001da0 <HAL_InitTick>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023c00 	.word	0x40023c00
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	08004b24 	.word	0x08004b24
 8002aa4:	20000044 	.word	0x20000044
 8002aa8:	20000048 	.word	0x20000048

08002aac <HAL_RCC_GetSysClockFreq>:
 8002aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab0:	b094      	sub	sp, #80	@ 0x50
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ab8:	2300      	movs	r3, #0
 8002aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002abc:	2300      	movs	r3, #0
 8002abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ac4:	4b79      	ldr	r3, [pc, #484]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d00d      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x40>
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	f200 80e1 	bhi.w	8002c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ade:	e0db      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ae4:	e0db      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x1f2>
 8002ae6:	4b73      	ldr	r3, [pc, #460]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aea:	e0d8      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x1f2>
 8002aec:	4b6f      	ldr	r3, [pc, #444]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x200>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af6:	4b6d      	ldr	r3, [pc, #436]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x200>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d063      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x11e>
 8002b02:	4b6a      	ldr	r3, [pc, #424]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x200>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	2200      	movs	r2, #0
 8002b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b16:	2300      	movs	r3, #0
 8002b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b1e:	4622      	mov	r2, r4
 8002b20:	462b      	mov	r3, r5
 8002b22:	f04f 0000 	mov.w	r0, #0
 8002b26:	f04f 0100 	mov.w	r1, #0
 8002b2a:	0159      	lsls	r1, r3, #5
 8002b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b30:	0150      	lsls	r0, r2, #5
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4621      	mov	r1, r4
 8002b38:	1a51      	subs	r1, r2, r1
 8002b3a:	6139      	str	r1, [r7, #16]
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b50:	4659      	mov	r1, fp
 8002b52:	018b      	lsls	r3, r1, #6
 8002b54:	4651      	mov	r1, sl
 8002b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	018a      	lsls	r2, r1, #6
 8002b5e:	4651      	mov	r1, sl
 8002b60:	ebb2 0801 	subs.w	r8, r2, r1
 8002b64:	4659      	mov	r1, fp
 8002b66:	eb63 0901 	sbc.w	r9, r3, r1
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b7e:	4690      	mov	r8, r2
 8002b80:	4699      	mov	r9, r3
 8002b82:	4623      	mov	r3, r4
 8002b84:	eb18 0303 	adds.w	r3, r8, r3
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	462b      	mov	r3, r5
 8002b8c:	eb49 0303 	adc.w	r3, r9, r3
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	024b      	lsls	r3, r1, #9
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ba8:	4621      	mov	r1, r4
 8002baa:	024a      	lsls	r2, r1, #9
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bbc:	f7fd fb04 	bl	80001c8 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bc8:	e058      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x1d0>
 8002bca:	4b38      	ldr	r3, [pc, #224]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x200>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bda:	623b      	str	r3, [r7, #32]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	f04f 0000 	mov.w	r0, #0
 8002bec:	f04f 0100 	mov.w	r1, #0
 8002bf0:	0159      	lsls	r1, r3, #5
 8002bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf6:	0150      	lsls	r0, r2, #5
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c02:	4649      	mov	r1, r9
 8002c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c20:	eb63 050b 	sbc.w	r5, r3, fp
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	00eb      	lsls	r3, r5, #3
 8002c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c32:	00e2      	lsls	r2, r4, #3
 8002c34:	4614      	mov	r4, r2
 8002c36:	461d      	mov	r5, r3
 8002c38:	4643      	mov	r3, r8
 8002c3a:	18e3      	adds	r3, r4, r3
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	464b      	mov	r3, r9
 8002c40:	eb45 0303 	adc.w	r3, r5, r3
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c52:	4629      	mov	r1, r5
 8002c54:	028b      	lsls	r3, r1, #10
 8002c56:	4621      	mov	r1, r4
 8002c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	028a      	lsls	r2, r1, #10
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c66:	2200      	movs	r2, #0
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	61fa      	str	r2, [r7, #28]
 8002c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c70:	f7fd faaa 	bl	80001c8 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	3301      	adds	r3, #1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c96:	e002      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x1f2>
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9c:	bf00      	nop
 8002c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3750      	adds	r7, #80	@ 0x50
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	00f42400 	.word	0x00f42400
 8002cb4:	007a1200 	.word	0x007a1200

08002cb8 <HAL_RCC_GetHCLKFreq>:
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000044 	.word	0x20000044

08002cd0 <HAL_RCC_GetPCLK1Freq>:
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	f7ff fff0 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0a9b      	lsrs	r3, r3, #10
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4903      	ldr	r1, [pc, #12]	@ (8002cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	08004b34 	.word	0x08004b34

08002cf8 <HAL_RCC_GetPCLK2Freq>:
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	f7ff ffdc 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0b5b      	lsrs	r3, r3, #13
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4903      	ldr	r1, [pc, #12]	@ (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	08004b34 	.word	0x08004b34

08002d20 <HAL_SPI_Init>:
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_SPI_Init+0x12>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07b      	b.n	8002e2a <HAL_SPI_Init+0x10a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <HAL_SPI_Init+0x2c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d42:	d009      	beq.n	8002d58 <HAL_SPI_Init+0x38>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
 8002d4a:	e005      	b.n	8002d58 <HAL_SPI_Init+0x38>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_SPI_Init+0x58>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fdde 	bl	8001934 <HAL_SPI_MspInit>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ddc:	ea42 0103 	orr.w	r1, r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f003 0104 	and.w	r1, r3, #4
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	f003 0210 	and.w	r2, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e18:	61da      	str	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002e28:	2300      	movs	r3, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SPI_TransmitReceive>:
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b08a      	sub	sp, #40	@ 0x28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	2301      	movs	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e44:	f7fe fff0 	bl	8001e28 <HAL_GetTick>
 8002e48:	6238      	str	r0, [r7, #32]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e50:	77fb      	strb	r3, [r7, #31]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	82fb      	strh	r3, [r7, #22]
 8002e5c:	7ffb      	ldrb	r3, [r7, #31]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00c      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x4a>
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e68:	d106      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x46>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x46>
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d001      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x4a>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e17f      	b.n	800317c <HAL_SPI_TransmitReceive+0x34a>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_SPI_TransmitReceive+0x5c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_SPI_TransmitReceive+0x5c>
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x60>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e174      	b.n	800317c <HAL_SPI_TransmitReceive+0x34a>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_SPI_TransmitReceive+0x6e>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e16d      	b.n	800317c <HAL_SPI_TransmitReceive+0x34a>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d003      	beq.n	8002ebc <HAL_SPI_TransmitReceive+0x8a>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2205      	movs	r2, #5
 8002eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	887a      	ldrh	r2, [r7, #2]
 8002ed2:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	887a      	ldrh	r2, [r7, #2]
 8002ede:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	869a      	strh	r2, [r3, #52]	@ 0x34
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efc:	2b40      	cmp	r3, #64	@ 0x40
 8002efe:	d007      	beq.n	8002f10 <HAL_SPI_TransmitReceive+0xde>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f18:	d17e      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x1e6>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_SPI_TransmitReceive+0xf6>
 8002f22:	8afb      	ldrh	r3, [r7, #22]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d16c      	bne.n	8003002 <HAL_SPI_TransmitReceive+0x1d0>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f4c:	e059      	b.n	8003002 <HAL_SPI_TransmitReceive+0x1d0>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d11b      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x162>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x162>
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d113      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x162>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d119      	bne.n	8002fd6 <HAL_SPI_TransmitReceive+0x1a4>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d014      	beq.n	8002fd6 <HAL_SPI_TransmitReceive+0x1a4>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	801a      	strh	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbe:	1c9a      	adds	r2, r3, #2
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd6:	f7fe ff27 	bl	8001e28 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d80d      	bhi.n	8003002 <HAL_SPI_TransmitReceive+0x1d0>
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d009      	beq.n	8003002 <HAL_SPI_TransmitReceive+0x1d0>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0bc      	b.n	800317c <HAL_SPI_TransmitReceive+0x34a>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1a0      	bne.n	8002f4e <HAL_SPI_TransmitReceive+0x11c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d19b      	bne.n	8002f4e <HAL_SPI_TransmitReceive+0x11c>
 8003016:	e082      	b.n	800311e <HAL_SPI_TransmitReceive+0x2ec>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_SPI_TransmitReceive+0x1f4>
 8003020:	8afb      	ldrh	r3, [r7, #22]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d171      	bne.n	800310a <HAL_SPI_TransmitReceive+0x2d8>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	631a      	str	r2, [r3, #48]	@ 0x30
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800304c:	e05d      	b.n	800310a <HAL_SPI_TransmitReceive+0x2d8>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	d11c      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x264>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d017      	beq.n	8003096 <HAL_SPI_TransmitReceive+0x264>
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	2b01      	cmp	r3, #1
 800306a:	d114      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x264>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d119      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x2a6>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d014      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x2a6>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030d4:	2301      	movs	r3, #1
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d8:	f7fe fea6 	bl	8001e28 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d803      	bhi.n	80030f0 <HAL_SPI_TransmitReceive+0x2be>
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d102      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x2c4>
 80030f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_SPI_TransmitReceive+0x2d8>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003106:	2303      	movs	r3, #3
 8003108:	e038      	b.n	800317c <HAL_SPI_TransmitReceive+0x34a>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d19c      	bne.n	800304e <HAL_SPI_TransmitReceive+0x21c>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d197      	bne.n	800304e <HAL_SPI_TransmitReceive+0x21c>
 800311e:	6a3a      	ldr	r2, [r7, #32]
 8003120:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f8b6 	bl	8003294 <SPI_EndRxTxTransaction>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x30e>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800313c:	2301      	movs	r3, #1
 800313e:	e01d      	b.n	800317c <HAL_SPI_TransmitReceive+0x34a>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <HAL_SPI_TransmitReceive+0x32c>
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_SPI_TransmitReceive+0x348>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_SPI_TransmitReceive+0x34a>
 800317a:	2300      	movs	r3, #0
 800317c:	4618      	mov	r0, r3
 800317e:	3728      	adds	r7, #40	@ 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <SPI_WaitFlagStateUntilTimeout>:
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
 8003194:	f7fe fe48 	bl	8001e28 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	f7fe fe40 	bl	8001e28 <HAL_GetTick>
 80031a8:	61b8      	str	r0, [r7, #24]
 80031aa:	4b39      	ldr	r3, [pc, #228]	@ (8003290 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	015b      	lsls	r3, r3, #5
 80031b0:	0d1b      	lsrs	r3, r3, #20
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e054      	b.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c2:	d050      	beq.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80031c4:	f7fe fe30 	bl	8001e28 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d902      	bls.n	80031da <SPI_WaitFlagStateUntilTimeout+0x56>
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d13d      	bne.n	8003256 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031f2:	d111      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031fc:	d004      	beq.n	8003208 <SPI_WaitFlagStateUntilTimeout+0x84>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d107      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003220:	d10f      	bne.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003252:	2303      	movs	r3, #3
 8003254:	e017      	b.n	8003286 <SPI_WaitFlagStateUntilTimeout+0x102>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3b01      	subs	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	429a      	cmp	r2, r3
 8003282:	d19b      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x38>
 8003284:	2300      	movs	r3, #0
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000044 	.word	0x20000044

08003294 <SPI_EndRxTxTransaction>:
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2201      	movs	r2, #1
 80032a8:	2102      	movs	r1, #2
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff6a 	bl	8003184 <SPI_WaitFlagStateUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <SPI_EndRxTxTransaction+0x32>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80032c2:	2303      	movs	r3, #3
 80032c4:	e032      	b.n	800332c <SPI_EndRxTxTransaction+0x98>
 80032c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003334 <SPI_EndRxTxTransaction+0xa0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003338 <SPI_EndRxTxTransaction+0xa4>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	0d5b      	lsrs	r3, r3, #21
 80032d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032e4:	d112      	bne.n	800330c <SPI_EndRxTxTransaction+0x78>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	2180      	movs	r1, #128	@ 0x80
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff ff47 	bl	8003184 <SPI_WaitFlagStateUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <SPI_EndRxTxTransaction+0x96>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	655a      	str	r2, [r3, #84]	@ 0x54
 8003308:	2303      	movs	r3, #3
 800330a:	e00f      	b.n	800332c <SPI_EndRxTxTransaction+0x98>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <SPI_EndRxTxTransaction+0x94>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3b01      	subs	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	2b80      	cmp	r3, #128	@ 0x80
 8003324:	d0f2      	beq.n	800330c <SPI_EndRxTxTransaction+0x78>
 8003326:	e000      	b.n	800332a <SPI_EndRxTxTransaction+0x96>
 8003328:	bf00      	nop
 800332a:	2300      	movs	r3, #0
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000044 	.word	0x20000044
 8003338:	165e9f81 	.word	0x165e9f81

0800333c <HAL_TIM_Base_Init>:
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_TIM_Base_Init+0x12>
 800334a:	2301      	movs	r3, #1
 800334c:	e041      	b.n	80033d2 <HAL_TIM_Base_Init+0x96>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_TIM_Base_Init+0x2c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe fb2e 	bl	80019c4 <HAL_TIM_Base_MspInit>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f000 fad8 	bl	8003930 <TIM_Base_SetConfig>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80033d0:	2300      	movs	r3, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_TIM_PWM_Init>:
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_PWM_Init+0x12>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e041      	b.n	8003470 <HAL_TIM_PWM_Init+0x96>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <HAL_TIM_PWM_Init+0x2c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f839 	bl	8003478 <HAL_TIM_PWM_MspInit>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f000 fa89 	bl	8003930 <TIM_Base_SetConfig>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800346e:	2300      	movs	r3, #0
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIM_PWM_MspInit>:
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_PWM_Start>:
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <HAL_TIM_PWM_Start+0x24>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e022      	b.n	80034f6 <HAL_TIM_PWM_Start+0x6a>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d109      	bne.n	80034ca <HAL_TIM_PWM_Start+0x3e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	e015      	b.n	80034f6 <HAL_TIM_PWM_Start+0x6a>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d109      	bne.n	80034e4 <HAL_TIM_PWM_Start+0x58>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e008      	b.n	80034f6 <HAL_TIM_PWM_Start+0x6a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_TIM_PWM_Start+0x72>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e07c      	b.n	80035f8 <HAL_TIM_PWM_Start+0x16c>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <HAL_TIM_PWM_Start+0x82>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800350c:	e013      	b.n	8003536 <HAL_TIM_PWM_Start+0xaa>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d104      	bne.n	800351e <HAL_TIM_PWM_Start+0x92>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800351c:	e00b      	b.n	8003536 <HAL_TIM_PWM_Start+0xaa>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d104      	bne.n	800352e <HAL_TIM_PWM_Start+0xa2>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800352c:	e003      	b.n	8003536 <HAL_TIM_PWM_Start+0xaa>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2201      	movs	r2, #1
 800353c:	6839      	ldr	r1, [r7, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fcec 	bl	8003f1c <TIM_CCxChannelCmd>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2d      	ldr	r2, [pc, #180]	@ (8003600 <HAL_TIM_PWM_Start+0x174>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_TIM_PWM_Start+0xcc>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2c      	ldr	r2, [pc, #176]	@ (8003604 <HAL_TIM_PWM_Start+0x178>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_TIM_PWM_Start+0xd0>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_TIM_PWM_Start+0xd2>
 800355c:	2300      	movs	r3, #0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <HAL_TIM_PWM_Start+0xe6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a22      	ldr	r2, [pc, #136]	@ (8003600 <HAL_TIM_PWM_Start+0x174>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x136>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003584:	d01d      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x136>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1f      	ldr	r2, [pc, #124]	@ (8003608 <HAL_TIM_PWM_Start+0x17c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d018      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x136>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1d      	ldr	r2, [pc, #116]	@ (800360c <HAL_TIM_PWM_Start+0x180>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x136>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	@ (8003610 <HAL_TIM_PWM_Start+0x184>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00e      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x136>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a16      	ldr	r2, [pc, #88]	@ (8003604 <HAL_TIM_PWM_Start+0x178>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x136>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <HAL_TIM_PWM_Start+0x188>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x136>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <HAL_TIM_PWM_Start+0x18c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d111      	bne.n	80035e6 <HAL_TIM_PWM_Start+0x15a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b06      	cmp	r3, #6
 80035d2:	d010      	beq.n	80035f6 <HAL_TIM_PWM_Start+0x16a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e007      	b.n	80035f6 <HAL_TIM_PWM_Start+0x16a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	2300      	movs	r3, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40010000 	.word	0x40010000
 8003604:	40010400 	.word	0x40010400
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40014000 	.word	0x40014000
 8003618:	40001800 	.word	0x40001800

0800361c <HAL_TIM_PWM_ConfigChannel>:
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003636:	2302      	movs	r3, #2
 8003638:	e0ae      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b0c      	cmp	r3, #12
 8003646:	f200 809f 	bhi.w	8003788 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800364a:	a201      	add	r2, pc, #4	@ (adr r2, 8003650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003685 	.word	0x08003685
 8003654:	08003789 	.word	0x08003789
 8003658:	08003789 	.word	0x08003789
 800365c:	08003789 	.word	0x08003789
 8003660:	080036c5 	.word	0x080036c5
 8003664:	08003789 	.word	0x08003789
 8003668:	08003789 	.word	0x08003789
 800366c:	08003789 	.word	0x08003789
 8003670:	08003707 	.word	0x08003707
 8003674:	08003789 	.word	0x08003789
 8003678:	08003789 	.word	0x08003789
 800367c:	08003789 	.word	0x08003789
 8003680:	08003747 	.word	0x08003747
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f9fc 	bl	8003a88 <TIM_OC1_SetConfig>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0208 	orr.w	r2, r2, #8
 800369e:	619a      	str	r2, [r3, #24]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	619a      	str	r2, [r3, #24]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	619a      	str	r2, [r3, #24]
 80036c2:	e064      	b.n	800378e <HAL_TIM_PWM_ConfigChannel+0x172>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fa4c 	bl	8003b68 <TIM_OC2_SetConfig>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036de:	619a      	str	r2, [r3, #24]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ee:	619a      	str	r2, [r3, #24]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6999      	ldr	r1, [r3, #24]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	021a      	lsls	r2, r3, #8
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	619a      	str	r2, [r3, #24]
 8003704:	e043      	b.n	800378e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 faa1 	bl	8003c54 <TIM_OC3_SetConfig>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0208 	orr.w	r2, r2, #8
 8003720:	61da      	str	r2, [r3, #28]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0204 	bic.w	r2, r2, #4
 8003730:	61da      	str	r2, [r3, #28]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69d9      	ldr	r1, [r3, #28]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	61da      	str	r2, [r3, #28]
 8003744:	e023      	b.n	800378e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 faf5 	bl	8003d3c <TIM_OC4_SetConfig>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003760:	61da      	str	r2, [r3, #28]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003770:	61da      	str	r2, [r3, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69d9      	ldr	r1, [r3, #28]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	021a      	lsls	r2, r3, #8
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	61da      	str	r2, [r3, #28]
 8003786:	e002      	b.n	800378e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003788:	2301      	movs	r3, #1
 800378a:	75fb      	strb	r3, [r7, #23]
 800378c:	bf00      	nop
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_TIM_ConfigClockSource>:
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_TIM_ConfigClockSource+0x1c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e0b4      	b.n	8003926 <HAL_TIM_ConfigClockSource+0x186>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f4:	d03e      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0xd4>
 80037f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037fa:	f200 8087 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x16c>
 80037fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003802:	f000 8086 	beq.w	8003912 <HAL_TIM_ConfigClockSource+0x172>
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380a:	d87f      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b70      	cmp	r3, #112	@ 0x70
 800380e:	d01a      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0xa6>
 8003810:	2b70      	cmp	r3, #112	@ 0x70
 8003812:	d87b      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b60      	cmp	r3, #96	@ 0x60
 8003816:	d050      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x11a>
 8003818:	2b60      	cmp	r3, #96	@ 0x60
 800381a:	d877      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b50      	cmp	r3, #80	@ 0x50
 800381e:	d03c      	beq.n	800389a <HAL_TIM_ConfigClockSource+0xfa>
 8003820:	2b50      	cmp	r3, #80	@ 0x50
 8003822:	d873      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d058      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x13a>
 8003828:	2b40      	cmp	r3, #64	@ 0x40
 800382a:	d86f      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x16c>
 800382c:	2b30      	cmp	r3, #48	@ 0x30
 800382e:	d064      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x15a>
 8003830:	2b30      	cmp	r3, #48	@ 0x30
 8003832:	d86b      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b20      	cmp	r3, #32
 8003836:	d060      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x15a>
 8003838:	2b20      	cmp	r3, #32
 800383a:	d867      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d05c      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x15a>
 8003840:	2b10      	cmp	r3, #16
 8003842:	d05a      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x15a>
 8003844:	e062      	b.n	800390c <HAL_TIM_ConfigClockSource+0x16c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f000 fb41 	bl	8003edc <TIM_ETR_SetConfig>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	e04f      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x174>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	6899      	ldr	r1, [r3, #8]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f000 fb2a 	bl	8003edc <TIM_ETR_SetConfig>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	e03c      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x174>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f000 fa9e 	bl	8003de8 <TIM_TI1_ConfigInputStage>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2150      	movs	r1, #80	@ 0x50
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 faf7 	bl	8003ea6 <TIM_ITRx_SetConfig>
 80038b8:	e02c      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x174>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	461a      	mov	r2, r3
 80038c8:	f000 fabd 	bl	8003e46 <TIM_TI2_ConfigInputStage>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2160      	movs	r1, #96	@ 0x60
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fae7 	bl	8003ea6 <TIM_ITRx_SetConfig>
 80038d8:	e01c      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x174>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6859      	ldr	r1, [r3, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f000 fa7e 	bl	8003de8 <TIM_TI1_ConfigInputStage>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2140      	movs	r1, #64	@ 0x40
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fad7 	bl	8003ea6 <TIM_ITRx_SetConfig>
 80038f8:	e00c      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x174>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f000 face 	bl	8003ea6 <TIM_ITRx_SetConfig>
 800390a:	e003      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x174>
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	e000      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x174>
 8003912:	bf00      	nop
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <TIM_Base_SetConfig>:
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a46      	ldr	r2, [pc, #280]	@ (8003a5c <TIM_Base_SetConfig+0x12c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394e:	d00f      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a43      	ldr	r2, [pc, #268]	@ (8003a60 <TIM_Base_SetConfig+0x130>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00b      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a42      	ldr	r2, [pc, #264]	@ (8003a64 <TIM_Base_SetConfig+0x134>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a41      	ldr	r2, [pc, #260]	@ (8003a68 <TIM_Base_SetConfig+0x138>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a40      	ldr	r2, [pc, #256]	@ (8003a6c <TIM_Base_SetConfig+0x13c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d108      	bne.n	8003982 <TIM_Base_SetConfig+0x52>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a35      	ldr	r2, [pc, #212]	@ (8003a5c <TIM_Base_SetConfig+0x12c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02b      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003990:	d027      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a32      	ldr	r2, [pc, #200]	@ (8003a60 <TIM_Base_SetConfig+0x130>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d023      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a31      	ldr	r2, [pc, #196]	@ (8003a64 <TIM_Base_SetConfig+0x134>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01f      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a30      	ldr	r2, [pc, #192]	@ (8003a68 <TIM_Base_SetConfig+0x138>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01b      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2f      	ldr	r2, [pc, #188]	@ (8003a6c <TIM_Base_SetConfig+0x13c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d017      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003a70 <TIM_Base_SetConfig+0x140>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003a74 <TIM_Base_SetConfig+0x144>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00f      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a78 <TIM_Base_SetConfig+0x148>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a7c <TIM_Base_SetConfig+0x14c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a80 <TIM_Base_SetConfig+0x150>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a29      	ldr	r2, [pc, #164]	@ (8003a84 <TIM_Base_SetConfig+0x154>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d108      	bne.n	80039f4 <TIM_Base_SetConfig+0xc4>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a10      	ldr	r2, [pc, #64]	@ (8003a5c <TIM_Base_SetConfig+0x12c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0xf8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a12      	ldr	r2, [pc, #72]	@ (8003a6c <TIM_Base_SetConfig+0x13c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d103      	bne.n	8003a30 <TIM_Base_SetConfig+0x100>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	615a      	str	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <TIM_Base_SetConfig+0x11e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f023 0201 	bic.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	40010400 	.word	0x40010400
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800
 8003a7c:	40001800 	.word	0x40001800
 8003a80:	40001c00 	.word	0x40001c00
 8003a84:	40002000 	.word	0x40002000

08003a88 <TIM_OC1_SetConfig>:
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f023 0201 	bic.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	621a      	str	r2, [r3, #32]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 0302 	bic.w	r3, r3, #2
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a20      	ldr	r2, [pc, #128]	@ (8003b60 <TIM_OC1_SetConfig+0xd8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_OC1_SetConfig+0x64>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <TIM_OC1_SetConfig+0xdc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10c      	bne.n	8003b06 <TIM_OC1_SetConfig+0x7e>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0308 	bic.w	r3, r3, #8
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a15      	ldr	r2, [pc, #84]	@ (8003b60 <TIM_OC1_SetConfig+0xd8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_OC1_SetConfig+0x8e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <TIM_OC1_SetConfig+0xdc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d111      	bne.n	8003b3a <TIM_OC1_SetConfig+0xb2>
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	619a      	str	r2, [r3, #24]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	621a      	str	r2, [r3, #32]
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40010400 	.word	0x40010400

08003b68 <TIM_OC2_SetConfig>:
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 0210 	bic.w	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	621a      	str	r2, [r3, #32]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f023 0320 	bic.w	r3, r3, #32
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a22      	ldr	r2, [pc, #136]	@ (8003c4c <TIM_OC2_SetConfig+0xe4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC2_SetConfig+0x68>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a21      	ldr	r2, [pc, #132]	@ (8003c50 <TIM_OC2_SetConfig+0xe8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10d      	bne.n	8003bec <TIM_OC2_SetConfig+0x84>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a17      	ldr	r2, [pc, #92]	@ (8003c4c <TIM_OC2_SetConfig+0xe4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_OC2_SetConfig+0x94>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <TIM_OC2_SetConfig+0xe8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d113      	bne.n	8003c24 <TIM_OC2_SetConfig+0xbc>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	619a      	str	r2, [r3, #24]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010400 	.word	0x40010400

08003c54 <TIM_OC3_SetConfig>:
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	621a      	str	r2, [r3, #32]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a21      	ldr	r2, [pc, #132]	@ (8003d34 <TIM_OC3_SetConfig+0xe0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_OC3_SetConfig+0x66>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	@ (8003d38 <TIM_OC3_SetConfig+0xe4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10d      	bne.n	8003cd6 <TIM_OC3_SetConfig+0x82>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a16      	ldr	r2, [pc, #88]	@ (8003d34 <TIM_OC3_SetConfig+0xe0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_OC3_SetConfig+0x92>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a15      	ldr	r2, [pc, #84]	@ (8003d38 <TIM_OC3_SetConfig+0xe4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d113      	bne.n	8003d0e <TIM_OC3_SetConfig+0xba>
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	61da      	str	r2, [r3, #28]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	621a      	str	r2, [r3, #32]
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40010400 	.word	0x40010400

08003d3c <TIM_OC4_SetConfig>:
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	621a      	str	r2, [r3, #32]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a12      	ldr	r2, [pc, #72]	@ (8003de0 <TIM_OC4_SetConfig+0xa4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_OC4_SetConfig+0x68>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a11      	ldr	r2, [pc, #68]	@ (8003de4 <TIM_OC4_SetConfig+0xa8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d109      	bne.n	8003db8 <TIM_OC4_SetConfig+0x7c>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	61da      	str	r2, [r3, #28]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	641a      	str	r2, [r3, #64]	@ 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	621a      	str	r2, [r3, #32]
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40010400 	.word	0x40010400

08003de8 <TIM_TI1_ConfigInputStage>:
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 030a 	bic.w	r3, r3, #10
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	619a      	str	r2, [r3, #24]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <TIM_TI2_ConfigInputStage>:
 8003e46:	b480      	push	{r7}
 8003e48:	b087      	sub	sp, #28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f023 0210 	bic.w	r2, r3, #16
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	621a      	str	r2, [r3, #32]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	031b      	lsls	r3, r3, #12
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	619a      	str	r2, [r3, #24]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	621a      	str	r2, [r3, #32]
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <TIM_ITRx_SetConfig>:
 8003ea6:	b480      	push	{r7}
 8003ea8:	b085      	sub	sp, #20
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f043 0307 	orr.w	r3, r3, #7
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <TIM_ETR_SetConfig>:
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <TIM_CCxChannelCmd>:
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2201      	movs	r2, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	621a      	str	r2, [r3, #32]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_TIMEx_MasterConfigSynchronization>:
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e05a      	b.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a21      	ldr	r2, [pc, #132]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fcc:	d01d      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a15      	ldr	r2, [pc, #84]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d10c      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4313      	orrs	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004034:	2300      	movs	r3, #0
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	40000400 	.word	0x40000400
 800404c:	40000800 	.word	0x40000800
 8004050:	40000c00 	.word	0x40000c00
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40001800 	.word	0x40001800

08004060 <HAL_UART_Init>:
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_UART_Init+0x12>
 800406e:	2301      	movs	r3, #1
 8004070:	e042      	b.n	80040f8 <HAL_UART_Init+0x98>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_Init+0x2c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fcf4 	bl	8001a74 <HAL_UART_MspInit>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	@ 0x24
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040a2:	60da      	str	r2, [r3, #12]
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fa09 	bl	80044bc <UART_SetConfig>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040b8:	611a      	str	r2, [r3, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040c8:	615a      	str	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	645a      	str	r2, [r3, #68]	@ 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80040f6:	2300      	movs	r3, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_UART_Transmit>:
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	@ 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	80fb      	strh	r3, [r7, #6]
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b20      	cmp	r3, #32
 800411e:	d175      	bne.n	800420c <HAL_UART_Transmit+0x10c>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_Transmit+0x2c>
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_UART_Transmit+0x30>
 800412c:	2301      	movs	r3, #1
 800412e:	e06e      	b.n	800420e <HAL_UART_Transmit+0x10e>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2221      	movs	r2, #33	@ 0x21
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800413e:	f7fd fe73 	bl	8001e28 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	849a      	strh	r2, [r3, #36]	@ 0x24
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d108      	bne.n	800416c <HAL_UART_Transmit+0x6c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_UART_Transmit+0x6c>
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e003      	b.n	8004174 <HAL_UART_Transmit+0x74>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	e02e      	b.n	80041d4 <HAL_UART_Transmit+0xd4>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	@ 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f8df 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_UART_Transmit+0x98>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004194:	2303      	movs	r3, #3
 8004196:	e03a      	b.n	800420e <HAL_UART_Transmit+0x10e>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_UART_Transmit+0xb6>
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	3302      	adds	r3, #2
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	e007      	b.n	80041c6 <HAL_UART_Transmit+0xc6>
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	3301      	adds	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	84da      	strh	r2, [r3, #38]	@ 0x26
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1cb      	bne.n	8004176 <HAL_UART_Transmit+0x76>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2140      	movs	r1, #64	@ 0x40
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f8ab 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_UART_Transmit+0x100>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041fc:	2303      	movs	r3, #3
 80041fe:	e006      	b.n	800420e <HAL_UART_Transmit+0x10e>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <HAL_UART_Transmit+0x10e>
 800420c:	2302      	movs	r3, #2
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_UART_Receive>:
 8004216:	b580      	push	{r7, lr}
 8004218:	b08a      	sub	sp, #40	@ 0x28
 800421a:	af02      	add	r7, sp, #8
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b20      	cmp	r3, #32
 8004234:	f040 8081 	bne.w	800433a <HAL_UART_Receive+0x124>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Receive+0x2e>
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_UART_Receive+0x32>
 8004244:	2301      	movs	r3, #1
 8004246:	e079      	b.n	800433c <HAL_UART_Receive+0x126>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2222      	movs	r2, #34	@ 0x22
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30
 800425c:	f7fd fde4 	bl	8001e28 <HAL_GetTick>
 8004260:	6178      	str	r0, [r7, #20]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004276:	d108      	bne.n	800428a <HAL_UART_Receive+0x74>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <HAL_UART_Receive+0x74>
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e003      	b.n	8004292 <HAL_UART_Receive+0x7c>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e047      	b.n	8004324 <HAL_UART_Receive+0x10e>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	2120      	movs	r1, #32
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f850 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_UART_Receive+0xa0>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042b2:	2303      	movs	r3, #3
 80042b4:	e042      	b.n	800433c <HAL_UART_Receive+0x126>
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10c      	bne.n	80042d6 <HAL_UART_Receive+0xc0>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	3302      	adds	r3, #2
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	e01f      	b.n	8004316 <HAL_UART_Receive+0x100>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042de:	d007      	beq.n	80042f0 <HAL_UART_Receive+0xda>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <HAL_UART_Receive+0xe8>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_UART_Receive+0xe8>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e008      	b.n	8004310 <HAL_UART_Receive+0xfa>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430a:	b2da      	uxtb	r2, r3
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	3301      	adds	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1b2      	bne.n	8004294 <HAL_UART_Receive+0x7e>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004336:	2300      	movs	r3, #0
 8004338:	e000      	b.n	800433c <HAL_UART_Receive+0x126>
 800433a:	2302      	movs	r3, #2
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <UART_WaitOnFlagUntilTimeout>:
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	71fb      	strb	r3, [r7, #7]
 8004354:	e03b      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d037      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800435e:	f7fd fd63 	bl	8001e28 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	6a3a      	ldr	r2, [r7, #32]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <UART_WaitOnFlagUntilTimeout+0x30>
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x34>
 8004374:	2303      	movs	r3, #3
 8004376:	e03a      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xaa>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d023      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b80      	cmp	r3, #128	@ 0x80
 800438a:	d020      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	d01d      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b08      	cmp	r3, #8
 800439e:	d116      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f81d 	bl	80043f6 <UART_EndRxTransfer>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2208      	movs	r2, #8
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00f      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xaa>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4013      	ands	r3, r2
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d0b4      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0x12>
 80043ec:	2300      	movs	r3, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <UART_EndRxTransfer>:
 80043f6:	b480      	push	{r7}
 80043f8:	b095      	sub	sp, #84	@ 0x54
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	637b      	str	r3, [r7, #52]	@ 0x34
 8004406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	633b      	str	r3, [r7, #48]	@ 0x30
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004414:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800441e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004422:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_EndRxTransfer+0x8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	623b      	str	r3, [r7, #32]
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	64bb      	str	r3, [r7, #72]	@ 0x48
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004456:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_EndRxTransfer+0x3c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	2b01      	cmp	r3, #1
 800446c:	d119      	bne.n	80044a2 <UART_EndRxTransfer+0xac>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0310 	bic.w	r3, r3, #16
 8004484:	647b      	str	r3, [r7, #68]	@ 0x44
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800448e:	61ba      	str	r2, [r7, #24]
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	6979      	ldr	r1, [r7, #20]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_EndRxTransfer+0x78>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80044b0:	bf00      	nop
 80044b2:	3754      	adds	r7, #84	@ 0x54
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <UART_SetConfig>:
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b0c0      	sub	sp, #256	@ 0x100
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d8:	68d9      	ldr	r1, [r3, #12]
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	ea40 0301 	orr.w	r3, r0, r1
 80044e4:	6113      	str	r3, [r2, #16]
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004514:	f021 010c 	bic.w	r1, r1, #12
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004522:	430b      	orrs	r3, r1
 8004524:	60d3      	str	r3, [r2, #12]
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004536:	6999      	ldr	r1, [r3, #24]
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	ea40 0301 	orr.w	r3, r0, r1
 8004542:	6153      	str	r3, [r2, #20]
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b8f      	ldr	r3, [pc, #572]	@ (8004788 <UART_SetConfig+0x2cc>)
 800454c:	429a      	cmp	r2, r3
 800454e:	d005      	beq.n	800455c <UART_SetConfig+0xa0>
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4b8d      	ldr	r3, [pc, #564]	@ (800478c <UART_SetConfig+0x2d0>)
 8004558:	429a      	cmp	r2, r3
 800455a:	d104      	bne.n	8004566 <UART_SetConfig+0xaa>
 800455c:	f7fe fbcc 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8004560:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004564:	e003      	b.n	800456e <UART_SetConfig+0xb2>
 8004566:	f7fe fbb3 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 800456a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004578:	f040 810c 	bne.w	8004794 <UART_SetConfig+0x2d8>
 800457c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004586:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800458a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800458e:	4622      	mov	r2, r4
 8004590:	462b      	mov	r3, r5
 8004592:	1891      	adds	r1, r2, r2
 8004594:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004596:	415b      	adcs	r3, r3
 8004598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800459a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800459e:	4621      	mov	r1, r4
 80045a0:	eb12 0801 	adds.w	r8, r2, r1
 80045a4:	4629      	mov	r1, r5
 80045a6:	eb43 0901 	adc.w	r9, r3, r1
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045be:	4690      	mov	r8, r2
 80045c0:	4699      	mov	r9, r3
 80045c2:	4623      	mov	r3, r4
 80045c4:	eb18 0303 	adds.w	r3, r8, r3
 80045c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045cc:	462b      	mov	r3, r5
 80045ce:	eb49 0303 	adc.w	r3, r9, r3
 80045d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045ea:	460b      	mov	r3, r1
 80045ec:	18db      	adds	r3, r3, r3
 80045ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80045f0:	4613      	mov	r3, r2
 80045f2:	eb42 0303 	adc.w	r3, r2, r3
 80045f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80045f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004600:	f7fb fde2 	bl	80001c8 <__aeabi_uldivmod>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4b61      	ldr	r3, [pc, #388]	@ (8004790 <UART_SetConfig+0x2d4>)
 800460a:	fba3 2302 	umull	r2, r3, r3, r2
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	011c      	lsls	r4, r3, #4
 8004612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800461c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004620:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	1891      	adds	r1, r2, r2
 800462a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800462c:	415b      	adcs	r3, r3
 800462e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004630:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004634:	4641      	mov	r1, r8
 8004636:	eb12 0a01 	adds.w	sl, r2, r1
 800463a:	4649      	mov	r1, r9
 800463c:	eb43 0b01 	adc.w	fp, r3, r1
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800464c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004654:	4692      	mov	sl, r2
 8004656:	469b      	mov	fp, r3
 8004658:	4643      	mov	r3, r8
 800465a:	eb1a 0303 	adds.w	r3, sl, r3
 800465e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004662:	464b      	mov	r3, r9
 8004664:	eb4b 0303 	adc.w	r3, fp, r3
 8004668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004678:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800467c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004680:	460b      	mov	r3, r1
 8004682:	18db      	adds	r3, r3, r3
 8004684:	643b      	str	r3, [r7, #64]	@ 0x40
 8004686:	4613      	mov	r3, r2
 8004688:	eb42 0303 	adc.w	r3, r2, r3
 800468c:	647b      	str	r3, [r7, #68]	@ 0x44
 800468e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004692:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004696:	f7fb fd97 	bl	80001c8 <__aeabi_uldivmod>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4611      	mov	r1, r2
 80046a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004790 <UART_SetConfig+0x2d4>)
 80046a2:	fba3 2301 	umull	r2, r3, r3, r1
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	2264      	movs	r2, #100	@ 0x64
 80046aa:	fb02 f303 	mul.w	r3, r2, r3
 80046ae:	1acb      	subs	r3, r1, r3
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046b6:	4b36      	ldr	r3, [pc, #216]	@ (8004790 <UART_SetConfig+0x2d4>)
 80046b8:	fba3 2302 	umull	r2, r3, r3, r2
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046c4:	441c      	add	r4, r3
 80046c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046d8:	4642      	mov	r2, r8
 80046da:	464b      	mov	r3, r9
 80046dc:	1891      	adds	r1, r2, r2
 80046de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046e0:	415b      	adcs	r3, r3
 80046e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046e8:	4641      	mov	r1, r8
 80046ea:	1851      	adds	r1, r2, r1
 80046ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80046ee:	4649      	mov	r1, r9
 80046f0:	414b      	adcs	r3, r1
 80046f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004700:	4659      	mov	r1, fp
 8004702:	00cb      	lsls	r3, r1, #3
 8004704:	4651      	mov	r1, sl
 8004706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800470a:	4651      	mov	r1, sl
 800470c:	00ca      	lsls	r2, r1, #3
 800470e:	4610      	mov	r0, r2
 8004710:	4619      	mov	r1, r3
 8004712:	4603      	mov	r3, r0
 8004714:	4642      	mov	r2, r8
 8004716:	189b      	adds	r3, r3, r2
 8004718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800471c:	464b      	mov	r3, r9
 800471e:	460a      	mov	r2, r1
 8004720:	eb42 0303 	adc.w	r3, r2, r3
 8004724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004734:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800473c:	460b      	mov	r3, r1
 800473e:	18db      	adds	r3, r3, r3
 8004740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004742:	4613      	mov	r3, r2
 8004744:	eb42 0303 	adc.w	r3, r2, r3
 8004748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800474a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800474e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004752:	f7fb fd39 	bl	80001c8 <__aeabi_uldivmod>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <UART_SetConfig+0x2d4>)
 800475c:	fba3 1302 	umull	r1, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	2164      	movs	r1, #100	@ 0x64
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	3332      	adds	r3, #50	@ 0x32
 800476e:	4a08      	ldr	r2, [pc, #32]	@ (8004790 <UART_SetConfig+0x2d4>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	f003 0207 	and.w	r2, r3, #7
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4422      	add	r2, r4
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	e106      	b.n	8004994 <UART_SetConfig+0x4d8>
 8004786:	bf00      	nop
 8004788:	40011000 	.word	0x40011000
 800478c:	40011400 	.word	0x40011400
 8004790:	51eb851f 	.word	0x51eb851f
 8004794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004798:	2200      	movs	r2, #0
 800479a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800479e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047a6:	4642      	mov	r2, r8
 80047a8:	464b      	mov	r3, r9
 80047aa:	1891      	adds	r1, r2, r2
 80047ac:	6239      	str	r1, [r7, #32]
 80047ae:	415b      	adcs	r3, r3
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047b6:	4641      	mov	r1, r8
 80047b8:	1854      	adds	r4, r2, r1
 80047ba:	4649      	mov	r1, r9
 80047bc:	eb43 0501 	adc.w	r5, r3, r1
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	00eb      	lsls	r3, r5, #3
 80047ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ce:	00e2      	lsls	r2, r4, #3
 80047d0:	4614      	mov	r4, r2
 80047d2:	461d      	mov	r5, r3
 80047d4:	4643      	mov	r3, r8
 80047d6:	18e3      	adds	r3, r4, r3
 80047d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047dc:	464b      	mov	r3, r9
 80047de:	eb45 0303 	adc.w	r3, r5, r3
 80047e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004802:	4629      	mov	r1, r5
 8004804:	008b      	lsls	r3, r1, #2
 8004806:	4621      	mov	r1, r4
 8004808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800480c:	4621      	mov	r1, r4
 800480e:	008a      	lsls	r2, r1, #2
 8004810:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004814:	f7fb fcd8 	bl	80001c8 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4b60      	ldr	r3, [pc, #384]	@ (80049a0 <UART_SetConfig+0x4e4>)
 800481e:	fba3 2302 	umull	r2, r3, r3, r2
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	011c      	lsls	r4, r3, #4
 8004826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800482a:	2200      	movs	r2, #0
 800482c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004830:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004834:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004838:	4642      	mov	r2, r8
 800483a:	464b      	mov	r3, r9
 800483c:	1891      	adds	r1, r2, r2
 800483e:	61b9      	str	r1, [r7, #24]
 8004840:	415b      	adcs	r3, r3
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004848:	4641      	mov	r1, r8
 800484a:	1851      	adds	r1, r2, r1
 800484c:	6139      	str	r1, [r7, #16]
 800484e:	4649      	mov	r1, r9
 8004850:	414b      	adcs	r3, r1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004860:	4659      	mov	r1, fp
 8004862:	00cb      	lsls	r3, r1, #3
 8004864:	4651      	mov	r1, sl
 8004866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486a:	4651      	mov	r1, sl
 800486c:	00ca      	lsls	r2, r1, #3
 800486e:	4610      	mov	r0, r2
 8004870:	4619      	mov	r1, r3
 8004872:	4603      	mov	r3, r0
 8004874:	4642      	mov	r2, r8
 8004876:	189b      	adds	r3, r3, r2
 8004878:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800487c:	464b      	mov	r3, r9
 800487e:	460a      	mov	r2, r1
 8004880:	eb42 0303 	adc.w	r3, r2, r3
 8004884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004892:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048a0:	4649      	mov	r1, r9
 80048a2:	008b      	lsls	r3, r1, #2
 80048a4:	4641      	mov	r1, r8
 80048a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048aa:	4641      	mov	r1, r8
 80048ac:	008a      	lsls	r2, r1, #2
 80048ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048b2:	f7fb fc89 	bl	80001c8 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	4b38      	ldr	r3, [pc, #224]	@ (80049a0 <UART_SetConfig+0x4e4>)
 80048be:	fba3 2301 	umull	r2, r3, r3, r1
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2264      	movs	r2, #100	@ 0x64
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	1acb      	subs	r3, r1, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	@ 0x32
 80048d0:	4a33      	ldr	r2, [pc, #204]	@ (80049a0 <UART_SetConfig+0x4e4>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048dc:	441c      	add	r4, r3
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80048e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80048e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048ec:	4642      	mov	r2, r8
 80048ee:	464b      	mov	r3, r9
 80048f0:	1891      	adds	r1, r2, r2
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	415b      	adcs	r3, r3
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048fc:	4641      	mov	r1, r8
 80048fe:	1851      	adds	r1, r2, r1
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	4649      	mov	r1, r9
 8004904:	414b      	adcs	r3, r1
 8004906:	607b      	str	r3, [r7, #4]
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004914:	4659      	mov	r1, fp
 8004916:	00cb      	lsls	r3, r1, #3
 8004918:	4651      	mov	r1, sl
 800491a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800491e:	4651      	mov	r1, sl
 8004920:	00ca      	lsls	r2, r1, #3
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	4603      	mov	r3, r0
 8004928:	4642      	mov	r2, r8
 800492a:	189b      	adds	r3, r3, r2
 800492c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800492e:	464b      	mov	r3, r9
 8004930:	460a      	mov	r2, r1
 8004932:	eb42 0303 	adc.w	r3, r2, r3
 8004936:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	663b      	str	r3, [r7, #96]	@ 0x60
 8004942:	667a      	str	r2, [r7, #100]	@ 0x64
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004950:	4649      	mov	r1, r9
 8004952:	008b      	lsls	r3, r1, #2
 8004954:	4641      	mov	r1, r8
 8004956:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800495a:	4641      	mov	r1, r8
 800495c:	008a      	lsls	r2, r1, #2
 800495e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004962:	f7fb fc31 	bl	80001c8 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4b0d      	ldr	r3, [pc, #52]	@ (80049a0 <UART_SetConfig+0x4e4>)
 800496c:	fba3 1302 	umull	r1, r3, r3, r2
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	2164      	movs	r1, #100	@ 0x64
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	3332      	adds	r3, #50	@ 0x32
 800497e:	4a08      	ldr	r2, [pc, #32]	@ (80049a0 <UART_SetConfig+0x4e4>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	f003 020f 	and.w	r2, r3, #15
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4422      	add	r2, r4
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	bf00      	nop
 8004996:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800499a:	46bd      	mov	sp, r7
 800499c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a0:	51eb851f 	.word	0x51eb851f

080049a4 <memset>:
 80049a4:	4402      	add	r2, r0
 80049a6:	4603      	mov	r3, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	f803 1b01 	strb.w	r1, [r3], #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <__libc_init_array>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	4d0d      	ldr	r5, [pc, #52]	@ (80049ec <__libc_init_array+0x38>)
 80049b8:	4c0d      	ldr	r4, [pc, #52]	@ (80049f0 <__libc_init_array+0x3c>)
 80049ba:	1b64      	subs	r4, r4, r5
 80049bc:	10a4      	asrs	r4, r4, #2
 80049be:	2600      	movs	r6, #0
 80049c0:	42a6      	cmp	r6, r4
 80049c2:	d109      	bne.n	80049d8 <__libc_init_array+0x24>
 80049c4:	4d0b      	ldr	r5, [pc, #44]	@ (80049f4 <__libc_init_array+0x40>)
 80049c6:	4c0c      	ldr	r4, [pc, #48]	@ (80049f8 <__libc_init_array+0x44>)
 80049c8:	f000 f818 	bl	80049fc <_init>
 80049cc:	1b64      	subs	r4, r4, r5
 80049ce:	10a4      	asrs	r4, r4, #2
 80049d0:	2600      	movs	r6, #0
 80049d2:	42a6      	cmp	r6, r4
 80049d4:	d105      	bne.n	80049e2 <__libc_init_array+0x2e>
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
 80049d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049dc:	4798      	blx	r3
 80049de:	3601      	adds	r6, #1
 80049e0:	e7ee      	b.n	80049c0 <__libc_init_array+0xc>
 80049e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e6:	4798      	blx	r3
 80049e8:	3601      	adds	r6, #1
 80049ea:	e7f2      	b.n	80049d2 <__libc_init_array+0x1e>
 80049ec:	08004b44 	.word	0x08004b44
 80049f0:	08004b44 	.word	0x08004b44
 80049f4:	08004b44 	.word	0x08004b44
 80049f8:	08004b48 	.word	0x08004b48

080049fc <_init>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr

08004a08 <_fini>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr
