
STM32-fingure-print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003854  08003854  00004854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003974  08003974  00005050  2**0
                  CONTENTS
  4 .ARM          00000008  08003974  08003974  00004974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800397c  0800397c  00005050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800397c  0800397c  0000497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003980  08003980  00004980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08003984  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005050  2**0
                  CONTENTS
 10 .bss          00000144  20000050  20000050  00005050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  00005050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0ba  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a47  00000000  00000000  0001113a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00012b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e2  00000000  00000000  00013820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d07  00000000  00000000  00014202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd42  00000000  00000000  00034f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb0c9  00000000  00000000  00042c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010dd14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034f8  00000000  00000000  0010dd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00111250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800383c 	.word	0x0800383c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	0800383c 	.word	0x0800383c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LCD_Delay>:
void LCD_Delay(void);
void LCD_Write4Bits(uint8_t nb);
void LCD_PulseEnable(void);

void LCD_Delay(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  uint16_t i;
  for (i = 0; i < 1000; i++) {}
 80004be:	2300      	movs	r3, #0
 80004c0:	80fb      	strh	r3, [r7, #6]
 80004c2:	e002      	b.n	80004ca <LCD_Delay+0x12>
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	3301      	adds	r3, #1
 80004c8:	80fb      	strh	r3, [r7, #6]
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004d0:	d3f8      	bcc.n	80004c4 <LCD_Delay+0xc>
}
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <LCD_PulseEnable>:

void LCD_PulseEnable(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  EN_RESET();
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004ea:	480c      	ldr	r0, [pc, #48]	@ (800051c <LCD_PulseEnable+0x3c>)
 80004ec:	f001 fc22 	bl	8001d34 <HAL_GPIO_WritePin>
  LCD_Delay();
 80004f0:	f7ff ffe2 	bl	80004b8 <LCD_Delay>
  EN_SET();
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004fa:	4808      	ldr	r0, [pc, #32]	@ (800051c <LCD_PulseEnable+0x3c>)
 80004fc:	f001 fc1a 	bl	8001d34 <HAL_GPIO_WritePin>
  LCD_Delay();
 8000500:	f7ff ffda 	bl	80004b8 <LCD_Delay>
  EN_RESET();
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800050a:	4804      	ldr	r0, [pc, #16]	@ (800051c <LCD_PulseEnable+0x3c>)
 800050c:	f001 fc12 	bl	8001d34 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f001 f951 	bl	80017b8 <HAL_Delay>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400

08000520 <LCD_Write4Bits>:

void LCD_Write4Bits(uint8_t nb)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
  if (((nb >> 0) & 0x01) == 1) { D4_SET(); } else { D4_RESET(); }
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	2b00      	cmp	r3, #0
 8000532:	d006      	beq.n	8000542 <LCD_Write4Bits+0x22>
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800053a:	4826      	ldr	r0, [pc, #152]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800053c:	f001 fbfa 	bl	8001d34 <HAL_GPIO_WritePin>
 8000540:	e005      	b.n	800054e <LCD_Write4Bits+0x2e>
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000548:	4822      	ldr	r0, [pc, #136]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800054a:	f001 fbf3 	bl	8001d34 <HAL_GPIO_WritePin>
  if (((nb >> 1) & 0x01) == 1) { D5_SET(); } else { D5_RESET(); }
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	d006      	beq.n	800056a <LCD_Write4Bits+0x4a>
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000562:	481c      	ldr	r0, [pc, #112]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 8000564:	f001 fbe6 	bl	8001d34 <HAL_GPIO_WritePin>
 8000568:	e005      	b.n	8000576 <LCD_Write4Bits+0x56>
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000570:	4818      	ldr	r0, [pc, #96]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 8000572:	f001 fbdf 	bl	8001d34 <HAL_GPIO_WritePin>
  if (((nb >> 2) & 0x01) == 1) { D6_SET(); } else { D6_RESET(); }
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d006      	beq.n	8000592 <LCD_Write4Bits+0x72>
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058a:	4812      	ldr	r0, [pc, #72]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800058c:	f001 fbd2 	bl	8001d34 <HAL_GPIO_WritePin>
 8000590:	e005      	b.n	800059e <LCD_Write4Bits+0x7e>
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000598:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 800059a:	f001 fbcb 	bl	8001d34 <HAL_GPIO_WritePin>
  if (((nb >> 3) & 0x01) == 1) { D7_SET(); } else { D7_RESET(); }
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d006      	beq.n	80005ba <LCD_Write4Bits+0x9a>
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 80005b4:	f001 fbbe 	bl	8001d34 <HAL_GPIO_WritePin>
 80005b8:	e005      	b.n	80005c6 <LCD_Write4Bits+0xa6>
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <LCD_Write4Bits+0xb4>)
 80005c2:	f001 fbb7 	bl	8001d34 <HAL_GPIO_WritePin>
  LCD_PulseEnable();
 80005c6:	f7ff ff8b 	bl	80004e0 <LCD_PulseEnable>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020400 	.word	0x40020400

080005d8 <LCD_Command>:

void LCD_Command(uint8_t cmd)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  RS_RESET();
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e8:	4808      	ldr	r0, [pc, #32]	@ (800060c <LCD_Command+0x34>)
 80005ea:	f001 fba3 	bl	8001d34 <HAL_GPIO_WritePin>

  LCD_Write4Bits(cmd >> 4);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	091b      	lsrs	r3, r3, #4
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff93 	bl	8000520 <LCD_Write4Bits>
  LCD_Write4Bits(cmd);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff8f 	bl	8000520 <LCD_Write4Bits>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40020400 	.word	0x40020400

08000610 <LCD_Data>:

void LCD_Data(uint8_t dt)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  RS_SET();
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000620:	4808      	ldr	r0, [pc, #32]	@ (8000644 <LCD_Data+0x34>)
 8000622:	f001 fb87 	bl	8001d34 <HAL_GPIO_WritePin>
 
  LCD_Write4Bits(dt >> 4);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	091b      	lsrs	r3, r3, #4
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff77 	bl	8000520 <LCD_Write4Bits>
  LCD_Write4Bits(dt);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff73 	bl	8000520 <LCD_Write4Bits>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40020400 	.word	0x40020400

08000648 <LCD_Char>:

void LCD_Char(char chr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  LCD_Data((uint8_t) chr);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffdb 	bl	8000610 <LCD_Data>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <LCD_String>:

void LCD_String(char * str)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
  while (str[i] != 0)
 800066e:	e009      	b.n	8000684 <LCD_String+0x22>
  {
   LCD_Char(str[i]);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffe5 	bl	8000648 <LCD_Char>
   i++;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
  while (str[i] != 0)
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1ef      	bne.n	8000670 <LCD_String+0xe>
  }
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <LCD_SetPos>:

void LCD_SetPos(uint8_t x, uint8_t y)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
  uint8_t firstChar[] = {0x80, 0xC0, 0x94, 0xD4};
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <LCD_SetPos+0x34>)
 80006ae:	60fb      	str	r3, [r7, #12]
  LCD_Command(firstChar[y] + x);
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	3310      	adds	r3, #16
 80006b4:	443b      	add	r3, r7
 80006b6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4413      	add	r3, r2
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff89 	bl	80005d8 <LCD_Command>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	d494c080 	.word	0xd494c080

080006d4 <LCD_Clear>:

void LCD_Clear(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  LCD_Command(0x01);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff7d 	bl	80005d8 <LCD_Command>
  HAL_Delay(2);
 80006de:	2002      	movs	r0, #2
 80006e0:	f001 f86a 	bl	80017b8 <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <LCD_Init>:

void LCD_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80006ec:	2032      	movs	r0, #50	@ 0x32
 80006ee:	f001 f863 	bl	80017b8 <HAL_Delay>
  RS_RESET();
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f8:	4815      	ldr	r0, [pc, #84]	@ (8000750 <LCD_Init+0x68>)
 80006fa:	f001 fb1b 	bl	8001d34 <HAL_GPIO_WritePin>
  EN_RESET();
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <LCD_Init+0x68>)
 8000706:	f001 fb15 	bl	8001d34 <HAL_GPIO_WritePin>
 
  LCD_Write4Bits(0x03);
 800070a:	2003      	movs	r0, #3
 800070c:	f7ff ff08 	bl	8000520 <LCD_Write4Bits>
  HAL_Delay(5);
 8000710:	2005      	movs	r0, #5
 8000712:	f001 f851 	bl	80017b8 <HAL_Delay>
  LCD_Write4Bits(0x03);
 8000716:	2003      	movs	r0, #3
 8000718:	f7ff ff02 	bl	8000520 <LCD_Write4Bits>
  HAL_Delay(5);
 800071c:	2005      	movs	r0, #5
 800071e:	f001 f84b 	bl	80017b8 <HAL_Delay>
  LCD_Write4Bits(0x03);
 8000722:	2003      	movs	r0, #3
 8000724:	f7ff fefc 	bl	8000520 <LCD_Write4Bits>
  HAL_Delay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f001 f845 	bl	80017b8 <HAL_Delay>
  LCD_Write4Bits(0x02);
 800072e:	2002      	movs	r0, #2
 8000730:	f7ff fef6 	bl	8000520 <LCD_Write4Bits>
  LCD_Command(0x28);
 8000734:	2028      	movs	r0, #40	@ 0x28
 8000736:	f7ff ff4f 	bl	80005d8 <LCD_Command>
  LCD_Command(0x0C);
 800073a:	200c      	movs	r0, #12
 800073c:	f7ff ff4c 	bl	80005d8 <LCD_Command>
  LCD_Clear();
 8000740:	f7ff ffc8 	bl	80006d4 <LCD_Clear>
  LCD_Command(0x06);
 8000744:	2006      	movs	r0, #6
 8000746:	f7ff ff47 	bl	80005d8 <LCD_Command>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020400 	.word	0x40020400

08000754 <SendFPHeader>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendFPHeader()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPHeader,6,1000);
 8000758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075c:	2206      	movs	r2, #6
 800075e:	4903      	ldr	r1, [pc, #12]	@ (800076c <SendFPHeader+0x18>)
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <SendFPHeader+0x1c>)
 8000762:	f002 fbed 	bl	8002f40 <HAL_UART_Transmit>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	200000b4 	.word	0x200000b4

08000774 <SendFPGetImage>:

void SendFPGetImage()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	 HAL_UART_Transmit(&huart5,FPGetImage,6,1000);
 8000778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077c:	2206      	movs	r2, #6
 800077e:	4903      	ldr	r1, [pc, #12]	@ (800078c <SendFPGetImage+0x18>)
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <SendFPGetImage+0x1c>)
 8000782:	f002 fbdd 	bl	8002f40 <HAL_UART_Transmit>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	200000b4 	.word	0x200000b4

08000794 <SendFPCreateCharFile1>:

void SendFPCreateCharFile1()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateCharFile1,7,1000);
 8000798:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079c:	2207      	movs	r2, #7
 800079e:	4903      	ldr	r1, [pc, #12]	@ (80007ac <SendFPCreateCharFile1+0x18>)
 80007a0:	4803      	ldr	r0, [pc, #12]	@ (80007b0 <SendFPCreateCharFile1+0x1c>)
 80007a2:	f002 fbcd 	bl	8002f40 <HAL_UART_Transmit>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000010 	.word	0x20000010
 80007b0:	200000b4 	.word	0x200000b4

080007b4 <SendFPCreateCharFile2>:

void SendFPCreateCharFile2()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateCharFile2,7,1000);
 80007b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007bc:	2207      	movs	r2, #7
 80007be:	4903      	ldr	r1, [pc, #12]	@ (80007cc <SendFPCreateCharFile2+0x18>)
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <SendFPCreateCharFile2+0x1c>)
 80007c2:	f002 fbbd 	bl	8002f40 <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000018 	.word	0x20000018
 80007d0:	200000b4 	.word	0x200000b4

080007d4 <SendFPCreateTemplate>:

void SendFPCreateTemplate()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateTemplate,6,1000);
 80007d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007dc:	2206      	movs	r2, #6
 80007de:	4903      	ldr	r1, [pc, #12]	@ (80007ec <SendFPCreateTemplate+0x18>)
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <SendFPCreateTemplate+0x1c>)
 80007e2:	f002 fbad 	bl	8002f40 <HAL_UART_Transmit>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000020 	.word	0x20000020
 80007f0:	200000b4 	.word	0x200000b4

080007f4 <SendFPDeleteAllFinger>:

void SendFPDeleteAllFinger()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPDeleteAllFinger,6,1000);
 80007f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fc:	2206      	movs	r2, #6
 80007fe:	4903      	ldr	r1, [pc, #12]	@ (800080c <SendFPDeleteAllFinger+0x18>)
 8000800:	4803      	ldr	r0, [pc, #12]	@ (8000810 <SendFPDeleteAllFinger+0x1c>)
 8000802:	f002 fb9d 	bl	8002f40 <HAL_UART_Transmit>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000028 	.word	0x20000028
 8000810:	200000b4 	.word	0x200000b4

08000814 <SendFPDSearchFinger>:

void SendFPDSearchFinger()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPSearchFinger,11,1000);
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	220b      	movs	r2, #11
 800081e:	4903      	ldr	r1, [pc, #12]	@ (800082c <SendFPDSearchFinger+0x18>)
 8000820:	4803      	ldr	r0, [pc, #12]	@ (8000830 <SendFPDSearchFinger+0x1c>)
 8000822:	f002 fb8d 	bl	8002f40 <HAL_UART_Transmit>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000030 	.word	0x20000030
 8000830:	200000b4 	.word	0x200000b4

08000834 <SendFGetNumberOfFinger>:

void SendFGetNumberOfFinger()
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPGetNumberOfFinger,6,1000);
 8000838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083c:	2206      	movs	r2, #6
 800083e:	4903      	ldr	r1, [pc, #12]	@ (800084c <SendFGetNumberOfFinger+0x18>)
 8000840:	4803      	ldr	r0, [pc, #12]	@ (8000850 <SendFGetNumberOfFinger+0x1c>)
 8000842:	f002 fb7d 	bl	8002f40 <HAL_UART_Transmit>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000003c 	.word	0x2000003c
 8000850:	200000b4 	.word	0x200000b4

08000854 <SendStoreFinger>:

void SendStoreFinger(uint16_t IDStore)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
	uint16_t Sum=0;
 800085e:	2300      	movs	r3, #0
 8000860:	82fb      	strh	r3, [r7, #22]
	uint8_t DataSend[9]={0};
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	711a      	strb	r2, [r3, #4]

	DataSend[0]=0x01;
 8000870:	2301      	movs	r3, #1
 8000872:	733b      	strb	r3, [r7, #12]
	Sum=Sum+DataSend[0];
 8000874:	7b3b      	ldrb	r3, [r7, #12]
 8000876:	461a      	mov	r2, r3
 8000878:	8afb      	ldrh	r3, [r7, #22]
 800087a:	4413      	add	r3, r2
 800087c:	82fb      	strh	r3, [r7, #22]
	DataSend[1]=0x00;
 800087e:	2300      	movs	r3, #0
 8000880:	737b      	strb	r3, [r7, #13]
	Sum=Sum+DataSend[1];
 8000882:	7b7b      	ldrb	r3, [r7, #13]
 8000884:	461a      	mov	r2, r3
 8000886:	8afb      	ldrh	r3, [r7, #22]
 8000888:	4413      	add	r3, r2
 800088a:	82fb      	strh	r3, [r7, #22]
	DataSend[2]=0x06;
 800088c:	2306      	movs	r3, #6
 800088e:	73bb      	strb	r3, [r7, #14]
	Sum=Sum+DataSend[2];
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	8afb      	ldrh	r3, [r7, #22]
 8000896:	4413      	add	r3, r2
 8000898:	82fb      	strh	r3, [r7, #22]
	DataSend[3]=0x06;
 800089a:	2306      	movs	r3, #6
 800089c:	73fb      	strb	r3, [r7, #15]
	Sum=Sum+DataSend[3];
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	461a      	mov	r2, r3
 80008a2:	8afb      	ldrh	r3, [r7, #22]
 80008a4:	4413      	add	r3, r2
 80008a6:	82fb      	strh	r3, [r7, #22]
	DataSend[4]=0x01;
 80008a8:	2301      	movs	r3, #1
 80008aa:	743b      	strb	r3, [r7, #16]
	Sum=Sum+DataSend[4];
 80008ac:	7c3b      	ldrb	r3, [r7, #16]
 80008ae:	461a      	mov	r2, r3
 80008b0:	8afb      	ldrh	r3, [r7, #22]
 80008b2:	4413      	add	r3, r2
 80008b4:	82fb      	strh	r3, [r7, #22]
	DataSend[5]= (uint8_t)(IDStore>> 8);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	747b      	strb	r3, [r7, #17]
	Sum=Sum+DataSend[5];
 80008c0:	7c7b      	ldrb	r3, [r7, #17]
 80008c2:	461a      	mov	r2, r3
 80008c4:	8afb      	ldrh	r3, [r7, #22]
 80008c6:	4413      	add	r3, r2
 80008c8:	82fb      	strh	r3, [r7, #22]
	DataSend[6]=(uint8_t) (IDStore&0xFF);
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	74bb      	strb	r3, [r7, #18]
	Sum=Sum+DataSend[6];
 80008d0:	7cbb      	ldrb	r3, [r7, #18]
 80008d2:	461a      	mov	r2, r3
 80008d4:	8afb      	ldrh	r3, [r7, #22]
 80008d6:	4413      	add	r3, r2
 80008d8:	82fb      	strh	r3, [r7, #22]
  DataSend[7]=(uint8_t)(Sum>> 8);
 80008da:	8afb      	ldrh	r3, [r7, #22]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	74fb      	strb	r3, [r7, #19]
	DataSend[8]=(uint8_t)(Sum&0xFF);
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	753b      	strb	r3, [r7, #20]
	HAL_UART_Transmit(&huart5,DataSend,9,1000);
 80008ea:	f107 010c 	add.w	r1, r7, #12
 80008ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f2:	2209      	movs	r2, #9
 80008f4:	4803      	ldr	r0, [pc, #12]	@ (8000904 <SendStoreFinger+0xb0>)
 80008f6:	f002 fb23 	bl	8002f40 <HAL_UART_Transmit>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000b4 	.word	0x200000b4

08000908 <CheckFPRespsone>:




uint8_t CheckFPRespsone(uint8_t MaxRead)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	uint8_t ByteCount=0;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t FPRXData[20]={0xFF};
 8000918:	23ff      	movs	r3, #255	@ 0xff
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
	uint8_t UARTData[1]={0};
 800092a:	2300      	movs	r3, #0
 800092c:	733b      	strb	r3, [r7, #12]
	uint32_t TimeOut = HAL_GetTick();
 800092e:	f000 ff37 	bl	80017a0 <HAL_GetTick>
 8000932:	62b8      	str	r0, [r7, #40]	@ 0x28
	uint8_t Result;
	IDFromFinger=0xFF;
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <CheckFPRespsone+0xc0>)
 8000936:	22ff      	movs	r2, #255	@ 0xff
 8000938:	701a      	strb	r2, [r3, #0]
	while((HAL_GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 800093a:	e016      	b.n	800096a <CheckFPRespsone+0x62>
	{
	    if(HAL_UART_Receive(&huart5, (uint8_t *)UARTData, 1, 1000) == HAL_OK)
 800093c:	f107 010c 	add.w	r1, r7, #12
 8000940:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000944:	2201      	movs	r2, #1
 8000946:	4821      	ldr	r0, [pc, #132]	@ (80009cc <CheckFPRespsone+0xc4>)
 8000948:	f002 fb85 	bl	8003056 <HAL_UART_Receive>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10b      	bne.n	800096a <CheckFPRespsone+0x62>
			{
				FPRXData[ByteCount] = UARTData[0];
 8000952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000956:	7b3a      	ldrb	r2, [r7, #12]
 8000958:	3330      	adds	r3, #48	@ 0x30
 800095a:	443b      	add	r3, r7
 800095c:	f803 2c20 	strb.w	r2, [r3, #-32]
				ByteCount++;
 8000960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000964:	3301      	adds	r3, #1
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	while((HAL_GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 800096a:	f000 ff19 	bl	80017a0 <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000978:	d204      	bcs.n	8000984 <CheckFPRespsone+0x7c>
 800097a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3db      	bcc.n	800093c <CheckFPRespsone+0x34>
			}
	}

	if(ByteCount==0)
 8000984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <CheckFPRespsone+0x90>
	{
		//FPRXData[0]=0xEE;
		//FPRXData[1]=0xEE;
		//HAL_UART_Transmit(&huart2,FPRXData,2,1000);
		Result=FP_ERROR;
 800098c:	23fe      	movs	r3, #254	@ 0xfe
 800098e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		return Result;
 8000992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000996:	e012      	b.n	80009be <CheckFPRespsone+0xb6>
	}
	else if(ByteCount<MaxRead)
 8000998:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d205      	bcs.n	80009ae <CheckFPRespsone+0xa6>
	{
		Result=FP_ERROR;
 80009a2:	23fe      	movs	r3, #254	@ 0xfe
 80009a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		return Result;
 80009a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ac:	e007      	b.n	80009be <CheckFPRespsone+0xb6>
	}
	  else // vail data return
	{

		 Result=FPRXData[9];
 80009ae:	7e7b      	ldrb	r3, [r7, #25]
 80009b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		 IDFromFinger=FPRXData[11];
 80009b4:	7efa      	ldrb	r2, [r7, #27]
 80009b6:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <CheckFPRespsone+0xc0>)
 80009b8:	701a      	strb	r2, [r3, #0]
	   //HAL_UART_Transmit(&huart2,FPRXData,MaxRead,1000);
		 return Result;
 80009ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27

	}
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3730      	adds	r7, #48	@ 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000018c 	.word	0x2000018c
 80009cc:	200000b4 	.word	0x200000b4

080009d0 <GetNumberOfFinger>:

uint8_t GetNumberOfFinger()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	uint8_t Result;
	SendFPHeader();
 80009d6:	f7ff febd 	bl	8000754 <SendFPHeader>
	SendFGetNumberOfFinger();
 80009da:	f7ff ff2b 	bl	8000834 <SendFGetNumberOfFinger>
	Result=CheckFPRespsone(14);
 80009de:	200e      	movs	r0, #14
 80009e0:	f7ff ff92 	bl	8000908 <CheckFPRespsone>
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return 0xFF;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <GetNumberOfFinger+0x22>
 80009ee:	23ff      	movs	r3, #255	@ 0xff
 80009f0:	e001      	b.n	80009f6 <GetNumberOfFinger+0x26>

	return IDFromFinger;
 80009f2:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <GetNumberOfFinger+0x30>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000018c 	.word	0x2000018c

08000a04 <RegistryNewFinger>:




uint8_t RegistryNewFinger(uint16_t LocationID)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]

	uint8_t Result=FP_NOFINGER;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	73fb      	strb	r3, [r7, #15]
	uint32_t TimeOut = HAL_GetTick();
 8000a12:	f000 fec5 	bl	80017a0 <HAL_GetTick>
 8000a16:	60b8      	str	r0, [r7, #8]


	LCD_SetPos(0,1);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fe3e 	bl	800069c <LCD_SetPos>
	LCD_String("HAY DAT NGON TAY");
 8000a20:	4849      	ldr	r0, [pc, #292]	@ (8000b48 <RegistryNewFinger+0x144>)
 8000a22:	f7ff fe1e 	bl	8000662 <LCD_String>

	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000a26:	e008      	b.n	8000a3a <RegistryNewFinger+0x36>
	{

		SendFPHeader();
 8000a28:	f7ff fe94 	bl	8000754 <SendFPHeader>
		SendFPGetImage();
 8000a2c:	f7ff fea2 	bl	8000774 <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8000a30:	200c      	movs	r0, #12
 8000a32:	f7ff ff69 	bl	8000908 <CheckFPRespsone>
 8000a36:	4603      	mov	r3, r0
 8000a38:	73fb      	strb	r3, [r7, #15]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d108      	bne.n	8000a52 <RegistryNewFinger+0x4e>
 8000a40:	f000 feae 	bl	80017a0 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d9ea      	bls.n	8000a28 <RegistryNewFinger+0x24>
	}
	if(Result!=FP_OK) return FP_ERROR;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <RegistryNewFinger+0x58>
 8000a58:	23fe      	movs	r3, #254	@ 0xfe
 8000a5a:	e071      	b.n	8000b40 <RegistryNewFinger+0x13c>
	// continue if detect finger;
	SendFPHeader();
 8000a5c:	f7ff fe7a 	bl	8000754 <SendFPHeader>
	SendFPCreateCharFile1();
 8000a60:	f7ff fe98 	bl	8000794 <SendFPCreateCharFile1>
	Result=CheckFPRespsone(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff ff4f 	bl	8000908 <CheckFPRespsone>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	73fb      	strb	r3, [r7, #15]
	if(Result!=FP_OK) return FP_ERROR;
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <RegistryNewFinger+0x74>
 8000a74:	23fe      	movs	r3, #254	@ 0xfe
 8000a76:	e063      	b.n	8000b40 <RegistryNewFinger+0x13c>

	LCD_SetPos(0,1);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fe0e 	bl	800069c <LCD_SetPos>
	LCD_String(" HAY BO TAY RA  ");
 8000a80:	4832      	ldr	r0, [pc, #200]	@ (8000b4c <RegistryNewFinger+0x148>)
 8000a82:	f7ff fdee 	bl	8000662 <LCD_String>

	HAL_Delay(2000);
 8000a86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a8a:	f000 fe95 	bl	80017b8 <HAL_Delay>
	Result=FP_NOFINGER;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	73fb      	strb	r3, [r7, #15]
	TimeOut = HAL_GetTick();
 8000a92:	f000 fe85 	bl	80017a0 <HAL_GetTick>
 8000a96:	60b8      	str	r0, [r7, #8]
	LCD_SetPos(0,1);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fdfe 	bl	800069c <LCD_SetPos>
	LCD_String("DAT LAI NGON TAY");
 8000aa0:	482b      	ldr	r0, [pc, #172]	@ (8000b50 <RegistryNewFinger+0x14c>)
 8000aa2:	f7ff fdde 	bl	8000662 <LCD_String>

	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000aa6:	e008      	b.n	8000aba <RegistryNewFinger+0xb6>
	{

		SendFPHeader();
 8000aa8:	f7ff fe54 	bl	8000754 <SendFPHeader>
		SendFPGetImage();
 8000aac:	f7ff fe62 	bl	8000774 <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f7ff ff29 	bl	8000908 <CheckFPRespsone>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	73fb      	strb	r3, [r7, #15]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d108      	bne.n	8000ad2 <RegistryNewFinger+0xce>
 8000ac0:	f000 fe6e 	bl	80017a0 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d9ea      	bls.n	8000aa8 <RegistryNewFinger+0xa4>
	}
	if(Result!=FP_OK) return FP_ERROR;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <RegistryNewFinger+0xd8>
 8000ad8:	23fe      	movs	r3, #254	@ 0xfe
 8000ada:	e031      	b.n	8000b40 <RegistryNewFinger+0x13c>

	// continue if detect finger;
	SendFPHeader();
 8000adc:	f7ff fe3a 	bl	8000754 <SendFPHeader>
	SendFPCreateCharFile2();
 8000ae0:	f7ff fe68 	bl	80007b4 <SendFPCreateCharFile2>
	Result=CheckFPRespsone(12);
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f7ff ff0f 	bl	8000908 <CheckFPRespsone>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
	if(Result!=FP_OK) return FP_ERROR;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <RegistryNewFinger+0xf4>
 8000af4:	23fe      	movs	r3, #254	@ 0xfe
 8000af6:	e023      	b.n	8000b40 <RegistryNewFinger+0x13c>

	// Compare finger, create template
	SendFPHeader();
 8000af8:	f7ff fe2c 	bl	8000754 <SendFPHeader>
	SendFPCreateTemplate();
 8000afc:	f7ff fe6a 	bl	80007d4 <SendFPCreateTemplate>
	Result=CheckFPRespsone(12);
 8000b00:	200c      	movs	r0, #12
 8000b02:	f7ff ff01 	bl	8000908 <CheckFPRespsone>
 8000b06:	4603      	mov	r3, r0
 8000b08:	73fb      	strb	r3, [r7, #15]
	if(Result==FP_FINGER_NOTMATCH)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b0a      	cmp	r3, #10
 8000b0e:	d101      	bne.n	8000b14 <RegistryNewFinger+0x110>
	{

		return FP_FINGER_NOTMATCH;
 8000b10:	230a      	movs	r3, #10
 8000b12:	e015      	b.n	8000b40 <RegistryNewFinger+0x13c>
	}
	else if(Result!=FP_OK) return FP_ERROR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <RegistryNewFinger+0x11a>
 8000b1a:	23fe      	movs	r3, #254	@ 0xfe
 8000b1c:	e010      	b.n	8000b40 <RegistryNewFinger+0x13c>

	// save finger
	SendFPHeader();
 8000b1e:	f7ff fe19 	bl	8000754 <SendFPHeader>
	SendStoreFinger(LocationID);
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe95 	bl	8000854 <SendStoreFinger>
	Result=CheckFPRespsone(12);
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f7ff feec 	bl	8000908 <CheckFPRespsone>
 8000b30:	4603      	mov	r3, r0
 8000b32:	73fb      	strb	r3, [r7, #15]
	if(Result!=FP_OK) return FP_ERROR;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <RegistryNewFinger+0x13a>
 8000b3a:	23fe      	movs	r3, #254	@ 0xfe
 8000b3c:	e000      	b.n	8000b40 <RegistryNewFinger+0x13c>
	else
	{
		return FP_OK;
 8000b3e:	2300      	movs	r3, #0
	}

}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08003854 	.word	0x08003854
 8000b4c:	08003868 	.word	0x08003868
 8000b50:	0800387c 	.word	0x0800387c

08000b54 <CheckFinger>:

uint8_t CheckFinger()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	uint8_t Result=FP_NOFINGER;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	71fb      	strb	r3, [r7, #7]
	uint32_t TimeOut = HAL_GetTick();
 8000b5e:	f000 fe1f 	bl	80017a0 <HAL_GetTick>
 8000b62:	6038      	str	r0, [r7, #0]





	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)&&HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0) // time out is 5000 ms and no button press
 8000b64:	e008      	b.n	8000b78 <CheckFinger+0x24>
	{

		SendFPHeader();
 8000b66:	f7ff fdf5 	bl	8000754 <SendFPHeader>
		SendFPGetImage();
 8000b6a:	f7ff fe03 	bl	8000774 <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8000b6e:	200c      	movs	r0, #12
 8000b70:	f7ff feca 	bl	8000908 <CheckFPRespsone>
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut < 5000)&&HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0) // time out is 5000 ms and no button press
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d10f      	bne.n	8000b9e <CheckFinger+0x4a>
 8000b7e:	f000 fe0f 	bl	80017a0 <HAL_GetTick>
 8000b82:	4602      	mov	r2, r0
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d806      	bhi.n	8000b9e <CheckFinger+0x4a>
 8000b90:	2101      	movs	r1, #1
 8000b92:	4816      	ldr	r0, [pc, #88]	@ (8000bec <CheckFinger+0x98>)
 8000b94:	f001 f8b6 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0e3      	beq.n	8000b66 <CheckFinger+0x12>
	}
	if(Result==FP_NOFINGER)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d101      	bne.n	8000ba8 <CheckFinger+0x54>
	{

		return FP_NOFINGER;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e01c      	b.n	8000be2 <CheckFinger+0x8e>
	}
	if(Result!=FP_OK) return FP_ERROR;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <CheckFinger+0x5e>
 8000bae:	23fe      	movs	r3, #254	@ 0xfe
 8000bb0:	e017      	b.n	8000be2 <CheckFinger+0x8e>
	// continue if detect finger;
	SendFPHeader();
 8000bb2:	f7ff fdcf 	bl	8000754 <SendFPHeader>
	SendFPCreateCharFile1();
 8000bb6:	f7ff fded 	bl	8000794 <SendFPCreateCharFile1>
	Result=CheckFPRespsone(12);
 8000bba:	200c      	movs	r0, #12
 8000bbc:	f7ff fea4 	bl	8000908 <CheckFPRespsone>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return FP_ERROR;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <CheckFinger+0x7a>
 8000bca:	23fe      	movs	r3, #254	@ 0xfe
 8000bcc:	e009      	b.n	8000be2 <CheckFinger+0x8e>

	// Search Finger
	SendFPHeader();
 8000bce:	f7ff fdc1 	bl	8000754 <SendFPHeader>
	SendFPDSearchFinger();
 8000bd2:	f7ff fe1f 	bl	8000814 <SendFPDSearchFinger>
	Result=CheckFPRespsone(16);
 8000bd6:	2010      	movs	r0, #16
 8000bd8:	f7ff fe96 	bl	8000908 <CheckFPRespsone>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
	return Result;
 8000be0:	79fb      	ldrb	r3, [r7, #7]


}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020000 	.word	0x40020000

08000bf0 <ProcessRegistryNewFinger>:


uint8_t ProcessRegistryNewFinger()
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  uint8_t FingerResult;
  LCD_SetPos(0,1);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fd4f 	bl	800069c <LCD_SetPos>
  LCD_String("DANG KY VAN TAY ");
 8000bfe:	4832      	ldr	r0, [pc, #200]	@ (8000cc8 <ProcessRegistryNewFinger+0xd8>)
 8000c00:	f7ff fd2f 	bl	8000662 <LCD_String>

  HAL_Delay(1000);
 8000c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c08:	f000 fdd6 	bl	80017b8 <HAL_Delay>
  FingerResult=RegistryNewFinger(CurrentNumberFinger+1);
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fef5 	bl	8000a04 <RegistryNewFinger>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	if(FingerResult==FP_OK)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d123      	bne.n	8000c6c <ProcessRegistryNewFinger+0x7c>
	{
		LCD_SetPos(0,1);
 8000c24:	2101      	movs	r1, #1
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fd38 	bl	800069c <LCD_SetPos>
		LCD_String("DANG KY T.CONG  ");
 8000c2c:	4828      	ldr	r0, [pc, #160]	@ (8000cd0 <ProcessRegistryNewFinger+0xe0>)
 8000c2e:	f7ff fd18 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c36:	f000 fdbf 	bl	80017b8 <HAL_Delay>
		LCD_SetPos(0,1);
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fd2d 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000c42:	4824      	ldr	r0, [pc, #144]	@ (8000cd4 <ProcessRegistryNewFinger+0xe4>)
 8000c44:	f7ff fd0d 	bl	8000662 <LCD_String>
		CurrentNumberFinger++;
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c52:	701a      	strb	r2, [r3, #0]
		if(CurrentNumberFinger==100) CurrentNumberFinger=1;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b64      	cmp	r3, #100	@ 0x64
 8000c5a:	d102      	bne.n	8000c62 <ProcessRegistryNewFinger+0x72>
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <ProcessRegistryNewFinger+0xdc>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1500);
 8000c62:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c66:	f000 fda7 	bl	80017b8 <HAL_Delay>
 8000c6a:	e027      	b.n	8000cbc <ProcessRegistryNewFinger+0xcc>
	}
	else if(FingerResult==FP_FINGER_NOTMATCH)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b0a      	cmp	r3, #10
 8000c70:	d112      	bne.n	8000c98 <ProcessRegistryNewFinger+0xa8>
	{
		LCD_SetPos(0,1);
 8000c72:	2101      	movs	r1, #1
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fd11 	bl	800069c <LCD_SetPos>
		LCD_String("2 VT KHONG KHOP ");
 8000c7a:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <ProcessRegistryNewFinger+0xe8>)
 8000c7c:	f7ff fcf1 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000c80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c84:	f000 fd98 	bl	80017b8 <HAL_Delay>
		LCD_SetPos(0,1);
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fd06 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000c90:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <ProcessRegistryNewFinger+0xe4>)
 8000c92:	f7ff fce6 	bl	8000662 <LCD_String>
 8000c96:	e011      	b.n	8000cbc <ProcessRegistryNewFinger+0xcc>
	}
	else
	{
		LCD_SetPos(0,1);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fcfe 	bl	800069c <LCD_SetPos>
		LCD_String(" CO LOI XAY RA  ");
 8000ca0:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <ProcessRegistryNewFinger+0xec>)
 8000ca2:	f7ff fcde 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000ca6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000caa:	f000 fd85 	bl	80017b8 <HAL_Delay>
		LCD_SetPos(0,1);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fcf3 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000cb6:	4807      	ldr	r0, [pc, #28]	@ (8000cd4 <ProcessRegistryNewFinger+0xe4>)
 8000cb8:	f7ff fcd3 	bl	8000662 <LCD_String>

	}
	return FingerResult;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	08003890 	.word	0x08003890
 8000ccc:	2000018d 	.word	0x2000018d
 8000cd0:	080038a4 	.word	0x080038a4
 8000cd4:	080038b8 	.word	0x080038b8
 8000cd8:	080038cc 	.word	0x080038cc
 8000cdc:	080038e0 	.word	0x080038e0

08000ce0 <DeleteAllFinger>:

void DeleteAllFinger()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

	uint8_t FingerResult;
	SendFPHeader();
 8000ce6:	f7ff fd35 	bl	8000754 <SendFPHeader>
	SendFPDeleteAllFinger();
 8000cea:	f7ff fd83 	bl	80007f4 <SendFPDeleteAllFinger>
	FingerResult=CheckFPRespsone(12);
 8000cee:	200c      	movs	r0, #12
 8000cf0:	f7ff fe0a 	bl	8000908 <CheckFPRespsone>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
	if(FingerResult==FP_OK)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d115      	bne.n	8000d2a <DeleteAllFinger+0x4a>
	{
		LCD_SetPos(0,1);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fccb 	bl	800069c <LCD_SetPos>
		LCD_String(" DA XOA VAN TAY ");
 8000d06:	4814      	ldr	r0, [pc, #80]	@ (8000d58 <DeleteAllFinger+0x78>)
 8000d08:	f7ff fcab 	bl	8000662 <LCD_String>
		HAL_Delay(1500);
 8000d0c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d10:	f000 fd52 	bl	80017b8 <HAL_Delay>
		LCD_SetPos(0,1);
 8000d14:	2101      	movs	r1, #1
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fcc0 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000d1c:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <DeleteAllFinger+0x7c>)
 8000d1e:	f7ff fca0 	bl	8000662 <LCD_String>
		CurrentNumberFinger=0;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <DeleteAllFinger+0x80>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1500);
		LCD_SetPos(0,1);
		LCD_String("                ");
	}

}
 8000d28:	e011      	b.n	8000d4e <DeleteAllFinger+0x6e>
		LCD_SetPos(0,1);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fcb5 	bl	800069c <LCD_SetPos>
		LCD_String(" CO LOI XAY RA  ");
 8000d32:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <DeleteAllFinger+0x84>)
 8000d34:	f7ff fc95 	bl	8000662 <LCD_String>
		HAL_Delay(1500);
 8000d38:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d3c:	f000 fd3c 	bl	80017b8 <HAL_Delay>
		LCD_SetPos(0,1);
 8000d40:	2101      	movs	r1, #1
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fcaa 	bl	800069c <LCD_SetPos>
		LCD_String("                ");
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <DeleteAllFinger+0x7c>)
 8000d4a:	f7ff fc8a 	bl	8000662 <LCD_String>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	080038f4 	.word	0x080038f4
 8000d5c:	080038b8 	.word	0x080038b8
 8000d60:	2000018d 	.word	0x2000018d
 8000d64:	080038e0 	.word	0x080038e0

08000d68 <Delay_us>:


void Delay_us(uint32_t TimeDelay)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint32_t TimeCount;
	for(TimeCount=0;TimeCount<TimeDelay;TimeCount++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	e005      	b.n	8000d82 <Delay_us+0x1a>
	{
		__ASM volatile ("NOP");
 8000d76:	bf00      	nop
		__ASM volatile ("NOP");
 8000d78:	bf00      	nop
		__ASM volatile ("NOP");
 8000d7a:	bf00      	nop
	for(TimeCount=0;TimeCount<TimeDelay;TimeCount++)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3f5      	bcc.n	8000d76 <Delay_us+0xe>
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SetServoAngle>:

void SetServoAngle(uint8_t angle)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	if (angle > 180) angle = 180;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2bb4      	cmp	r3, #180	@ 0xb4
 8000da6:	d901      	bls.n	8000dac <SetServoAngle+0x14>
 8000da8:	23b4      	movs	r3, #180	@ 0xb4
 8000daa:	71fb      	strb	r3, [r7, #7]
	uint32_t pulse_length = ((angle * (2000 - 1000)) / 180) + 1000;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <SetServoAngle+0x48>)
 8000db8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbc:	441a      	add	r2, r3
 8000dbe:	11d2      	asrs	r2, r2, #7
 8000dc0:	17db      	asrs	r3, r3, #31
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000dc8:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_length);
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <SetServoAngle+0x4c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	b60b60b7 	.word	0xb60b60b7
 8000de4:	2000006c 	.word	0x2000006c

08000de8 <CloseDoor>:

void CloseDoor()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
//	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
//	  Delay_us(1000);
//	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
	SetServoAngle(0); // Close door (0 degrees)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ffd3 	bl	8000d98 <SetServoAngle>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <OpenDoor>:

void OpenDoor()
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
//	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
//	  Delay_us(2100);
//	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
	SetServoAngle(90); // Open door (90 degrees)
 8000dfa:	205a      	movs	r0, #90	@ 0x5a
 8000dfc:	f7ff ffcc 	bl	8000d98 <SetServoAngle>
	Delay_us(2100);
 8000e00:	f640 0034 	movw	r0, #2100	@ 0x834
 8000e04:	f7ff ffb0 	bl	8000d68 <Delay_us>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 fc5f 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f8b5 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f9e7 	bl	80011ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e1e:	f000 f991 	bl	8001144 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e22:	f000 f9b9 	bl	8001198 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8000e26:	f000 f963 	bl	80010f0 <MX_UART5_Init>
  MX_TIM3_Init();
 8000e2a:	f000 f907 	bl	800103c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000e2e:	f7ff fc5b 	bl	80006e8 <LCD_Init>
  LCD_SetPos(0,0);
 8000e32:	2100      	movs	r1, #0
 8000e34:	2000      	movs	r0, #0
 8000e36:	f7ff fc31 	bl	800069c <LCD_SetPos>
  LCD_String("  HT VAN TAY");
 8000e3a:	484a      	ldr	r0, [pc, #296]	@ (8000f64 <main+0x158>)
 8000e3c:	f7ff fc11 	bl	8000662 <LCD_String>


  HAL_Delay(1000);
 8000e40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e44:	f000 fcb8 	bl	80017b8 <HAL_Delay>

  OpenDoor(); // need to active motor
 8000e48:	f7ff ffd5 	bl	8000df6 <OpenDoor>
  HAL_Delay(500);
 8000e4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e50:	f000 fcb2 	bl	80017b8 <HAL_Delay>
  CloseDoor();
 8000e54:	f7ff ffc8 	bl	8000de8 <CloseDoor>
  HAL_Delay(500);
 8000e58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e5c:	f000 fcac 	bl	80017b8 <HAL_Delay>
  OpenDoor();
 8000e60:	f7ff ffc9 	bl	8000df6 <OpenDoor>
  HAL_Delay(500);
 8000e64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e68:	f000 fca6 	bl	80017b8 <HAL_Delay>
  CloseDoor();
 8000e6c:	f7ff ffbc 	bl	8000de8 <CloseDoor>
  CurrentNumberFinger=GetNumberOfFinger();
 8000e70:	f7ff fdae 	bl	80009d0 <GetNumberOfFinger>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b3b      	ldr	r3, [pc, #236]	@ (8000f68 <main+0x15c>)
 8000e7a:	701a      	strb	r2, [r3, #0]
  if(CurrentNumberFinger>100)
 8000e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f68 <main+0x15c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b64      	cmp	r3, #100	@ 0x64
 8000e82:	d902      	bls.n	8000e8a <main+0x7e>
  {
	CurrentNumberFinger=1;
 8000e84:	4b38      	ldr	r3, [pc, #224]	@ (8000f68 <main+0x15c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
  }

	 LCD_SetPos(0,1);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff fc05 	bl	800069c <LCD_SetPos>
	 LCD_String("   SANG SANG    ");
 8000e92:	4836      	ldr	r0, [pc, #216]	@ (8000f6c <main+0x160>)
 8000e94:	f7ff fbe5 	bl	8000662 <LCD_String>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000e98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e9c:	4834      	ldr	r0, [pc, #208]	@ (8000f70 <main+0x164>)
 8000e9e:	f000 ff62 	bl	8001d66 <HAL_GPIO_TogglePin>
	FingerResult=CheckFinger();
 8000ea2:	f7ff fe57 	bl	8000b54 <CheckFinger>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
    if(FingerResult==FP_OK)
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d116      	bne.n	8000ede <main+0xd2>
	{
		OpenDoor();
 8000eb0:	f7ff ffa1 	bl	8000df6 <OpenDoor>
		LCD_SetPos(0,1);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fbf0 	bl	800069c <LCD_SetPos>
		LCD_String("   DANG MO CUA ");
 8000ebc:	482d      	ldr	r0, [pc, #180]	@ (8000f74 <main+0x168>)
 8000ebe:	f7ff fbd0 	bl	8000662 <LCD_String>

		HAL_Delay(3000);
 8000ec2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ec6:	f000 fc77 	bl	80017b8 <HAL_Delay>
		CloseDoor();
 8000eca:	f7ff ff8d 	bl	8000de8 <CloseDoor>
		LCD_SetPos(0,1);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fbe3 	bl	800069c <LCD_SetPos>
		LCD_String("               ");
 8000ed6:	4828      	ldr	r0, [pc, #160]	@ (8000f78 <main+0x16c>)
 8000ed8:	f7ff fbc3 	bl	8000662 <LCD_String>
 8000edc:	e014      	b.n	8000f08 <main+0xfc>
	}
	else if(FingerResult==FP_FINGER_NOTFOUND)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d111      	bne.n	8000f08 <main+0xfc>
	{
		LCD_SetPos(0,1);
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fbd8 	bl	800069c <LCD_SetPos>
		LCD_String("VT KHONG HOP LE");
 8000eec:	4823      	ldr	r0, [pc, #140]	@ (8000f7c <main+0x170>)
 8000eee:	f7ff fbb8 	bl	8000662 <LCD_String>
		HAL_Delay(1000);
 8000ef2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ef6:	f000 fc5f 	bl	80017b8 <HAL_Delay>
		LCD_SetPos(0,1);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fbcd 	bl	800069c <LCD_SetPos>
		LCD_String("               ");
 8000f02:	481d      	ldr	r0, [pc, #116]	@ (8000f78 <main+0x16c>)
 8000f04:	f7ff fbad 	bl	8000662 <LCD_String>
	}

	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	481d      	ldr	r0, [pc, #116]	@ (8000f80 <main+0x174>)
 8000f0c:	f000 fefa 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d121      	bne.n	8000f5a <main+0x14e>
	{
		TimeCount = HAL_GetTick();
 8000f16:	f000 fc43 	bl	80017a0 <HAL_GetTick>
 8000f1a:	6038      	str	r0, [r7, #0]
		while(HAL_GetTick()-TimeCount<3000&&HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1) // check hold button in 3 second to erase
 8000f1c:	bf00      	nop
 8000f1e:	f000 fc3f 	bl	80017a0 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d806      	bhi.n	8000f3e <main+0x132>
 8000f30:	2101      	movs	r1, #1
 8000f32:	4813      	ldr	r0, [pc, #76]	@ (8000f80 <main+0x174>)
 8000f34:	f000 fee6 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d0ef      	beq.n	8000f1e <main+0x112>
		{}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1) // still hold button
 8000f3e:	2101      	movs	r1, #1
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <main+0x174>)
 8000f42:	f000 fedf 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d102      	bne.n	8000f52 <main+0x146>
		{
			DeleteAllFinger();
 8000f4c:	f7ff fec8 	bl	8000ce0 <DeleteAllFinger>
 8000f50:	e003      	b.n	8000f5a <main+0x14e>
		}
		else
		{
			FingerResult=ProcessRegistryNewFinger();
 8000f52:	f7ff fe4d 	bl	8000bf0 <ProcessRegistryNewFinger>
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
		}

	}
	HAL_Delay(1000);
 8000f5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f5e:	f000 fc2b 	bl	80017b8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000f62:	e799      	b.n	8000e98 <main+0x8c>
 8000f64:	08003908 	.word	0x08003908
 8000f68:	2000018d 	.word	0x2000018d
 8000f6c:	08003918 	.word	0x08003918
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	0800392c 	.word	0x0800392c
 8000f78:	0800393c 	.word	0x0800393c
 8000f7c:	0800394c 	.word	0x0800394c
 8000f80:	40020000 	.word	0x40020000

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b094      	sub	sp, #80	@ 0x50
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0320 	add.w	r3, r7, #32
 8000f8e:	2230      	movs	r2, #48	@ 0x30
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fc26 	bl	80037e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <SystemClock_Config+0xb0>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	4a20      	ldr	r2, [pc, #128]	@ (8001034 <SystemClock_Config+0xb0>)
 8000fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <SystemClock_Config+0xb0>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <SystemClock_Config+0xb4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001038 <SystemClock_Config+0xb4>)
 8000fce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <SystemClock_Config+0xb4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fed2 	bl	8001d9c <HAL_RCC_OscConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ffe:	f000 f99f 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001006:	2301      	movs	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f001 f935 	bl	800228c <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001028:	f000 f98a 	bl	8001340 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3750      	adds	r7, #80	@ 0x50
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800105e:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <MX_TIM3_Init+0xac>)
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <MX_TIM3_Init+0xb0>)
 8001062:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <MX_TIM3_Init+0xac>)
 8001066:	2253      	movs	r2, #83	@ 0x53
 8001068:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <MX_TIM3_Init+0xac>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <MX_TIM3_Init+0xac>)
 8001072:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001076:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <MX_TIM3_Init+0xac>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_TIM3_Init+0xac>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001084:	4818      	ldr	r0, [pc, #96]	@ (80010e8 <MX_TIM3_Init+0xac>)
 8001086:	f001 fb21 	bl	80026cc <HAL_TIM_PWM_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 f956 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	4619      	mov	r1, r3
 80010a2:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <MX_TIM3_Init+0xac>)
 80010a4:	f001 fe80 	bl	8002da8 <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80010ae:	f000 f947 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b2:	2360      	movs	r3, #96	@ 0x60
 80010b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80010b6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <MX_TIM3_Init+0xac>)
 80010cc:	f001 fb4e 	bl	800276c <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80010d6:	f000 f933 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010da:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <MX_TIM3_Init+0xac>)
 80010dc:	f000 f980 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	@ 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000006c 	.word	0x2000006c
 80010ec:	40000400 	.word	0x40000400

080010f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_UART5_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <MX_UART5_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_UART5_Init+0x4c>)
 80010fc:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001100:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_UART5_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_UART5_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_UART5_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_UART5_Init+0x4c>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_UART5_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_UART5_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_UART5_Init+0x4c>)
 8001128:	f001 feba 	bl	8002ea0 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001132:	f000 f905 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000b4 	.word	0x200000b4
 8001140:	40005000 	.word	0x40005000

08001144 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <MX_USART1_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001150:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 800117c:	f001 fe90 	bl	8002ea0 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 f8db 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000fc 	.word	0x200000fc
 8001194:	40011000 	.word	0x40011000

08001198 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <MX_USART2_UART_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011d0:	f001 fe66 	bl	8002ea0 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011da:	f000 f8b1 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000144 	.word	0x20000144
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b49      	ldr	r3, [pc, #292]	@ (800132c <MX_GPIO_Init+0x140>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a48      	ldr	r2, [pc, #288]	@ (800132c <MX_GPIO_Init+0x140>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b46      	ldr	r3, [pc, #280]	@ (800132c <MX_GPIO_Init+0x140>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b42      	ldr	r3, [pc, #264]	@ (800132c <MX_GPIO_Init+0x140>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a41      	ldr	r2, [pc, #260]	@ (800132c <MX_GPIO_Init+0x140>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b3f      	ldr	r3, [pc, #252]	@ (800132c <MX_GPIO_Init+0x140>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <MX_GPIO_Init+0x140>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a3a      	ldr	r2, [pc, #232]	@ (800132c <MX_GPIO_Init+0x140>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b38      	ldr	r3, [pc, #224]	@ (800132c <MX_GPIO_Init+0x140>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b34      	ldr	r3, [pc, #208]	@ (800132c <MX_GPIO_Init+0x140>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a33      	ldr	r2, [pc, #204]	@ (800132c <MX_GPIO_Init+0x140>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b31      	ldr	r3, [pc, #196]	@ (800132c <MX_GPIO_Init+0x140>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b2d      	ldr	r3, [pc, #180]	@ (800132c <MX_GPIO_Init+0x140>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a2c      	ldr	r2, [pc, #176]	@ (800132c <MX_GPIO_Init+0x140>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b2a      	ldr	r3, [pc, #168]	@ (800132c <MX_GPIO_Init+0x140>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001294:	4826      	ldr	r0, [pc, #152]	@ (8001330 <MX_GPIO_Init+0x144>)
 8001296:	f000 fd4d 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 80012a0:	4824      	ldr	r0, [pc, #144]	@ (8001334 <MX_GPIO_Init+0x148>)
 80012a2:	f000 fd47 	bl	8001d34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80012ac:	4822      	ldr	r0, [pc, #136]	@ (8001338 <MX_GPIO_Init+0x14c>)
 80012ae:	f000 fd41 	bl	8001d34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4819      	ldr	r0, [pc, #100]	@ (8001330 <MX_GPIO_Init+0x144>)
 80012cc:	f000 fb7e 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012d0:	2333      	movs	r3, #51	@ 0x33
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4816      	ldr	r0, [pc, #88]	@ (800133c <MX_GPIO_Init+0x150>)
 80012e4:	f000 fb72 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80012e8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80012ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <MX_GPIO_Init+0x148>)
 8001302:	f000 fb63 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001306:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800130a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <MX_GPIO_Init+0x14c>)
 8001320:	f000 fb54 	bl	80019cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	@ 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40020800 	.word	0x40020800
 8001334:	40020400 	.word	0x40020400
 8001338:	40020c00 	.word	0x40020c00
 800133c:	40020000 	.word	0x40020000

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <HAL_MspInit+0x4c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001360:	6453      	str	r3, [r2, #68]	@ 0x44
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10d      	bne.n	80013ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_TIM_PWM_MspInit+0x40>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a09      	ldr	r2, [pc, #36]	@ (80013dc <HAL_TIM_PWM_MspInit+0x40>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <HAL_TIM_PWM_MspInit+0x40>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40000400 	.word	0x40000400
 80013dc:	40023800 	.word	0x40023800

080013e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <HAL_TIM_MspPostInit+0x68>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d11d      	bne.n	800143e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_TIM_MspPostInit+0x6c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a10      	ldr	r2, [pc, #64]	@ (800144c <HAL_TIM_MspPostInit+0x6c>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <HAL_TIM_MspPostInit+0x6c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800141e:	2340      	movs	r3, #64	@ 0x40
 8001420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800142e:	2302      	movs	r3, #2
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <HAL_TIM_MspPostInit+0x70>)
 800143a:	f000 fac7 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40000400 	.word	0x40000400
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	@ 0x38
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a5b      	ldr	r2, [pc, #364]	@ (80015e0 <HAL_UART_MspInit+0x18c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d14b      	bne.n	800150e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
 800147a:	4b5a      	ldr	r3, [pc, #360]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	4a59      	ldr	r2, [pc, #356]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 8001480:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001484:	6413      	str	r3, [r2, #64]	@ 0x40
 8001486:	4b57      	ldr	r3, [pc, #348]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800148e:	623b      	str	r3, [r7, #32]
 8001490:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	4b53      	ldr	r3, [pc, #332]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a52      	ldr	r2, [pc, #328]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b50      	ldr	r3, [pc, #320]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	4b4c      	ldr	r3, [pc, #304]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a4b      	ldr	r2, [pc, #300]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b49      	ldr	r3, [pc, #292]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014dc:	2308      	movs	r3, #8
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e4:	4619      	mov	r1, r3
 80014e6:	4840      	ldr	r0, [pc, #256]	@ (80015e8 <HAL_UART_MspInit+0x194>)
 80014e8:	f000 fa70 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ec:	2304      	movs	r3, #4
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014fc:	2308      	movs	r3, #8
 80014fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	4839      	ldr	r0, [pc, #228]	@ (80015ec <HAL_UART_MspInit+0x198>)
 8001508:	f000 fa60 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800150c:	e063      	b.n	80015d6 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a37      	ldr	r2, [pc, #220]	@ (80015f0 <HAL_UART_MspInit+0x19c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d12d      	bne.n	8001574 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 800151e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001520:	4a30      	ldr	r2, [pc, #192]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6453      	str	r3, [r2, #68]	@ 0x44
 8001528:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6313      	str	r3, [r2, #48]	@ 0x30
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001550:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001562:	2307      	movs	r3, #7
 8001564:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4821      	ldr	r0, [pc, #132]	@ (80015f4 <HAL_UART_MspInit+0x1a0>)
 800156e:	f000 fa2d 	bl	80019cc <HAL_GPIO_Init>
}
 8001572:	e030      	b.n	80015d6 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1f      	ldr	r2, [pc, #124]	@ (80015f8 <HAL_UART_MspInit+0x1a4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12b      	bne.n	80015d6 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART2_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 8001588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015b6:	230c      	movs	r3, #12
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c6:	2307      	movs	r3, #7
 80015c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <HAL_UART_MspInit+0x1a0>)
 80015d2:	f000 f9fb 	bl	80019cc <HAL_GPIO_Init>
}
 80015d6:	bf00      	nop
 80015d8:	3738      	adds	r7, #56	@ 0x38
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40005000 	.word	0x40005000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40011000 	.word	0x40011000
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40004400 	.word	0x40004400

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <NMI_Handler+0x4>

08001604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <MemManage_Handler+0x4>

08001614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <UsageFault_Handler+0x4>

08001624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001652:	f000 f891 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <SystemInit+0x20>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001666:	4a05      	ldr	r2, [pc, #20]	@ (800167c <SystemInit+0x20>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001684:	f7ff ffea 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	@ (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ae:	f002 f8a1 	bl	80037f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7ff fbab 	bl	8000e0c <main>
  bx  lr    
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80016c4:	08003984 	.word	0x08003984
  ldr r2, =_sbss
 80016c8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80016cc:	20000194 	.word	0x20000194

080016d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <HAL_Init+0x40>)
 80016de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <HAL_Init+0x40>)
 80016ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_Init+0x40>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f931 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	200f      	movs	r0, #15
 8001704:	f000 f808 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fe20 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_InitTick+0x54>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_InitTick+0x58>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f93b 	bl	80019b2 <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f911 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <HAL_InitTick+0x5c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000044 	.word	0x20000044
 8001770:	2000004c 	.word	0x2000004c
 8001774:	20000048 	.word	0x20000048

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2000004c 	.word	0x2000004c
 800179c:	20000190 	.word	0x20000190

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000190 	.word	0x20000190

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_Delay+0x44>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000004c 	.word	0x2000004c

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff47 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff5c 	bl	8001848 <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff8e 	bl	80018b8 <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffb0 	bl	8001920 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	@ 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e16b      	b.n	8001cc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 815a 	bne.w	8001cba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d005      	beq.n	8001a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d130      	bne.n	8001a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 0201 	and.w	r2, r3, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d017      	beq.n	8001abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80b4 	beq.w	8001cba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b60      	ldr	r3, [pc, #384]	@ (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cdc <HAL_GPIO_Init+0x310>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a52      	ldr	r2, [pc, #328]	@ (8001ce0 <HAL_GPIO_Init+0x314>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d02b      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a51      	ldr	r2, [pc, #324]	@ (8001ce4 <HAL_GPIO_Init+0x318>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d025      	beq.n	8001bee <HAL_GPIO_Init+0x222>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a50      	ldr	r2, [pc, #320]	@ (8001ce8 <HAL_GPIO_Init+0x31c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d01f      	beq.n	8001bea <HAL_GPIO_Init+0x21e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4f      	ldr	r2, [pc, #316]	@ (8001cec <HAL_GPIO_Init+0x320>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d019      	beq.n	8001be6 <HAL_GPIO_Init+0x21a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4e      	ldr	r2, [pc, #312]	@ (8001cf0 <HAL_GPIO_Init+0x324>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0x216>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf4 <HAL_GPIO_Init+0x328>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00d      	beq.n	8001bde <HAL_GPIO_Init+0x212>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf8 <HAL_GPIO_Init+0x32c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <HAL_GPIO_Init+0x20e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4b      	ldr	r2, [pc, #300]	@ (8001cfc <HAL_GPIO_Init+0x330>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GPIO_Init+0x20a>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e00e      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	@ (8001cdc <HAL_GPIO_Init+0x310>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a32      	ldr	r2, [pc, #200]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b30      	ldr	r3, [pc, #192]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a27      	ldr	r2, [pc, #156]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c66:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb4:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae90 	bls.w	80019e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40021c00 	.word	0x40021c00
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d44:	787b      	ldrb	r3, [r7, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d50:	e003      	b.n	8001d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	041a      	lsls	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	619a      	str	r2, [r3, #24]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d78:	887a      	ldrh	r2, [r7, #2]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	041a      	lsls	r2, r3, #16
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	400b      	ands	r3, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e267      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d075      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dba:	4b88      	ldr	r3, [pc, #544]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d00c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b85      	ldr	r3, [pc, #532]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d112      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4b82      	ldr	r3, [pc, #520]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05b      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x108>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d157      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e242      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x74>
 8001e02:	4b76      	ldr	r3, [pc, #472]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a75      	ldr	r2, [pc, #468]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b70      	ldr	r3, [pc, #448]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e34:	4b69      	ldr	r3, [pc, #420]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a68      	ldr	r2, [pc, #416]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b66      	ldr	r3, [pc, #408]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a65      	ldr	r2, [pc, #404]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fca4 	bl	80017a0 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fca0 	bl	80017a0 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	@ 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e207      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xc0>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fc90 	bl	80017a0 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fc8c 	bl	80017a0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1f3      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b51      	ldr	r3, [pc, #324]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0xe8>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b44      	ldr	r3, [pc, #272]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1c7      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4937      	ldr	r1, [pc, #220]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff fc45 	bl	80017a0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fc41 	bl	80017a0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1a8      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4925      	ldr	r1, [pc, #148]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff fc24 	bl	80017a0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fc20 	bl	80017a0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e187      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d036      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff fc04 	bl	80017a0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fc00 	bl	80017a0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e167      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x200>
 8001fba:	e01b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fbed 	bl	80017a0 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	e00e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7ff fbe9 	bl	80017a0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d907      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e150      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	42470000 	.word	0x42470000
 8001fe4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ea      	bne.n	8001fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8097 	beq.w	8002130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b81      	ldr	r3, [pc, #516]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b7d      	ldr	r3, [pc, #500]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a7c      	ldr	r2, [pc, #496]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b7a      	ldr	r3, [pc, #488]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b77      	ldr	r3, [pc, #476]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b74      	ldr	r3, [pc, #464]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a73      	ldr	r2, [pc, #460]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7ff fba9 	bl	80017a0 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7ff fba5 	bl	80017a0 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e10c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b6a      	ldr	r3, [pc, #424]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x2ea>
 8002078:	4b64      	ldr	r3, [pc, #400]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a63      	ldr	r2, [pc, #396]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x30c>
 800208e:	4b5f      	ldr	r3, [pc, #380]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002092:	4a5e      	ldr	r2, [pc, #376]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6713      	str	r3, [r2, #112]	@ 0x70
 800209a:	4b5c      	ldr	r3, [pc, #368]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	4a5b      	ldr	r2, [pc, #364]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 80020a8:	4b58      	ldr	r3, [pc, #352]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ac:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b4:	4b55      	ldr	r3, [pc, #340]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b8:	4a54      	ldr	r2, [pc, #336]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020ba:	f023 0304 	bic.w	r3, r3, #4
 80020be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d015      	beq.n	80020f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff fb6a 	bl	80017a0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7ff fb66 	bl	80017a0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e0cb      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e6:	4b49      	ldr	r3, [pc, #292]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ee      	beq.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff fb54 	bl	80017a0 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7ff fb50 	bl	80017a0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0b5      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002112:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ee      	bne.n	80020fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002124:	4b39      	ldr	r3, [pc, #228]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	4a38      	ldr	r2, [pc, #224]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a1 	beq.w	800227c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213a:	4b34      	ldr	r3, [pc, #208]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d05c      	beq.n	8002200 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d141      	bne.n	80021d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fb24 	bl	80017a0 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff fb20 	bl	80017a0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e087      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	4b27      	ldr	r3, [pc, #156]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	491b      	ldr	r1, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff faf9 	bl	80017a0 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff faf5 	bl	80017a0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e05c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x416>
 80021d0:	e054      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fae2 	bl	80017a0 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff fade 	bl	80017a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e045      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e038      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
 8002214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x4ec>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d028      	beq.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d121      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d11a      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800224e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	3b01      	subs	r3, #1
 8002262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0cc      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d90c      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b65      	ldr	r3, [pc, #404]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b63      	ldr	r3, [pc, #396]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b8      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e0:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a58      	ldr	r2, [pc, #352]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f8:	4b53      	ldr	r3, [pc, #332]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a52      	ldr	r2, [pc, #328]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002304:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	494d      	ldr	r1, [pc, #308]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d044      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b47      	ldr	r3, [pc, #284]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d119      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e07f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	2b03      	cmp	r3, #3
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b3f      	ldr	r3, [pc, #252]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3b      	ldr	r3, [pc, #236]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e067      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4934      	ldr	r1, [pc, #208]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7ff fa10 	bl	80017a0 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7ff fa0c 	bl	80017a0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e04f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2b      	ldr	r3, [pc, #172]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b25      	ldr	r3, [pc, #148]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d20c      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e032      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e0:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4916      	ldr	r1, [pc, #88]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fe:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	490e      	ldr	r1, [pc, #56]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002412:	f000 f821 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002416:	4602      	mov	r2, r0
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	490a      	ldr	r1, [pc, #40]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	5ccb      	ldrb	r3, [r1, r3]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff f970 	bl	8001718 <HAL_InitTick>

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00
 8002448:	40023800 	.word	0x40023800
 800244c:	0800395c 	.word	0x0800395c
 8002450:	20000044 	.word	0x20000044
 8002454:	20000048 	.word	0x20000048

08002458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b094      	sub	sp, #80	@ 0x50
 800245e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002470:	4b79      	ldr	r3, [pc, #484]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d00d      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x40>
 800247c:	2b08      	cmp	r3, #8
 800247e:	f200 80e1 	bhi.w	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x34>
 8002486:	2b04      	cmp	r3, #4
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x3a>
 800248a:	e0db      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b73      	ldr	r3, [pc, #460]	@ (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 800248e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002490:	e0db      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002492:	4b73      	ldr	r3, [pc, #460]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x208>)
 8002494:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002496:	e0d8      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002498:	4b6f      	ldr	r3, [pc, #444]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	2200      	movs	r2, #0
 80024b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024ca:	4622      	mov	r2, r4
 80024cc:	462b      	mov	r3, r5
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	0159      	lsls	r1, r3, #5
 80024d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024dc:	0150      	lsls	r0, r2, #5
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4621      	mov	r1, r4
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	6139      	str	r1, [r7, #16]
 80024e8:	4629      	mov	r1, r5
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024fc:	4659      	mov	r1, fp
 80024fe:	018b      	lsls	r3, r1, #6
 8002500:	4651      	mov	r1, sl
 8002502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002506:	4651      	mov	r1, sl
 8002508:	018a      	lsls	r2, r1, #6
 800250a:	4651      	mov	r1, sl
 800250c:	ebb2 0801 	subs.w	r8, r2, r1
 8002510:	4659      	mov	r1, fp
 8002512:	eb63 0901 	sbc.w	r9, r3, r1
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800252a:	4690      	mov	r8, r2
 800252c:	4699      	mov	r9, r3
 800252e:	4623      	mov	r3, r4
 8002530:	eb18 0303 	adds.w	r3, r8, r3
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	462b      	mov	r3, r5
 8002538:	eb49 0303 	adc.w	r3, r9, r3
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800254a:	4629      	mov	r1, r5
 800254c:	024b      	lsls	r3, r1, #9
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002554:	4621      	mov	r1, r4
 8002556:	024a      	lsls	r2, r1, #9
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255e:	2200      	movs	r2, #0
 8002560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002562:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002568:	f7fd fe2e 	bl	80001c8 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4613      	mov	r3, r2
 8002572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002574:	e058      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b38      	ldr	r3, [pc, #224]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	4618      	mov	r0, r3
 8002580:	4611      	mov	r1, r2
 8002582:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
 800258c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002590:	4642      	mov	r2, r8
 8002592:	464b      	mov	r3, r9
 8002594:	f04f 0000 	mov.w	r0, #0
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	0159      	lsls	r1, r3, #5
 800259e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a2:	0150      	lsls	r0, r2, #5
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4641      	mov	r1, r8
 80025aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ae:	4649      	mov	r1, r9
 80025b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025c8:	ebb2 040a 	subs.w	r4, r2, sl
 80025cc:	eb63 050b 	sbc.w	r5, r3, fp
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	00eb      	lsls	r3, r5, #3
 80025da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025de:	00e2      	lsls	r2, r4, #3
 80025e0:	4614      	mov	r4, r2
 80025e2:	461d      	mov	r5, r3
 80025e4:	4643      	mov	r3, r8
 80025e6:	18e3      	adds	r3, r4, r3
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	464b      	mov	r3, r9
 80025ec:	eb45 0303 	adc.w	r3, r5, r3
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025fe:	4629      	mov	r1, r5
 8002600:	028b      	lsls	r3, r1, #10
 8002602:	4621      	mov	r1, r4
 8002604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002608:	4621      	mov	r1, r4
 800260a:	028a      	lsls	r2, r1, #10
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002612:	2200      	movs	r2, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	61fa      	str	r2, [r7, #28]
 8002618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800261c:	f7fd fdd4 	bl	80001c8 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002638:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800263a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 8002646:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800264c:	4618      	mov	r0, r3
 800264e:	3750      	adds	r7, #80	@ 0x50
 8002650:	46bd      	mov	sp, r7
 8002652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	00f42400 	.word	0x00f42400
 8002660:	007a1200 	.word	0x007a1200

08002664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002668:	4b03      	ldr	r3, [pc, #12]	@ (8002678 <HAL_RCC_GetHCLKFreq+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000044 	.word	0x20000044

0800267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002680:	f7ff fff0 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	@ (800269c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0a9b      	lsrs	r3, r3, #10
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	0800396c 	.word	0x0800396c

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a8:	f7ff ffdc 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0b5b      	lsrs	r3, r3, #13
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	@ (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	0800396c 	.word	0x0800396c

080026cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e041      	b.n	8002762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fe52 	bl	800139c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f000 f8f0 	bl	80028f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002786:	2302      	movs	r3, #2
 8002788:	e0ae      	b.n	80028e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	f200 809f 	bhi.w	80028d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800279a:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027d5 	.word	0x080027d5
 80027a4:	080028d9 	.word	0x080028d9
 80027a8:	080028d9 	.word	0x080028d9
 80027ac:	080028d9 	.word	0x080028d9
 80027b0:	08002815 	.word	0x08002815
 80027b4:	080028d9 	.word	0x080028d9
 80027b8:	080028d9 	.word	0x080028d9
 80027bc:	080028d9 	.word	0x080028d9
 80027c0:	08002857 	.word	0x08002857
 80027c4:	080028d9 	.word	0x080028d9
 80027c8:	080028d9 	.word	0x080028d9
 80027cc:	080028d9 	.word	0x080028d9
 80027d0:	08002897 	.word	0x08002897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f934 	bl	8002a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0208 	orr.w	r2, r2, #8
 80027ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0204 	bic.w	r2, r2, #4
 80027fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6999      	ldr	r1, [r3, #24]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	619a      	str	r2, [r3, #24]
      break;
 8002812:	e064      	b.n	80028de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f984 	bl	8002b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800282e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800283e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6999      	ldr	r1, [r3, #24]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	021a      	lsls	r2, r3, #8
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	619a      	str	r2, [r3, #24]
      break;
 8002854:	e043      	b.n	80028de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 f9d9 	bl	8002c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69da      	ldr	r2, [r3, #28]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0208 	orr.w	r2, r2, #8
 8002870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0204 	bic.w	r2, r2, #4
 8002880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69d9      	ldr	r1, [r3, #28]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	61da      	str	r2, [r3, #28]
      break;
 8002894:	e023      	b.n	80028de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fa2d 	bl	8002cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69d9      	ldr	r1, [r3, #28]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	021a      	lsls	r2, r3, #8
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	61da      	str	r2, [r3, #28]
      break;
 80028d6:	e002      	b.n	80028de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	75fb      	strb	r3, [r7, #23]
      break;
 80028dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a46      	ldr	r2, [pc, #280]	@ (8002a1c <TIM_Base_SetConfig+0x12c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d013      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290e:	d00f      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a43      	ldr	r2, [pc, #268]	@ (8002a20 <TIM_Base_SetConfig+0x130>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00b      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a42      	ldr	r2, [pc, #264]	@ (8002a24 <TIM_Base_SetConfig+0x134>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a41      	ldr	r2, [pc, #260]	@ (8002a28 <TIM_Base_SetConfig+0x138>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a40      	ldr	r2, [pc, #256]	@ (8002a2c <TIM_Base_SetConfig+0x13c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d108      	bne.n	8002942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a35      	ldr	r2, [pc, #212]	@ (8002a1c <TIM_Base_SetConfig+0x12c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02b      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002950:	d027      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a32      	ldr	r2, [pc, #200]	@ (8002a20 <TIM_Base_SetConfig+0x130>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d023      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a31      	ldr	r2, [pc, #196]	@ (8002a24 <TIM_Base_SetConfig+0x134>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01f      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a30      	ldr	r2, [pc, #192]	@ (8002a28 <TIM_Base_SetConfig+0x138>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01b      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a2c <TIM_Base_SetConfig+0x13c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d017      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a2e      	ldr	r2, [pc, #184]	@ (8002a30 <TIM_Base_SetConfig+0x140>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2d      	ldr	r2, [pc, #180]	@ (8002a34 <TIM_Base_SetConfig+0x144>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00f      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a2c      	ldr	r2, [pc, #176]	@ (8002a38 <TIM_Base_SetConfig+0x148>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00b      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a3c <TIM_Base_SetConfig+0x14c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a2a      	ldr	r2, [pc, #168]	@ (8002a40 <TIM_Base_SetConfig+0x150>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d003      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a29      	ldr	r2, [pc, #164]	@ (8002a44 <TIM_Base_SetConfig+0x154>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d108      	bne.n	80029b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a10      	ldr	r2, [pc, #64]	@ (8002a1c <TIM_Base_SetConfig+0x12c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <TIM_Base_SetConfig+0xf8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a12      	ldr	r2, [pc, #72]	@ (8002a2c <TIM_Base_SetConfig+0x13c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d103      	bne.n	80029f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d105      	bne.n	8002a0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f023 0201 	bic.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	611a      	str	r2, [r3, #16]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	40014000 	.word	0x40014000
 8002a34:	40014400 	.word	0x40014400
 8002a38:	40014800 	.word	0x40014800
 8002a3c:	40001800 	.word	0x40001800
 8002a40:	40001c00 	.word	0x40001c00
 8002a44:	40002000 	.word	0x40002000

08002a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f023 0201 	bic.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 0302 	bic.w	r3, r3, #2
 8002a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a20      	ldr	r2, [pc, #128]	@ (8002b20 <TIM_OC1_SetConfig+0xd8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_OC1_SetConfig+0x64>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b24 <TIM_OC1_SetConfig+0xdc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d10c      	bne.n	8002ac6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 0308 	bic.w	r3, r3, #8
 8002ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a15      	ldr	r2, [pc, #84]	@ (8002b20 <TIM_OC1_SetConfig+0xd8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d003      	beq.n	8002ad6 <TIM_OC1_SetConfig+0x8e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a14      	ldr	r2, [pc, #80]	@ (8002b24 <TIM_OC1_SetConfig+0xdc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d111      	bne.n	8002afa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	621a      	str	r2, [r3, #32]
}
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40010400 	.word	0x40010400

08002b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f023 0210 	bic.w	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f023 0320 	bic.w	r3, r3, #32
 8002b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a22      	ldr	r2, [pc, #136]	@ (8002c0c <TIM_OC2_SetConfig+0xe4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_OC2_SetConfig+0x68>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a21      	ldr	r2, [pc, #132]	@ (8002c10 <TIM_OC2_SetConfig+0xe8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d10d      	bne.n	8002bac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002baa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a17      	ldr	r2, [pc, #92]	@ (8002c0c <TIM_OC2_SetConfig+0xe4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <TIM_OC2_SetConfig+0x94>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a16      	ldr	r2, [pc, #88]	@ (8002c10 <TIM_OC2_SetConfig+0xe8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d113      	bne.n	8002be4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40010400 	.word	0x40010400

08002c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0303 	bic.w	r3, r3, #3
 8002c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a21      	ldr	r2, [pc, #132]	@ (8002cf4 <TIM_OC3_SetConfig+0xe0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_OC3_SetConfig+0x66>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a20      	ldr	r2, [pc, #128]	@ (8002cf8 <TIM_OC3_SetConfig+0xe4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10d      	bne.n	8002c96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <TIM_OC3_SetConfig+0xe0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <TIM_OC3_SetConfig+0x92>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <TIM_OC3_SetConfig+0xe4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d113      	bne.n	8002cce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	621a      	str	r2, [r3, #32]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40010400 	.word	0x40010400

08002cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	031b      	lsls	r3, r3, #12
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a12      	ldr	r2, [pc, #72]	@ (8002da0 <TIM_OC4_SetConfig+0xa4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_OC4_SetConfig+0x68>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a11      	ldr	r2, [pc, #68]	@ (8002da4 <TIM_OC4_SetConfig+0xa8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d109      	bne.n	8002d78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	621a      	str	r2, [r3, #32]
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40010400 	.word	0x40010400

08002da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e05a      	b.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a21      	ldr	r2, [pc, #132]	@ (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0c:	d01d      	beq.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d018      	beq.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	@ (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a18      	ldr	r2, [pc, #96]	@ (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a15      	ldr	r2, [pc, #84]	@ (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10c      	bne.n	8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40000800 	.word	0x40000800
 8002e90:	40000c00 	.word	0x40000c00
 8002e94:	40010400 	.word	0x40010400
 8002e98:	40014000 	.word	0x40014000
 8002e9c:	40001800 	.word	0x40001800

08002ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e042      	b.n	8002f38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fe fac4 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	@ 0x24
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fa09 	bl	80032fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d175      	bne.n	800304c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Transmit+0x2c>
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e06e      	b.n	800304e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2221      	movs	r2, #33	@ 0x21
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f7e:	f7fe fc0f 	bl	80017a0 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	88fa      	ldrh	r2, [r7, #6]
 8002f8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f98:	d108      	bne.n	8002fac <HAL_UART_Transmit+0x6c>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	e003      	b.n	8002fb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fb4:	e02e      	b.n	8003014 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2180      	movs	r1, #128	@ 0x80
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f8df 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e03a      	b.n	800304e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	e007      	b.n	8003006 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3301      	adds	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1cb      	bne.n	8002fb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2200      	movs	r2, #0
 8003026:	2140      	movs	r1, #64	@ 0x40
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f8ab 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e006      	b.n	800304e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b08a      	sub	sp, #40	@ 0x28
 800305a:	af02      	add	r7, sp, #8
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b20      	cmp	r3, #32
 8003074:	f040 8081 	bne.w	800317a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_UART_Receive+0x2e>
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e079      	b.n	800317c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2222      	movs	r2, #34	@ 0x22
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309c:	f7fe fb80 	bl	80017a0 <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b6:	d108      	bne.n	80030ca <HAL_UART_Receive+0x74>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e003      	b.n	80030d2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030d2:	e047      	b.n	8003164 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2200      	movs	r2, #0
 80030dc:	2120      	movs	r1, #32
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f850 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e042      	b.n	800317c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10c      	bne.n	8003116 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003108:	b29a      	uxth	r2, r3
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	3302      	adds	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e01f      	b.n	8003156 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311e:	d007      	beq.n	8003130 <HAL_UART_Receive+0xda>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <HAL_UART_Receive+0xe8>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e008      	b.n	8003150 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800314a:	b2da      	uxtb	r2, r3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	3301      	adds	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1b2      	bne.n	80030d4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003194:	e03b      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d037      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7fe faff 	bl	80017a0 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e03a      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d023      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b80      	cmp	r3, #128	@ 0x80
 80031ca:	d020      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b40      	cmp	r3, #64	@ 0x40
 80031d0:	d01d      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d116      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f81d 	bl	8003236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2208      	movs	r2, #8
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e00f      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	429a      	cmp	r2, r3
 800322a:	d0b4      	beq.n	8003196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003236:	b480      	push	{r7}
 8003238:	b095      	sub	sp, #84	@ 0x54
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	330c      	adds	r3, #12
 8003244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800325e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800326c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e5      	bne.n	800323e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	61fb      	str	r3, [r7, #28]
   return(result);
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003294:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800329a:	e841 2300 	strex	r3, r2, [r1]
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e5      	bne.n	8003272 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d119      	bne.n	80032e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	330c      	adds	r3, #12
 80032b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f023 0310 	bic.w	r3, r3, #16
 80032c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	330c      	adds	r3, #12
 80032cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032ce:	61ba      	str	r2, [r7, #24]
 80032d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	6979      	ldr	r1, [r7, #20]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	e841 2300 	strex	r3, r2, [r1]
 80032da:	613b      	str	r3, [r7, #16]
   return(result);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e5      	bne.n	80032ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032f0:	bf00      	nop
 80032f2:	3754      	adds	r7, #84	@ 0x54
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003300:	b0c0      	sub	sp, #256	@ 0x100
 8003302:	af00      	add	r7, sp, #0
 8003304:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003318:	68d9      	ldr	r1, [r3, #12]
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	ea40 0301 	orr.w	r3, r0, r1
 8003324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	431a      	orrs	r2, r3
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	431a      	orrs	r2, r3
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003354:	f021 010c 	bic.w	r1, r1, #12
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003362:	430b      	orrs	r3, r1
 8003364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003376:	6999      	ldr	r1, [r3, #24]
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	ea40 0301 	orr.w	r3, r0, r1
 8003382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b8f      	ldr	r3, [pc, #572]	@ (80035c8 <UART_SetConfig+0x2cc>)
 800338c:	429a      	cmp	r2, r3
 800338e:	d005      	beq.n	800339c <UART_SetConfig+0xa0>
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b8d      	ldr	r3, [pc, #564]	@ (80035cc <UART_SetConfig+0x2d0>)
 8003398:	429a      	cmp	r2, r3
 800339a:	d104      	bne.n	80033a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff f982 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 80033a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033a4:	e003      	b.n	80033ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033a6:	f7ff f969 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 80033aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b8:	f040 810c 	bne.w	80035d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c0:	2200      	movs	r2, #0
 80033c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033ce:	4622      	mov	r2, r4
 80033d0:	462b      	mov	r3, r5
 80033d2:	1891      	adds	r1, r2, r2
 80033d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033d6:	415b      	adcs	r3, r3
 80033d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033de:	4621      	mov	r1, r4
 80033e0:	eb12 0801 	adds.w	r8, r2, r1
 80033e4:	4629      	mov	r1, r5
 80033e6:	eb43 0901 	adc.w	r9, r3, r1
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033fe:	4690      	mov	r8, r2
 8003400:	4699      	mov	r9, r3
 8003402:	4623      	mov	r3, r4
 8003404:	eb18 0303 	adds.w	r3, r8, r3
 8003408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800340c:	462b      	mov	r3, r5
 800340e:	eb49 0303 	adc.w	r3, r9, r3
 8003412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003422:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800342a:	460b      	mov	r3, r1
 800342c:	18db      	adds	r3, r3, r3
 800342e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003430:	4613      	mov	r3, r2
 8003432:	eb42 0303 	adc.w	r3, r2, r3
 8003436:	657b      	str	r3, [r7, #84]	@ 0x54
 8003438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800343c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003440:	f7fc fec2 	bl	80001c8 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4b61      	ldr	r3, [pc, #388]	@ (80035d0 <UART_SetConfig+0x2d4>)
 800344a:	fba3 2302 	umull	r2, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	011c      	lsls	r4, r3, #4
 8003452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003456:	2200      	movs	r2, #0
 8003458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800345c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003464:	4642      	mov	r2, r8
 8003466:	464b      	mov	r3, r9
 8003468:	1891      	adds	r1, r2, r2
 800346a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800346c:	415b      	adcs	r3, r3
 800346e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003474:	4641      	mov	r1, r8
 8003476:	eb12 0a01 	adds.w	sl, r2, r1
 800347a:	4649      	mov	r1, r9
 800347c:	eb43 0b01 	adc.w	fp, r3, r1
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800348c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003494:	4692      	mov	sl, r2
 8003496:	469b      	mov	fp, r3
 8003498:	4643      	mov	r3, r8
 800349a:	eb1a 0303 	adds.w	r3, sl, r3
 800349e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034a2:	464b      	mov	r3, r9
 80034a4:	eb4b 0303 	adc.w	r3, fp, r3
 80034a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034c0:	460b      	mov	r3, r1
 80034c2:	18db      	adds	r3, r3, r3
 80034c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80034c6:	4613      	mov	r3, r2
 80034c8:	eb42 0303 	adc.w	r3, r2, r3
 80034cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034d6:	f7fc fe77 	bl	80001c8 <__aeabi_uldivmod>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <UART_SetConfig+0x2d4>)
 80034e2:	fba3 2301 	umull	r2, r3, r3, r1
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	2264      	movs	r2, #100	@ 0x64
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	1acb      	subs	r3, r1, r3
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034f6:	4b36      	ldr	r3, [pc, #216]	@ (80035d0 <UART_SetConfig+0x2d4>)
 80034f8:	fba3 2302 	umull	r2, r3, r3, r2
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003504:	441c      	add	r4, r3
 8003506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003510:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	1891      	adds	r1, r2, r2
 800351e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003520:	415b      	adcs	r3, r3
 8003522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003528:	4641      	mov	r1, r8
 800352a:	1851      	adds	r1, r2, r1
 800352c:	6339      	str	r1, [r7, #48]	@ 0x30
 800352e:	4649      	mov	r1, r9
 8003530:	414b      	adcs	r3, r1
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003540:	4659      	mov	r1, fp
 8003542:	00cb      	lsls	r3, r1, #3
 8003544:	4651      	mov	r1, sl
 8003546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800354a:	4651      	mov	r1, sl
 800354c:	00ca      	lsls	r2, r1, #3
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	4603      	mov	r3, r0
 8003554:	4642      	mov	r2, r8
 8003556:	189b      	adds	r3, r3, r2
 8003558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800355c:	464b      	mov	r3, r9
 800355e:	460a      	mov	r2, r1
 8003560:	eb42 0303 	adc.w	r3, r2, r3
 8003564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003574:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800357c:	460b      	mov	r3, r1
 800357e:	18db      	adds	r3, r3, r3
 8003580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003582:	4613      	mov	r3, r2
 8003584:	eb42 0303 	adc.w	r3, r2, r3
 8003588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800358a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800358e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003592:	f7fc fe19 	bl	80001c8 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <UART_SetConfig+0x2d4>)
 800359c:	fba3 1302 	umull	r1, r3, r3, r2
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	2164      	movs	r1, #100	@ 0x64
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	3332      	adds	r3, #50	@ 0x32
 80035ae:	4a08      	ldr	r2, [pc, #32]	@ (80035d0 <UART_SetConfig+0x2d4>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	f003 0207 	and.w	r2, r3, #7
 80035ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4422      	add	r2, r4
 80035c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035c4:	e106      	b.n	80037d4 <UART_SetConfig+0x4d8>
 80035c6:	bf00      	nop
 80035c8:	40011000 	.word	0x40011000
 80035cc:	40011400 	.word	0x40011400
 80035d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035e6:	4642      	mov	r2, r8
 80035e8:	464b      	mov	r3, r9
 80035ea:	1891      	adds	r1, r2, r2
 80035ec:	6239      	str	r1, [r7, #32]
 80035ee:	415b      	adcs	r3, r3
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035f6:	4641      	mov	r1, r8
 80035f8:	1854      	adds	r4, r2, r1
 80035fa:	4649      	mov	r1, r9
 80035fc:	eb43 0501 	adc.w	r5, r3, r1
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	00eb      	lsls	r3, r5, #3
 800360a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800360e:	00e2      	lsls	r2, r4, #3
 8003610:	4614      	mov	r4, r2
 8003612:	461d      	mov	r5, r3
 8003614:	4643      	mov	r3, r8
 8003616:	18e3      	adds	r3, r4, r3
 8003618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800361c:	464b      	mov	r3, r9
 800361e:	eb45 0303 	adc.w	r3, r5, r3
 8003622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003632:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003642:	4629      	mov	r1, r5
 8003644:	008b      	lsls	r3, r1, #2
 8003646:	4621      	mov	r1, r4
 8003648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364c:	4621      	mov	r1, r4
 800364e:	008a      	lsls	r2, r1, #2
 8003650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003654:	f7fc fdb8 	bl	80001c8 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4b60      	ldr	r3, [pc, #384]	@ (80037e0 <UART_SetConfig+0x4e4>)
 800365e:	fba3 2302 	umull	r2, r3, r3, r2
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	011c      	lsls	r4, r3, #4
 8003666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003678:	4642      	mov	r2, r8
 800367a:	464b      	mov	r3, r9
 800367c:	1891      	adds	r1, r2, r2
 800367e:	61b9      	str	r1, [r7, #24]
 8003680:	415b      	adcs	r3, r3
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003688:	4641      	mov	r1, r8
 800368a:	1851      	adds	r1, r2, r1
 800368c:	6139      	str	r1, [r7, #16]
 800368e:	4649      	mov	r1, r9
 8003690:	414b      	adcs	r3, r1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a0:	4659      	mov	r1, fp
 80036a2:	00cb      	lsls	r3, r1, #3
 80036a4:	4651      	mov	r1, sl
 80036a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036aa:	4651      	mov	r1, sl
 80036ac:	00ca      	lsls	r2, r1, #3
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	4642      	mov	r2, r8
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036bc:	464b      	mov	r3, r9
 80036be:	460a      	mov	r2, r1
 80036c0:	eb42 0303 	adc.w	r3, r2, r3
 80036c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036e0:	4649      	mov	r1, r9
 80036e2:	008b      	lsls	r3, r1, #2
 80036e4:	4641      	mov	r1, r8
 80036e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ea:	4641      	mov	r1, r8
 80036ec:	008a      	lsls	r2, r1, #2
 80036ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036f2:	f7fc fd69 	bl	80001c8 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	4b38      	ldr	r3, [pc, #224]	@ (80037e0 <UART_SetConfig+0x4e4>)
 80036fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2264      	movs	r2, #100	@ 0x64
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	1acb      	subs	r3, r1, r3
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	3332      	adds	r3, #50	@ 0x32
 8003710:	4a33      	ldr	r2, [pc, #204]	@ (80037e0 <UART_SetConfig+0x4e4>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800371c:	441c      	add	r4, r3
 800371e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003722:	2200      	movs	r2, #0
 8003724:	673b      	str	r3, [r7, #112]	@ 0x70
 8003726:	677a      	str	r2, [r7, #116]	@ 0x74
 8003728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	1891      	adds	r1, r2, r2
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	415b      	adcs	r3, r3
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800373c:	4641      	mov	r1, r8
 800373e:	1851      	adds	r1, r2, r1
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	4649      	mov	r1, r9
 8003744:	414b      	adcs	r3, r1
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003754:	4659      	mov	r1, fp
 8003756:	00cb      	lsls	r3, r1, #3
 8003758:	4651      	mov	r1, sl
 800375a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800375e:	4651      	mov	r1, sl
 8003760:	00ca      	lsls	r2, r1, #3
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	4603      	mov	r3, r0
 8003768:	4642      	mov	r2, r8
 800376a:	189b      	adds	r3, r3, r2
 800376c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800376e:	464b      	mov	r3, r9
 8003770:	460a      	mov	r2, r1
 8003772:	eb42 0303 	adc.w	r3, r2, r3
 8003776:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	663b      	str	r3, [r7, #96]	@ 0x60
 8003782:	667a      	str	r2, [r7, #100]	@ 0x64
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003790:	4649      	mov	r1, r9
 8003792:	008b      	lsls	r3, r1, #2
 8003794:	4641      	mov	r1, r8
 8003796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800379a:	4641      	mov	r1, r8
 800379c:	008a      	lsls	r2, r1, #2
 800379e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037a2:	f7fc fd11 	bl	80001c8 <__aeabi_uldivmod>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <UART_SetConfig+0x4e4>)
 80037ac:	fba3 1302 	umull	r1, r3, r3, r2
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	2164      	movs	r1, #100	@ 0x64
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	3332      	adds	r3, #50	@ 0x32
 80037be:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <UART_SetConfig+0x4e4>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	f003 020f 	and.w	r2, r3, #15
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4422      	add	r2, r4
 80037d2:	609a      	str	r2, [r3, #8]
}
 80037d4:	bf00      	nop
 80037d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037da:	46bd      	mov	sp, r7
 80037dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e0:	51eb851f 	.word	0x51eb851f

080037e4 <memset>:
 80037e4:	4402      	add	r2, r0
 80037e6:	4603      	mov	r3, r0
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d100      	bne.n	80037ee <memset+0xa>
 80037ec:	4770      	bx	lr
 80037ee:	f803 1b01 	strb.w	r1, [r3], #1
 80037f2:	e7f9      	b.n	80037e8 <memset+0x4>

080037f4 <__libc_init_array>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	4d0d      	ldr	r5, [pc, #52]	@ (800382c <__libc_init_array+0x38>)
 80037f8:	4c0d      	ldr	r4, [pc, #52]	@ (8003830 <__libc_init_array+0x3c>)
 80037fa:	1b64      	subs	r4, r4, r5
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	2600      	movs	r6, #0
 8003800:	42a6      	cmp	r6, r4
 8003802:	d109      	bne.n	8003818 <__libc_init_array+0x24>
 8003804:	4d0b      	ldr	r5, [pc, #44]	@ (8003834 <__libc_init_array+0x40>)
 8003806:	4c0c      	ldr	r4, [pc, #48]	@ (8003838 <__libc_init_array+0x44>)
 8003808:	f000 f818 	bl	800383c <_init>
 800380c:	1b64      	subs	r4, r4, r5
 800380e:	10a4      	asrs	r4, r4, #2
 8003810:	2600      	movs	r6, #0
 8003812:	42a6      	cmp	r6, r4
 8003814:	d105      	bne.n	8003822 <__libc_init_array+0x2e>
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	f855 3b04 	ldr.w	r3, [r5], #4
 800381c:	4798      	blx	r3
 800381e:	3601      	adds	r6, #1
 8003820:	e7ee      	b.n	8003800 <__libc_init_array+0xc>
 8003822:	f855 3b04 	ldr.w	r3, [r5], #4
 8003826:	4798      	blx	r3
 8003828:	3601      	adds	r6, #1
 800382a:	e7f2      	b.n	8003812 <__libc_init_array+0x1e>
 800382c:	0800397c 	.word	0x0800397c
 8003830:	0800397c 	.word	0x0800397c
 8003834:	0800397c 	.word	0x0800397c
 8003838:	08003980 	.word	0x08003980

0800383c <_init>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	bf00      	nop
 8003840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003842:	bc08      	pop	{r3}
 8003844:	469e      	mov	lr, r3
 8003846:	4770      	bx	lr

08003848 <_fini>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	bf00      	nop
 800384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384e:	bc08      	pop	{r3}
 8003850:	469e      	mov	lr, r3
 8003852:	4770      	bx	lr
